if (NOT MSVC_VERSION STREQUAL @MSVC_VERSION@)
message(FATAL_ERROR "Invalid MSVC version for Robot Raconteur")
endif()

include(FindPackageHandleStandardArgs)

include(FindBoost)
SET (Boost_ADDITIONAL_VERSIONS @Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@.0 @Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@)
SET (Boost_USE_MULTITHREADED ON)
SET (Boost_USE_STATIC_RUNTIME OFF)
SET (Boost_USE_STATIC_LIBS NOT ${RobotRaconteur_USE_SHARED_CORE_LIB})
find_package(Boost COMPONENTS date_time filesystem system regex chrono atomic thread random REQUIRED)
add_definitions(-DBOOST_ALL_NO_LIB)

include_directories(${Boost_INCLUDE_DIRS})

if (NOT ${Boost_MAJOR_VERSION} STREQUAL @Boost_MAJOR_VERSION@ OR NOT ${Boost_MINOR_VERSION} STREQUAL @Boost_MINOR_VERSION@)
message(FATAL_ERROR "Invalid Boost Version expected @Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@")
endif()

get_filename_component(CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
if (NOT RobotRaconteur_INCLUDE_DIRS)
set(RobotRaconteur_INCLUDE_DIRS  "${CMAKE_CURRENT_LIST_DIR}/include" CACHE PATH "" FORCE)
endif()
mark_as_advanced(RobotRaconteur_INCLUDE_DIRS)
include_directories(${RobotRaconteur_INCLUDE_DIRS})

foreach(libfile RobotRaconteur_LIBRARY_DEBUG RobotRaconteur_LIBRARY_RELEASE)
if(EXISTS "${${libfile}}")
get_filename_component(libname ${${libfile}} NAME)
if (RobotRaconteur_USE_SHARED_CORE_LIB)
if (libname MATCHES "^lib.*$")
set(${libfile} "${libfile}-NOTFOUND" CACHE FILEPATH "" FORCE)
endif()
else()
if (NOT libname MATCHES "^lib.*$")
set(${libfile} "${libfile}-NOTFOUND" CACHE FILEPATH "" FORCE)
endif()
endif()
endif()
endforeach()

if(RobotRaconteur_USE_SHARED_CORE_LIB)
set(RobotRaconteur_CORE_LIB_NAME "@RobotRaconteur_SHARED_CORE_LIB_NAME@")
set(RobotRaconteur_CORE_LIB_NAME_RELEASE "${RobotRaconteur_CORE_LIB_NAME}.lib")
set(RobotRaconteur_CORE_LIB_NAME_DEBUG "${RobotRaconteur_CORE_LIB_NAME}-d.lib")
else()
set(RobotRaconteur_CORE_LIB_NAME "libRobotRaconteurCore")
set(RobotRaconteur_CORE_LIB_NAME_RELEASE "${RobotRaconteur_CORE_LIB_NAME}.lib")
set(RobotRaconteur_CORE_LIB_NAME_DEBUG "${RobotRaconteur_CORE_LIB_NAME}.lib")
endif()

if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
if (NOT RobotRaconteur_LIBRARY_DEBUG)
set(RobotRaconteur_LIBRARY_DEBUG "${CMAKE_CURRENT_LIST_DIR}/lib/Debug/${RobotRaconteur_CORE_LIB_NAME_DEBUG}" CACHE FILEPATH "" FORCE)
endif()
if (NOT RobotRaconteur_LIBRARY_RELEASE)
set(RobotRaconteur_LIBRARY_RELEASE "${CMAKE_CURRENT_LIST_DIR}/lib/Release/${RobotRaconteur_CORE_LIB_NAME_RELEASE}" CACHE FILEPATH "" FORCE)
endif()
else()
if (NOT RobotRaconteur_LIBRARY_DEBUG)
set(RobotRaconteur_LIBRARY_DEBUG "${CMAKE_CURRENT_LIST_DIR}/lib/Debug/x64/${RobotRaconteur_CORE_LIB_NAME_DEBUG}" CACHE FILEPATH "" FORCE)
endif()
if (NOT RobotRaconteur_LIBRARY_RELEASE)
set(RobotRaconteur_LIBRARY_RELEASE "${CMAKE_CURRENT_LIST_DIR}/lib/Release/x64/${RobotRaconteur_CORE_LIB_NAME_RELEASE}" CACHE FILEPATH "" FORCE)
endif()
endif()
set(RobotRaconteur_LIBRARY optimized ${RobotRaconteur_LIBRARY_RELEASE} debug ${RobotRaconteur_LIBRARY_DEBUG})

mark_as_advanced(RobotRaconteur_LIBRARY_DEBUG RobotRaconteur_LIBRARY_RELEASE)

if (NOT EXISTS "${RobotRaconteur_INCLUDE_DIRS}/RobotRaconteur.h")
set(RobotRaconteur_INCLUDE_DIRS "RobotRaconteur_INCLUDE_DIRS-NOTFOUND" CACHE PATH "" FORCE)
endif()

if (NOT EXISTS "${RobotRaconteur_LIBRARY_DEBUG}")
set(RobotRaconteur_LIBRARY_DEBUG "RobotRaconteur_LIBRARY_DEBUG-NOTFOUND" CACHE FILEPATH "" FORCE)
endif()

if (NOT EXISTS "${RobotRaconteur_LIBRARY_RELEASE}")
set(RobotRaconteur_LIBRARY_RELEASE "RobotRaconteur_LIBRARY_RELEASE-NOTFOUND" CACHE FILEPATH "" FORCE)
endif()


add_definitions( -D_WIN32_WINNT=0x0600 )
set (RobotRaconteur_EXTRA_LIBRARIES ${RobotRaconteur_EXTRA_LIBRARIES} Mswsock.lib ws2_32.lib IPHLPAPI.lib Crypt32.lib Secur32.lib )
set (RobotRaconteur_MINIMAL_EXTRA_LIBRARIES ${RobotRaconteur_EXTRA_LIBRARIES})
set (RobotRaconteur_EXTRA_LIBRARIES ${Boost_LIBRARIES} ${RobotRaconteur_EXTRA_LIBRARIES})

set(RobotRaconteur_GEN ${CMAKE_CURRENT_LIST_DIR}/bin/RobotRaconteurGen)

find_package_handle_standard_args(RobotRaconteur DEFAULT_MSG RobotRaconteur_INCLUDE_DIRS RobotRaconteur_LIBRARY_DEBUG RobotRaconteur_LIBRARY_RELEASE Boost_DATE_TIME_FOUND Boost_FILESYSTEM_FOUND Boost_SYSTEM_FOUND Boost_REGEX_FOUND Boost_CHRONO_FOUND Boost_ATOMIC_FOUND Boost_THREAD_FOUND)

if (NOT RobotRaconteur_FIND_QUIETLY)
message(STATUS "Robot Raconteur version: ${RobotRaconteur_VERSION}")
endif()

include(${CMAKE_CURRENT_LIST_DIR}/RobotRaconteurGenerateThunk.cmake)
