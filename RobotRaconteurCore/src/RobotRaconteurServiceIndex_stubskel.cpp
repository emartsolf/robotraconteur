// Copyright 2011-2018 Wason Technology, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifdef ROBOTRACONTEUR_CORE_USE_STDAFX
#include "stdafx.h"
#endif

//This file is automatically generated. DO NOT EDIT!

#include "RobotRaconteur/RobotRaconteurServiceIndex_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
namespace RobotRaconteurServiceIndex
{

std::string RobotRaconteurServiceIndexFactory::GetServiceName()
{
return "RobotRaconteurServiceIndex";
}
std::string RobotRaconteurServiceIndexFactory::DefString()
{
std::string out(
"service RobotRaconteurServiceIndex\n"
"struct NodeInfo\n"
"field string NodeName\n"
"field uint8[16] NodeID\n"
"field string{int32} ServiceIndexConnectionURL\n"
"end struct\n"
"struct ServiceInfo\n"
"field string Name\n"
"field string RootObjectType\n"
"field string{int32} RootObjectImplements\n"
"field string{int32} ConnectionURL\n"
"field varvalue{string} Attributes\n"
"end struct\n"
"object ServiceIndex\n"
"function ServiceInfo{int32} GetLocalNodeServices()\n"
"function NodeInfo{int32} GetRoutedNodes()\n"
"function NodeInfo{int32} GetDetectedNodes()\n"
"event LocalNodeServicesChanged()\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> RobotRaconteurServiceIndexFactory::FindStructureStub(const std::string& s)
{
std::vector<std::string> res;
boost::split(res,s,boost::is_from_range('.','.'));
std::string servicetype=res.at(0);
std::string objecttype=res.at(1);
if (objecttype=="NodeInfo") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<NodeInfo_stub>(GetNode()));
if (objecttype=="ServiceInfo") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ServiceInfo_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> RobotRaconteurServiceIndexFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();std::vector<std::string> res;
boost::split(res,type,boost::is_from_range('.','.'));
std::string servicetype=res.at(0);
std::string objecttype=res.at(1);
if (servicetype != "RobotRaconteurServiceIndex") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRValue> RobotRaconteurServiceIndexFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();std::vector<std::string> res;
boost::split(res,type,boost::is_from_range('.','.'));
std::string servicetype=res.at(0);
std::string objecttype=res.at(1);
if (servicetype != "RobotRaconteurServiceIndex") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureArray> RobotRaconteurServiceIndexFactory::PackCStructureArray(RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseArray> structure)
{
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseArray> RobotRaconteurServiceIndexFactory::UnpackCStructureArray(RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureArray> structure)
{
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureMultiDimArray> RobotRaconteurServiceIndexFactory::PackCStructureMultiDimArray(RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseMultiDimArray> structure)
{
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseMultiDimArray> RobotRaconteurServiceIndexFactory::UnpackCStructureMultiDimArray(RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureMultiDimArray> structure)
{
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> RobotRaconteurServiceIndexFactory::CreateStub(const std::string& type, const std::string& path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
std::vector<std::string> res;
boost::split(res,type,boost::is_from_range('.','.'));
std::string servicetype=res.at(0);
std::string objecttype=res.at(1);
if (servicetype != "RobotRaconteurServiceIndex") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="ServiceIndex") { RR_SHARED_PTR<ServiceIndex_stub> o=(RR_MAKE_SHARED<ServiceIndex_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> RobotRaconteurServiceIndexFactory::CreateSkel(const std::string& type, const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
std::vector<std::string> res;
boost::split(res,type,boost::is_from_range('.','.'));
std::string servicetype=res.at(0);
std::string objecttype=res.at(1);
if (servicetype != "RobotRaconteurServiceIndex") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="ServiceIndex") {RR_SHARED_PTR<ServiceIndex_skel> o=RR_MAKE_SHARED<ServiceIndex_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> NodeInfo_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRValue> s)
{
RR_SHARED_PTR<NodeInfo > s2=RobotRaconteur::rr_cast<NodeInfo >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("NodeName",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(s2->NodeName))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("NodeID",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->NodeID)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("ServiceIndexConnectionURL",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(s2->ServiceIndexConnectionURL))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("RobotRaconteurServiceIndex.NodeInfo",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> NodeInfo_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<NodeInfo > ret=RR_MAKE_SHARED<NodeInfo >();
ret->NodeName=RobotRaconteur::RRArrayToString(RobotRaconteur::MessageElement::FindElement(m->Elements,"NodeName")->CastData<RobotRaconteur::RRArray<char> >());
ret->NodeID=RobotRaconteur::MessageElement::FindElement(m->Elements,"NodeID")->CastData<RobotRaconteur::RRArray<uint8_t > >();
ret->ServiceIndexConnectionURL=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(RobotRaconteur::MessageElement::FindElement(m->Elements,"ServiceIndexConnectionURL")->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ServiceInfo_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRValue> s)
{
RR_SHARED_PTR<ServiceInfo > s2=RobotRaconteur::rr_cast<ServiceInfo >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Name",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(s2->Name))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("RootObjectType",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(s2->RootObjectType))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("RootObjectImplements",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(s2->RootObjectImplements))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("ConnectionURL",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,RobotRaconteur::RRArray<char>  >(s2->ConnectionURL))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("Attributes",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<std::string,RobotRaconteur::RRValue >(s2->Attributes))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("RobotRaconteurServiceIndex.ServiceInfo",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ServiceInfo_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ServiceInfo > ret=RR_MAKE_SHARED<ServiceInfo >();
ret->Name=RobotRaconteur::RRArrayToString(RobotRaconteur::MessageElement::FindElement(m->Elements,"Name")->CastData<RobotRaconteur::RRArray<char> >());
ret->RootObjectType=RobotRaconteur::RRArrayToString(RobotRaconteur::MessageElement::FindElement(m->Elements,"RootObjectType")->CastData<RobotRaconteur::RRArray<char> >());
ret->RootObjectImplements=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(RobotRaconteur::MessageElement::FindElement(m->Elements,"RootObjectImplements")->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
ret->ConnectionURL=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<char>  > >((RRGetNode()->UnpackMapType<int32_t,RobotRaconteur::RRArray<char>  >(RobotRaconteur::MessageElement::FindElement(m->Elements,"ConnectionURL")->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
ret->Attributes=RobotRaconteur::rr_cast<RobotRaconteur::RRMap<std::string,RobotRaconteur::RRValue > >((RRGetNode()->UnpackMapType<std::string,RobotRaconteur::RRValue >(RobotRaconteur::MessageElement::FindElement(m->Elements,"Attributes")->CastData<RobotRaconteur::MessageElementMap<std::string> >())));
return ret;
}

ServiceIndex_stub::ServiceIndex_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void ServiceIndex_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > > ServiceIndex_stub::GetLocalNodeServices()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetLocalNodeServices");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,ServiceInfo  > >((RRGetNode()->UnpackMapType<int32_t,ServiceInfo  >(rr_me->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > ServiceIndex_stub::GetRoutedNodes()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetRoutedNodes");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,NodeInfo  > >((RRGetNode()->UnpackMapType<int32_t,NodeInfo  >(rr_me->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > ServiceIndex_stub::GetDetectedNodes()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetDetectedNodes");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,NodeInfo  > >((RRGetNode()->UnpackMapType<int32_t,NodeInfo  >(rr_me->CastData<RobotRaconteur::MessageElementMap<int32_t> >())));
}

boost::signals2::signal<void ()>& ServiceIndex_stub::get_LocalNodeServicesChanged()
{
return rrvar_LocalNodeServicesChanged;
}

void ServiceIndex_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
if (rr_m->MemberName=="LocalNodeServicesChanged")
{
get_LocalNodeServicesChanged()();
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ServiceIndex_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ServiceIndex_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>ServiceIndex_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string ServiceIndex_stub::RRType()
{
return "RobotRaconteurServiceIndex.ServiceIndex";
}
void ServiceIndex_stub::RRClose()
{
rrvar_LocalNodeServicesChanged.disconnect_all_slots();
ServiceStub::RRClose();
}

void ServiceIndex_stub::async_GetLocalNodeServices(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetLocalNodeServices");
AsyncProcessRequest(rr_req,boost::bind(&ServiceIndex_stub::rrend_GetLocalNodeServices, RobotRaconteur::rr_cast<ServiceIndex_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ServiceIndex_stub::rrend_GetLocalNodeServices(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
handler(RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,ServiceInfo  > >((RRGetNode()->UnpackMapType<int32_t,ServiceInfo  >(me->CastData<RobotRaconteur::MessageElementMap<int32_t> >()))), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ServiceIndex_stub::async_GetRoutedNodes(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetRoutedNodes");
AsyncProcessRequest(rr_req,boost::bind(&ServiceIndex_stub::rrend_GetRoutedNodes, RobotRaconteur::rr_cast<ServiceIndex_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ServiceIndex_stub::rrend_GetRoutedNodes(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
handler(RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,NodeInfo  > >((RRGetNode()->UnpackMapType<int32_t,NodeInfo  >(me->CastData<RobotRaconteur::MessageElementMap<int32_t> >()))), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ServiceIndex_stub::async_GetDetectedNodes(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"GetDetectedNodes");
AsyncProcessRequest(rr_req,boost::bind(&ServiceIndex_stub::rrend_GetDetectedNodes, RobotRaconteur::rr_cast<ServiceIndex_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ServiceIndex_stub::rrend_GetDetectedNodes(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
handler(RobotRaconteur::rr_cast<RobotRaconteur::RRMap<int32_t,NodeInfo  > >((RRGetNode()->UnpackMapType<int32_t,NodeInfo  >(me->CastData<RobotRaconteur::MessageElementMap<int32_t> >()))), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void ServiceIndex_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<RobotRaconteurServiceIndex::ServiceIndex > ServiceIndex_skel::get_obj()
{
return RobotRaconteur::rr_cast<RobotRaconteurServiceIndex::ServiceIndex >(uncastobj);
}
void ServiceIndex_skel::ReleaseCastObject() 
{
}
std::string ServiceIndex_skel::GetObjectType()
{
return "RobotRaconteurServiceIndex.ServiceIndex";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
if (rr_m->MemberName == "GetLocalNodeServices")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,ServiceInfo  > > rr_return=get_obj()->GetLocalNodeServices();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,ServiceInfo  >(rr_return))));
return rr_mr;
}
if (rr_m->MemberName == "GetRoutedNodes")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > rr_return=get_obj()->GetRoutedNodes();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,NodeInfo  >(rr_return))));
return rr_mr;
}
if (rr_m->MemberName == "GetDetectedNodes")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,NodeInfo  > > rr_return=get_obj()->GetDetectedNodes();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackMapType<int32_t,NodeInfo  >(rr_return))));
return rr_mr;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ServiceIndex_skel::rr_LocalNodeServicesChanged_Handler()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mm=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_EventReq,"LocalNodeServicesChanged");
SendEvent(rr_mm);
}
void ServiceIndex_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<RobotRaconteurServiceIndex::ServiceIndex > obj=RobotRaconteur::rr_cast<RobotRaconteurServiceIndex::ServiceIndex >(rrobj1);
LocalNodeServicesChanged_rrconnection=obj->get_LocalNodeServicesChanged().connect(boost::bind(&ServiceIndex_skel::rr_LocalNodeServicesChanged_Handler, RobotRaconteur::rr_cast<ServiceIndex_skel>(shared_from_this())));
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void ServiceIndex_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
LocalNodeServicesChanged_rrconnection.disconnect();
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> ServiceIndex_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ServiceIndex_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<RobotRaconteurServiceIndex::ServiceIndex > obj=RobotRaconteur::rr_cast<RobotRaconteurServiceIndex::ServiceIndex >(rrobj1);
}

void ServiceIndex_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ServiceIndex_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<RobotRaconteurServiceIndex::ServiceIndex > obj=RobotRaconteur::rr_cast<RobotRaconteurServiceIndex::ServiceIndex >(rrobj1);
}

void ServiceIndex_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ServiceIndex_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<RobotRaconteurServiceIndex::ServiceIndex > obj=RobotRaconteur::rr_cast<RobotRaconteurServiceIndex::ServiceIndex >(o);
}
RR_SHARED_PTR<void> ServiceIndex_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ServiceIndex_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

}

