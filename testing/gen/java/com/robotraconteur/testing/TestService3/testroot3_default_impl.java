//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class testroot3_default_impl implements testroot3{
    protected PipeBroadcaster<int[]> rrvar_unreliable1;
    protected WireBroadcaster<int[]> rrvar_peekwire;
    protected WireUnicastReceiver<int[]> rrvar_pokewire;
    protected int rrvar_readme;
    public int get_readme() { return rrvar_readme; }
    public void set_readme(int value) { rrvar_readme = value; }
    protected int rrvar_writeme;
    public int get_writeme() { return rrvar_writeme; }
    public void set_writeme(int value) { rrvar_writeme = value; }
    protected int rrvar_unknown_modifier;
    public int get_unknown_modifier() { return rrvar_unknown_modifier; }
    public void set_unknown_modifier(int value) { rrvar_unknown_modifier = value; }
    protected testenum1 rrvar_testenum1_prop;
    public testenum1 get_testenum1_prop() { return rrvar_testenum1_prop; }
    public void set_testenum1_prop(testenum1 value) { rrvar_testenum1_prop = value; }
    protected testcstruct1 rrvar_testcstruct1_prop;
    public testcstruct1 get_testcstruct1_prop() { return rrvar_testcstruct1_prop; }
    public void set_testcstruct1_prop(testcstruct1 value) { rrvar_testcstruct1_prop = value; }
    protected teststruct3 rrvar_teststruct3_prop;
    public teststruct3 get_teststruct3_prop() { return rrvar_teststruct3_prop; }
    public void set_teststruct3_prop(teststruct3 value) { rrvar_teststruct3_prop = value; }
    protected List<double[]> rrvar_d1;
    public List<double[]> get_d1() { return rrvar_d1; }
    public void set_d1(List<double[]> value) { rrvar_d1 = value; }
    protected List<double[]> rrvar_d2;
    public List<double[]> get_d2() { return rrvar_d2; }
    public void set_d2(List<double[]> value) { rrvar_d2 = value; }
    protected Map<Integer,double[]> rrvar_d3;
    public Map<Integer,double[]> get_d3() { return rrvar_d3; }
    public void set_d3(Map<Integer,double[]> value) { rrvar_d3 = value; }
    protected Map<Integer,double[]> rrvar_d4;
    public Map<Integer,double[]> get_d4() { return rrvar_d4; }
    public void set_d4(Map<Integer,double[]> value) { rrvar_d4 = value; }
    protected List<MultiDimArray> rrvar_d5;
    public List<MultiDimArray> get_d5() { return rrvar_d5; }
    public void set_d5(List<MultiDimArray> value) { rrvar_d5 = value; }
    protected Map<Integer,MultiDimArray> rrvar_d6;
    public Map<Integer,MultiDimArray> get_d6() { return rrvar_d6; }
    public void set_d6(Map<Integer,MultiDimArray> value) { rrvar_d6 = value; }
    public void testcstruct1_func1(testcstruct1 s) {
    throw new UnsupportedOperationException();    }
    public testcstruct1 testcstruct1_func2() {
    throw new UnsupportedOperationException();    }
    public Generator2<double[]> gen_func1() {
    throw new UnsupportedOperationException();    }
    public Generator2<UnsignedBytes> gen_func2(String name) {
    throw new UnsupportedOperationException();    }
    public Generator3<UnsignedBytes> gen_func3(String name) {
    throw new UnsupportedOperationException();    }
    public Generator1<UnsignedBytes,UnsignedBytes> gen_func4() {
    throw new UnsupportedOperationException();    }
    public Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> gen_func5() {
    throw new UnsupportedOperationException();    }
    public obj4 get_o4() {
    throw new UnsupportedOperationException();
    }
    public Pipe<int[]> get_unreliable1()
    { return rrvar_unreliable1.getPipe();  }
    public void set_unreliable1(Pipe<int[]> value)
    {
    if (rrvar_unreliable1!=null) throw new IllegalStateException("Pipe already set");
    rrvar_unreliable1= new PipeBroadcaster<int[]>(value);
    }
    public Pipe<int[]> get_unreliable2()
    { throw new UnsupportedOperationException(); }
    public void set_unreliable2(Pipe<int[]> value)
    { throw new IllegalStateException();}
    public Pipe<int[]> get_p1()
    { throw new UnsupportedOperationException(); }
    public void set_p1(Pipe<int[]> value)
    { throw new IllegalStateException();}
    public Pipe<int[]> get_p2()
    { throw new UnsupportedOperationException(); }
    public void set_p2(Pipe<int[]> value)
    { throw new IllegalStateException();}
    public Pipe<MultiDimArray> get_p3()
    { throw new UnsupportedOperationException(); }
    public void set_p3(Pipe<MultiDimArray> value)
    { throw new IllegalStateException();}
    public Wire<int[]> get_peekwire()
    { return rrvar_peekwire.getWire();  }
    public void set_peekwire(Wire<int[]> value)
    {
    if (rrvar_peekwire!=null) throw new IllegalStateException("Pipe already set");
    rrvar_peekwire= new WireBroadcaster<int[]>(value);
    }
    public Wire<int[]> get_pokewire()
    { return rrvar_pokewire.getWire();  }
    public void set_pokewire(Wire<int[]> value)
    {
    if (rrvar_pokewire!=null) throw new IllegalStateException("Pipe already set");
    rrvar_pokewire= new WireUnicastReceiver<int[]>(value);
    }
    public Wire<int[]> get_w1()
    { throw new UnsupportedOperationException(); }
    public void set_w1(Wire<int[]> value)
    { throw new UnsupportedOperationException();}
    public Wire<int[]> get_w2()
    { throw new UnsupportedOperationException(); }
    public void set_w2(Wire<int[]> value)
    { throw new UnsupportedOperationException();}
    public Wire<MultiDimArray> get_w3()
    { throw new UnsupportedOperationException(); }
    public void set_w3(Wire<MultiDimArray> value)
    { throw new UnsupportedOperationException();}
    public ArrayMemory<double[]> get_readmem()
    { throw new UnsupportedOperationException(); }
    public CStructureArrayMemory<testcstruct2[]> get_cstruct_m1()
    { throw new UnsupportedOperationException(); }
    public CStructureMultiDimArrayMemory<testcstruct2[]> get_cstruct_m2()
    { throw new UnsupportedOperationException(); }
}
