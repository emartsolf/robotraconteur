//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class com__robotraconteur__testing__TestService3Factory extends ServiceFactory
{
    public String defString()
{
    String out="service com.robotraconteur.testing.TestService3\n\nstdver 0.9.0\n#option version 0.9.0\n\nimport com.robotraconteur.testing.TestService1\nusing  com.robotraconteur.testing.TestService1.testroot\nusing  com.robotraconteur.testing.TestService1.teststruct1\nusing  com.robotraconteur.testing.TestService1.teststruct2\nusing  com.robotraconteur.testing.TestService1.testexception1\nusing  com.robotraconteur.testing.TestService1.sub2\nusing  com.robotraconteur.testing.TestService1.sub3\n\nenum testenum1\nvalue1 = 0,	value2,	value3,	anothervalue = -1,\nanothervalue2 = -2,\nanothervalue3 = -3,\nhexval1 = 0x10,\nhexval2,\nneghexval1 = 0x80000005,\nneghexval2,\nmore_values\nend enum\n\nconstant string strconst \"This is a\\n \\\"string constant\\\" \\\\\\/\\b\\f \\r\\u00FF tabme\\ttabme\\n smile! \\ud83d\\udE01\"\nconstant int32 int32const 3856384\nconstant int32[] int32const_array {182476, 56483, -2947}\nconstant double[] doubleconst_array {1.5847, 3.14, -548e3, 3452.67e2, 485e-21}\nconstant struct structconst {field1: strconst, field2: int32const_array}\nconstant struct structconst2 {field3: structconst, field4: int32const}\n\ncstruct testcstruct1\nfield double d1\nfield double[6] d2\nfield double[6-] d3\nfield double[3,3] d4\nfield testcstruct2 s1\nfield testcstruct2[8] s2\nfield testcstruct2[9-] s3\nfield testcstruct2[2,4] s4\nend cstruct\n\ncstruct testcstruct2\nfield int8 i1\nfield int8[15] i2\nfield int8[17-] i3\nend cstruct\n\nstruct teststruct3\nfield testcstruct1 s1\nfield testcstruct1[] s2\nfield testcstruct1[11] s3\nfield testcstruct1[16-] s4\nfield testcstruct1[3,3] s5\nfield testcstruct1[*] s6\nfield testcstruct1{list} s7\nfield testcstruct1[]{list} s8\nfield testcstruct1[*]{list} s9\nfield varvalue s10\nfield varvalue s11\nfield varvalue s12\nfield varvalue s13\nfield varvalue s14\nfield varvalue s15\nend struct\n\nobject testroot3\nproperty int32 readme [readonly]\nproperty int32 writeme [writeonly]\n\npipe int32 unreliable1 [unreliable,readonly]\noption pipe unreliable2 unreliable\npipe int32 unreliable2\n\nwire int32 peekwire [readonly]\nwire int32 \\\npokewire [writeonly]\nproperty int32 unknown_modifier [unknown, unknown2(), unknown_3(23, 45.8e-5, hello, \"world\")]\n\nmemory double[] readmem [readonly]\n\nobjref obj4 o4\n\nproperty testenum1 testenum1_prop\n\nproperty testcstruct1 testcstruct1_prop\nfunction void testcstruct1_func1(testcstruct1 s)\nfunction testcstruct1 testcstruct1_func2()\n\nproperty teststruct3 teststruct3_prop\n\nmemory testcstruct2[] cstruct_m1\nmemory testcstruct2[*] cstruct_m2\n\nfunction double{generator} gen_func1()\nfunction uint8[]{generator} gen_func2(string name)\nfunction void gen_func3(string name, uint8[]{generator} in)\nfunction uint8[]{generator} gen_func4(uint8[]{generator} in)\nfunction teststruct2{generator} gen_func5(teststruct2{generator} in)\n\nend object\n\nobject obj1\nproperty double[] d1\nend object\n\nobject obj2\nimplements obj1\nproperty double[] d1\nend object\n\nobject obj3\nimplements obj1\nimplements obj2\nproperty double[] d1\nend object\n\nobject obj4\nimplements sub2\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\n\n";
    return out;    }
    public String getServiceName() {return "com.robotraconteur.testing.TestService3";}
    public teststruct3_stub teststruct3_stubentry;
    public testcstruct1_stub testcstruct1_stubentry;
    public testcstruct2_stub testcstruct2_stubentry;
    public com__robotraconteur__testing__TestService3Factory()
{
    teststruct3_stubentry=new teststruct3_stub(this);
    testcstruct1_stubentry=new testcstruct1_stub(this);
    testcstruct2_stubentry=new testcstruct2_stub(this);
    }
    public IStructureStub findStructureStub(String objecttype)
    {
    if (objecttype.equals("teststruct3"))    return teststruct3_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public ICStructureStub findCStructureStub(String objecttype)
    {
    if (objecttype.equals("testcstruct1"))    return testcstruct1_stubentry;
    if (objecttype.equals("testcstruct2"))    return testcstruct2_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public ServiceStub createStub(WrappedServiceStub innerstub) {
    String objecttype=innerstub.getRR_objecttype().getServiceDefinition().getName() + "." + innerstub.getRR_objecttype().getName();
    if (RobotRaconteurNode.splitQualifiedName(objecttype)[0].equals( "com.robotraconteur.testing.TestService3")) {
    String objshort=removePath(objecttype);
    if(objshort.equals( "testroot3"))
    return new testroot3_stub(innerstub);
    if(objshort.equals( "obj1"))
    return new obj1_stub(innerstub);
    if(objshort.equals( "obj2"))
    return new obj2_stub(innerstub);
    if(objshort.equals( "obj3"))
    return new obj3_stub(innerstub);
    if(objshort.equals( "obj4"))
    return new obj4_stub(innerstub);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objecttype)[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public ServiceSkel createSkel(Object obj) {
    String objtype=ServiceSkelUtil.findParentInterface(obj.getClass()).getName().toString();
    if ((RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]).equals( "com.robotraconteur.testing.TestService3")) {
    String sobjtype=removePath(objtype);
    if(sobjtype.equals( "testroot3"))
    return new testroot3_skel((testroot3)obj);
    if(sobjtype.equals( "obj1"))
    return new obj1_skel((obj1)obj);
    if(sobjtype.equals( "obj2"))
    return new obj2_skel((obj2)obj);
    if(sobjtype.equals( "obj3"))
    return new obj3_skel((obj3)obj);
    if(sobjtype.equals( "obj4"))
    return new obj4_skel((obj4)obj);
    } else {
    String ext_service_type=(RobotRaconteurNode.splitQualifiedName(objtype.toString())[0]);
    return RobotRaconteurNode.s().getServiceType(ext_service_type).createSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public RobotRaconteurException downCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    String rr_type=rr_exp.error;
    if (!rr_type.contains(".")) return rr_exp;
    String[] rr_stype = RobotRaconteurNode.splitQualifiedName(rr_type);
    if (!rr_stype[0].equals("com.robotraconteur.testing.TestService3")) return RobotRaconteurNode.s().downCastException(rr_exp);
    return rr_exp;
    }
}
