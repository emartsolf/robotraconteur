//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class testcstruct2_stub extends CStructureStub<testcstruct2> {
    public testcstruct2_stub(com__robotraconteur__testing__TestService3Factory d) {def=d;}
    private com__robotraconteur__testing__TestService3Factory def;
    public MessageElementCStructure packCStructure(RRCStructure s1) {
    vectorptr_messageelement m=new vectorptr_messageelement();
    try {
    testcstruct2 s = (testcstruct2)s1;
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.newMessageElementDispose("i1",new byte[] {s.i1}));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.newMessageElementDispose("i2",s.i2));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.newMessageElementDispose("i3",s.i3));
    return new MessageElementCStructure(m);
    }
    finally {
    m.delete();
    }
    }
    public testcstruct2 unpackCStructure(MessageElementCStructure m) {
    if (m == null ) throw new NullPointerException("CStructure must not be null");
    vectorptr_messageelement mm=m.getElements();
    try {
    testcstruct2 s = new testcstruct2();
    s.i1 =(MessageElementUtil.<byte[]>castDataAndDispose(MessageElement.findElement(mm,"i1")))[0];
    s.i2 =MessageElementUtil.<byte[]>castDataAndDispose(MessageElement.findElement(mm,"i2"));
    s.i3 =MessageElementUtil.<byte[]>castDataAndDispose(MessageElement.findElement(mm,"i3"));
    return s;
    }
    finally {
    mm.delete();
    }
    }
    public String getTypeName() {return "com.robotraconteur.testing.TestService3.testcstruct2";}
    protected testcstruct2[] createArray(int count) { return new testcstruct2[count]; }
}
