//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class testroot3_skel extends ServiceSkel {
    protected testroot3 obj;
    public testroot3_skel(Object o) { 
    super(o);
    obj=(testroot3)o;
    }
    public void releaseCastObject() { 
    obj=null;
    super.releaseCastObject();
    }
    public MessageElement callGetProperty(String membername) {
    if(membername.equals( "readme"))
    {
    int ret=obj.get_readme();
    return MessageElementUtil.<int[]>packArray("return",new int[] {ret});
    }
    if(membername.equals( "writeme"))
    {
    int ret=obj.get_writeme();
    return MessageElementUtil.<int[]>packArray("return",new int[] {ret});
    }
    if(membername.equals( "unknown_modifier"))
    {
    int ret=obj.get_unknown_modifier();
    return MessageElementUtil.<int[]>packArray("return",new int[] {ret});
    }
    if(membername.equals( "testenum1_prop"))
    {
    testenum1 ret=obj.get_testenum1_prop();
    return MessageElementUtil.<int[]>packArray("return", new int[] {((int)ret.getValue())});
    }
    if(membername.equals( "testcstruct1_prop"))
    {
    testcstruct1 ret=obj.get_testcstruct1_prop();
    return MessageElementUtil.<testcstruct1>packCStructureToArray("return",ret);
    }
    if(membername.equals( "teststruct3_prop"))
    {
    teststruct3 ret=obj.get_teststruct3_prop();
    return MessageElementUtil.packStructure("return",ret);
    }
    if(membername.equals( "d1"))
    {
    List<double[]> ret=obj.get_d1();
    return MessageElementUtil.<double[]>packListType("return",DataTypeUtil.verifyArrayLength1(ret, 6, false),double[].class);
    }
    if(membername.equals( "d2"))
    {
    List<double[]> ret=obj.get_d2();
    return MessageElementUtil.<double[]>packListType("return",DataTypeUtil.verifyArrayLength1(ret, 6, true),double[].class);
    }
    if(membername.equals( "d3"))
    {
    Map<Integer,double[]> ret=obj.get_d3();
    return MessageElementUtil.<Integer,double[]>packMapType("return",DataTypeUtil.verifyArrayLength1(ret, 6, false),Integer.class,double[].class);
    }
    if(membername.equals( "d4"))
    {
    Map<Integer,double[]> ret=obj.get_d4();
    return MessageElementUtil.<Integer,double[]>packMapType("return",DataTypeUtil.verifyArrayLength1(ret, 6, true),Integer.class,double[].class);
    }
    if(membername.equals( "d5"))
    {
    List<MultiDimArray> ret=obj.get_d5();
    return MessageElementUtil.<MultiDimArray>packListType("return",DataTypeUtil.verifyArrayLength2(ret,9,new int[] {3,3}),MultiDimArray.class);
    }
    if(membername.equals( "d6"))
    {
    Map<Integer,MultiDimArray> ret=obj.get_d6();
    return MessageElementUtil.<Integer,MultiDimArray>packMapType("return",DataTypeUtil.verifyArrayLength2(ret,9,new int[] {3,3}),Integer.class,MultiDimArray.class);
    }
    throw new MemberNotFoundException("Member not found");
    }
    public void callSetProperty(String membername, MessageElement m) {
    if(membername.equals( "readme"))
    {
    obj.set_readme((MessageElementUtil.<int[]>castDataAndDispose(m))[0]);
    return;
    }
    if(membername.equals( "writeme"))
    {
    obj.set_writeme((MessageElementUtil.<int[]>castDataAndDispose(m))[0]);
    return;
    }
    if(membername.equals( "unknown_modifier"))
    {
    obj.set_unknown_modifier((MessageElementUtil.<int[]>castDataAndDispose(m))[0]);
    return;
    }
    if(membername.equals( "testenum1_prop"))
    {
    obj.set_testenum1_prop(testenum1.intToEnum((MessageElementUtil.<int[]>castDataAndDispose(m)[0])));
    return;
    }
    if(membername.equals( "testcstruct1_prop"))
    {
    obj.set_testcstruct1_prop(MessageElementUtil.<testcstruct1>unpackCStructureFromArray(m));
    return;
    }
    if(membername.equals( "teststruct3_prop"))
    {
    obj.set_teststruct3_prop(MessageElementUtil.<teststruct3>unpackStructure(m));
    return;
    }
    if(membername.equals( "d1"))
    {
    obj.set_d1(DataTypeUtil.verifyArrayLength1(MessageElementUtil.<double[]>unpackListType(m), 6, false));
    return;
    }
    if(membername.equals( "d2"))
    {
    obj.set_d2(DataTypeUtil.verifyArrayLength1(MessageElementUtil.<double[]>unpackListType(m), 6, true));
    return;
    }
    if(membername.equals( "d3"))
    {
    obj.set_d3(DataTypeUtil.verifyArrayLength1(MessageElementUtil.<Integer,double[]>unpackMapType(m), 6, false));
    return;
    }
    if(membername.equals( "d4"))
    {
    obj.set_d4(DataTypeUtil.verifyArrayLength1(MessageElementUtil.<Integer,double[]>unpackMapType(m), 6, true));
    return;
    }
    if(membername.equals( "d5"))
    {
    obj.set_d5(DataTypeUtil.verifyArrayLength2(MessageElementUtil.<MultiDimArray>unpackListType(m),9,new int[] {3,3}));
    return;
    }
    if(membername.equals( "d6"))
    {
    obj.set_d6(DataTypeUtil.verifyArrayLength2(MessageElementUtil.<Integer,MultiDimArray>unpackMapType(m),9,new int[] {3,3}));
    return;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public MessageElement callFunction(String rr_membername, vectorptr_messageelement rr_m) {
    if(rr_membername.equals( "testcstruct1_func1"))
    {
    testcstruct1 s=MessageElementUtil.<testcstruct1>unpackCStructureFromArray(vectorptr_messageelement_util.findElement(rr_m,"s"));
    this.obj.testcstruct1_func1(s);
    return new MessageElement("return",new int[] {0});
    }
    if(rr_membername.equals( "testcstruct1_func2"))
    {
    testcstruct1 rr_ret=obj.testcstruct1_func2();
    return MessageElementUtil.<testcstruct1>packCStructureToArray("return",rr_ret);
    }
    if(rr_membername.equals( "gen_func1"))
    {
    Generator2<double[]> rr_ret=this.obj.gen_func1();
    int generator_index = innerskel.registerGeneratorServer("gen_func1", new WrappedGenerator2ServerDirectorJava<double[]>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    if(rr_membername.equals( "gen_func2"))
    {
    String name=MessageElementUtil.unpackString(vectorptr_messageelement_util.findElement(rr_m,"name"));
    Generator2<UnsignedBytes> rr_ret=this.obj.gen_func2(name);
    int generator_index = innerskel.registerGeneratorServer("gen_func2", new WrappedGenerator2ServerDirectorJava<UnsignedBytes>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    if(rr_membername.equals( "gen_func3"))
    {
    String name=MessageElementUtil.unpackString(vectorptr_messageelement_util.findElement(rr_m,"name"));
    Generator3<UnsignedBytes> rr_ret=this.obj.gen_func3(name);
    int generator_index = innerskel.registerGeneratorServer("gen_func3", new WrappedGenerator3ServerDirectorJava<UnsignedBytes>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    if(rr_membername.equals( "gen_func4"))
    {
    Generator1<UnsignedBytes,UnsignedBytes> rr_ret=this.obj.gen_func4();
    int generator_index = innerskel.registerGeneratorServer("gen_func4", new WrappedGenerator1ServerDirectorJava<UnsignedBytes,UnsignedBytes>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    if(rr_membername.equals( "gen_func5"))
    {
    Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> rr_ret=this.obj.gen_func5();
    int generator_index = innerskel.registerGeneratorServer("gen_func5", new WrappedGenerator1ServerDirectorJava<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    throw new MemberNotFoundException("Member not found");
    }
    public Object getSubObj(String name, String ind) {
    if(name.equals( "o4")) {
    return obj.get_o4();
    }
    throw new MemberNotFoundException("");
    }
    public void registerEvents(Object obj1) {
    obj=(testroot3)obj1;
    }
    public void unregisterEvents(Object obj1) {
    obj=(testroot3)obj1;
    }
    public Object getCallbackFunction(long endpoint, String membername) {
    throw new MemberNotFoundException("Member not found");
    }
    public  void initPipeServers(Object obj1) {
    obj=(testroot3)obj1;
    obj.set_unreliable1(new Pipe<int[]>(innerskel.getPipe("unreliable1")));
    obj.set_unreliable2(new Pipe<int[]>(innerskel.getPipe("unreliable2")));
    obj.set_p1(new Pipe<int[]>(innerskel.getPipe("p1")));
    obj.set_p2(new Pipe<int[]>(innerskel.getPipe("p2")));
    obj.set_p3(new Pipe<MultiDimArray>(innerskel.getPipe("p3")));
    }
    public void initCallbackServers(Object obj1) {
    obj=(testroot3)obj1;
    }
    public void initWireServers(Object obj1) {
    obj=(testroot3)obj1;
    obj.set_peekwire(new Wire<int[]>(innerskel.getWire("peekwire")));
    obj.set_pokewire(new Wire<int[]>(innerskel.getWire("pokewire")));
    obj.set_w1(new Wire<int[]>(innerskel.getWire("w1")));
    obj.set_w2(new Wire<int[]>(innerskel.getWire("w2")));
    obj.set_w3(new Wire<MultiDimArray>(innerskel.getWire("w3")));
    }
    public WrappedArrayMemoryDirector getArrayMemory(String name) {
    if(name.equals( "readmem")) {
    WrappedArrayMemoryDirectorJava<double[]> dir=new  WrappedArrayMemoryDirectorJava<double[]>(obj.get_readmem());
    return dir;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedMultiDimArrayMemoryDirector getMultiDimArrayMemory(String name) {
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedCStructureArrayMemoryDirector getCStructureArrayMemory(String name) {
    if(name.equals( "cstruct_m1")) {
    WrappedCStructureArrayMemoryDirectorJava<testcstruct2[]> dir=new  WrappedCStructureArrayMemoryDirectorJava<testcstruct2[]>(obj.get_cstruct_m1(), testcstruct2.class);
    return dir;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public WrappedCStructureMultiDimArrayMemoryDirector getCStructureMultiDimArrayMemory(String name) {
    if(name.equals( "cstruct_m2")) {
    WrappedCStructureMultiDimArrayMemoryDirectorJava<testcstruct2[]> dir=new  WrappedCStructureMultiDimArrayMemoryDirectorJava<testcstruct2[]>(obj.get_cstruct_m2(), testcstruct2.class);
    return dir;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public String getRRType() { return "com.robotraconteur.testing.TestService3.testroot3"; }
}
