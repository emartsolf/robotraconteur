//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class testcstruct1_stub extends CStructureStub<testcstruct1> {
    public testcstruct1_stub(com__robotraconteur__testing__TestService3Factory d) {def=d;}
    private com__robotraconteur__testing__TestService3Factory def;
    public MessageElementCStructure packCStructure(RRCStructure s1) {
    vectorptr_messageelement m=new vectorptr_messageelement();
    try {
    testcstruct1 s = (testcstruct1)s1;
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<double[]>packArray("d1",new double[] {s.d1}));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<double[]>packArray("d2",DataTypeUtil.verifyArrayLength(s.d2, 6, false)));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<double[]>packArray("d3",DataTypeUtil.verifyArrayLength(s.d3, 6, true)));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<double[]>packArray("d4",DataTypeUtil.verifyArrayLength(s.d4, 9, false)));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<testcstruct2>packCStructureToArray("s1",s.s1));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<testcstruct2>packCStructureArray("s2",DataTypeUtil.verifyArrayLength(s.s2, 8, false)));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<testcstruct2>packCStructureArray("s3",DataTypeUtil.verifyArrayLength(s.s3, 9, true)));
    MessageElementUtil.addMessageElementDispose(m,MessageElementUtil.<testcstruct2>packCStructureArray("s4",DataTypeUtil.verifyArrayLength(s.s4, 8, false)));
    return new MessageElementCStructure(m);
    }
    finally {
    m.delete();
    }
    }
    public testcstruct1 unpackCStructure(MessageElementCStructure m) {
    if (m == null ) throw new NullPointerException("CStructure must not be null");
    vectorptr_messageelement mm=m.getElements();
    try {
    testcstruct1 s = new testcstruct1();
    s.d1 =(MessageElementUtil.<double[]>castDataAndDispose(MessageElement.findElement(mm,"d1")))[0];
    s.d2 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<double[]>unpackArray(MessageElement.findElement(mm,"d2")), 6, false);
    s.d3 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<double[]>unpackArray(MessageElement.findElement(mm,"d3")), 6, true);
    s.d4 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<double[]>unpackArray(MessageElement.findElement(mm,"d4")), 9, false);
    s.s1 =MessageElementUtil.<testcstruct2>unpackCStructureFromArray(MessageElement.findElement(mm,"s1"));
    s.s2 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<testcstruct2>unpackCStructureArray(MessageElement.findElement(mm,"s2")), 8, false);
    s.s3 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<testcstruct2>unpackCStructureArray(MessageElement.findElement(mm,"s3")), 9, true);
    s.s4 =DataTypeUtil.verifyArrayLength(MessageElementUtil.<testcstruct2>unpackCStructureArray(MessageElement.findElement(mm,"s4")), 8, false);
    return s;
    }
    finally {
    mm.delete();
    }
    }
    public String getTypeName() {return "com.robotraconteur.testing.TestService3.testcstruct1";}
    protected testcstruct1[] createArray(int count) { return new testcstruct1[count]; }
}
