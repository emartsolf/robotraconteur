//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "com__robotraconteur__testing__TestService3_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/assign/list_of.hpp>
#else
#include "stdafx.h"
#endif
namespace com
{
namespace robotraconteur
{
namespace testing
{
namespace TestService3
{
std::string com__robotraconteur__testing__TestService3Factory::GetServiceName()
{
return "com.robotraconteur.testing.TestService3";
}
std::string com__robotraconteur__testing__TestService3Factory::DefString()
{
std::string out(
"service com.robotraconteur.testing.TestService3\n"
"\n"
"stdver 0.9.0\n"
"#option version 0.9.0\n"
"\n"
"import com.robotraconteur.testing.TestService1\n"
"using  com.robotraconteur.testing.TestService1.testroot\n"
"using  com.robotraconteur.testing.TestService1.teststruct1\n"
"using  com.robotraconteur.testing.TestService1.teststruct2\n"
"using  com.robotraconteur.testing.TestService1.testexception1\n"
"using  com.robotraconteur.testing.TestService1.sub2\n"
"using  com.robotraconteur.testing.TestService1.sub3\n"
"\n"
"enum testenum1\n"
"	value1 = 0,	value2,	value3,	anothervalue = -1,\n"
"	anothervalue2 = -2,\n"
"	anothervalue3 = -3,\n"
"	hexval1 = 0x10,\n"
"	hexval2,\n"
"	neghexval1 = 0x80000005,\n"
"	neghexval2,\n"
"	more_values\n"
"end enum\n"
"\n"
"constant string strconst \"This is a\\n \\\"string constant\\\" \\\\\\/\\b\\f \\r\\u00FF tabme\\ttabme\\n smile! \\ud83d\\udE01\"\n"
"constant int32 int32const 3856384\n"
"constant int32[] int32const_array {182476, 56483, -2947}\n"
"constant double[] doubleconst_array {1.5847, 3.14, -548e3, 3452.67e2, 485e-21}\n"
"constant struct structconst {field1: strconst, field2: int32const_array}\n"
"constant struct structconst2 {field3: structconst, field4: int32const}    \n"
"\n"
"cstruct testcstruct1\n"
"	field double d1\n"
"	field double[6] d2\n"
"	field double[6-] d3\n"
"	field double[3,3] d4\n"
"	field testcstruct2 s1\n"
"	field testcstruct2[8] s2\n"
"	field testcstruct2[9-] s3\n"
"	field testcstruct2[2,4] s4\n"
"end cstruct\n"
"\n"
"cstruct testcstruct2\n"
"	field int8 i1\n"
"	field int8[15] i2\n"
"	field int8[17-] i3\n"
"end cstruct\n"
"\n"
"struct teststruct3\n"
"	field testcstruct1 s1\n"
"	field testcstruct1[] s2\n"
"	field testcstruct1[11] s3\n"
"	field testcstruct1[16-] s4\n"
"	field testcstruct1[3,3] s5\n"
"	field testcstruct1[*] s6\n"
"	field testcstruct1{list} s7\n"
"	field testcstruct1[]{list} s8\n"
"	field testcstruct1[*]{list} s9\n"
"	field varvalue s10\n"
"	field varvalue s11\n"
"	field varvalue s12\n"
"	field varvalue s13\n"
"	field varvalue s14\n"
"	field varvalue s15\n"
"end struct\n"
"\n"
"object testroot3\n"
"    property int32 readme [readonly]\n"
"	property int32 writeme [writeonly]\n"
"	\n"
"	pipe int32 unreliable1 [unreliable,readonly]\n"
"	option pipe unreliable2 unreliable\n"
"	pipe int32 unreliable2\n"
"\n"
"    wire int32 peekwire [readonly]\n"
"    wire int32 \\\n"
"	pokewire [writeonly]\n"
"	property int32 unknown_modifier [unknown, unknown2(), unknown_3(23, 45.8e-5, hello, \"world\")]\n"
"	\n"
"	memory double[] readmem [readonly]\n"
"	\n"
"	objref obj4 o4\n"
"	\n"
"	property testenum1 testenum1_prop\n"
"	\n"
"	property testcstruct1 testcstruct1_prop\n"
"	function void testcstruct1_func1(testcstruct1 s)\n"
"	function testcstruct1 testcstruct1_func2()\n"
"	\n"
"	property teststruct3 teststruct3_prop\n"
"	\n"
"	memory testcstruct2[] cstruct_m1\n"
"	memory testcstruct2[*] cstruct_m2\n"
"	\n"
"	function double{generator} gen_func1() \n"
"	function uint8[]{generator} gen_func2(string name) \n"
"	function void gen_func3(string name, uint8[]{generator} in) \n"
"	function uint8[]{generator} gen_func4(uint8[]{generator} in) \n"
"	function teststruct2{generator} gen_func5(teststruct2{generator} in)\n"
"	\n"
"	#extra tests for fixed length arrays\n"
"	property double[6]{list} d1\n"
"	property double[6-]{list} d2\n"
"	property double[6]{int32} d3\n"
"	property double[6-]{int32} d4\n"
"	property double[3,3]{list} d5\n"
"	property double[3,3]{int32} d6\n"
"	\n"
"	#Test pipe and wire verification\n"
"	pipe int32[3] p1\n"
"	pipe int32[3-] p2\n"
"	pipe int32[2,2] p3\n"
"	wire int32[6] w1\n"
"	wire int32[6-] w2\n"
"	wire int32[3,2] w3\n"
"	\n"
"end object\n"
"\n"
"object obj1\n"
"    property double[] d1\n"
"end object\n"
"\n"
"object obj2\n"
"    implements obj1\n"
"    property double[] d1\n"
"end object\n"
"\n"
"object obj3\n"
"    implements obj1\n"
"    implements obj2\n"
"	property double[] d1\n"
"end object\n"
"\n"
"object obj4\n"
"    implements sub2\n"
"	property string s_ind\n"
"	property int32 i_ind\n"
"\n"
"	property string data\n"
"	objref sub3{string} o3_1\n"
"end object\n"
"\n"
"\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> com__robotraconteur__testing__TestService3Factory::FindStructureStub(const std::string& s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="teststruct3") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<teststruct3_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> com__robotraconteur__testing__TestService3Factory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRValue> com__robotraconteur__testing__TestService3Factory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureArray> com__robotraconteur__testing__TestService3Factory::PackCStructureArray(RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseArray> structin)
{
std::string type=structin->RRElementTypeString();
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->PackCStructureArray(structin);
if (objecttype=="testcstruct1") return RobotRaconteur::CStructureStub_PackCStructureArray(RobotRaconteur::rr_cast<RobotRaconteur::RRCStructureArray<testcstruct1> >(structin));
if (objecttype=="testcstruct2") return RobotRaconteur::CStructureStub_PackCStructureArray(RobotRaconteur::rr_cast<RobotRaconteur::RRCStructureArray<testcstruct2> >(structin));
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseArray> com__robotraconteur__testing__TestService3Factory::UnpackCStructureArray(RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureArray> mstructin)
{
std::string type=mstructin->GetTypeString();
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->UnpackCStructureArray(mstructin);
if (objecttype=="testcstruct1") return RobotRaconteur::CStructureStub_UnpackCStructureArray<testcstruct1>(mstructin);
if (objecttype=="testcstruct2") return RobotRaconteur::CStructureStub_UnpackCStructureArray<testcstruct2>(mstructin);
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureMultiDimArray> com__robotraconteur__testing__TestService3Factory::PackCStructureMultiDimArray(RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseMultiDimArray> structin)
{
std::string type=structin->RRElementTypeString();
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->PackCStructureMultiDimArray(structin);
if (objecttype=="testcstruct1") return RobotRaconteur::CStructureStub_PackCStructureMultiDimArray(RobotRaconteur::rr_cast<RobotRaconteur::RRCStructureMultiDimArray<testcstruct1> >(structin));
if (objecttype=="testcstruct2") return RobotRaconteur::CStructureStub_PackCStructureMultiDimArray(RobotRaconteur::rr_cast<RobotRaconteur::RRCStructureMultiDimArray<testcstruct2> >(structin));
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::RRCStructureBaseMultiDimArray> com__robotraconteur__testing__TestService3Factory::UnpackCStructureMultiDimArray(RR_SHARED_PTR<RobotRaconteur::MessageElementCStructureMultiDimArray> mstructin)
{
std::string type=mstructin->GetTypeString();
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->UnpackCStructureMultiDimArray(mstructin);
if (objecttype=="testcstruct1") return RobotRaconteur::CStructureStub_UnpackCStructureMultiDimArray<testcstruct1>(mstructin);
if (objecttype=="testcstruct2") return RobotRaconteur::CStructureStub_UnpackCStructureMultiDimArray<testcstruct2>(mstructin);
throw RobotRaconteur::ServiceException("Invalid cstructure type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> com__robotraconteur__testing__TestService3Factory::CreateStub(const std::string& type, const std::string& path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="testroot3") { RR_SHARED_PTR<testroot3_stub> o=(RR_MAKE_SHARED<testroot3_stub>(path,context)); o->RRInitStub(); return o; }
if (objecttype=="obj1") { RR_SHARED_PTR<obj1_stub> o=(RR_MAKE_SHARED<obj1_stub>(path,context)); o->RRInitStub(); return o; }
if (objecttype=="obj2") { RR_SHARED_PTR<obj2_stub> o=(RR_MAKE_SHARED<obj2_stub>(path,context)); o->RRInitStub(); return o; }
if (objecttype=="obj3") { RR_SHARED_PTR<obj3_stub> o=(RR_MAKE_SHARED<obj3_stub>(path,context)); o->RRInitStub(); return o; }
if (objecttype=="obj4") { RR_SHARED_PTR<obj4_stub> o=(RR_MAKE_SHARED<obj4_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> com__robotraconteur__testing__TestService3Factory::CreateSkel(const std::string& type, const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "com.robotraconteur.testing.TestService3") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="testroot3") {RR_SHARED_PTR<testroot3_skel> o=RR_MAKE_SHARED<testroot3_skel>(); o->Init(path,obj,context); return o; }
if (objecttype=="obj1") {RR_SHARED_PTR<obj1_skel> o=RR_MAKE_SHARED<obj1_skel>(); o->Init(path,obj,context); return o; }
if (objecttype=="obj2") {RR_SHARED_PTR<obj2_skel> o=RR_MAKE_SHARED<obj2_skel>(); o->Init(path,obj,context); return o; }
if (objecttype=="obj3") {RR_SHARED_PTR<obj3_skel> o=RR_MAKE_SHARED<obj3_skel>(); o->Init(path,obj,context); return o; }
if (objecttype=="obj4") {RR_SHARED_PTR<obj4_skel> o=RR_MAKE_SHARED<obj4_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void com__robotraconteur__testing__TestService3Factory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "com.robotraconteur.testing.TestService3") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> com__robotraconteur__testing__TestService3Factory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "com.robotraconteur.testing.TestService3") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> teststruct3_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRValue> s)
{
RR_SHARED_PTR<teststruct3 > s2=RobotRaconteur::rr_cast<teststruct3 >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RobotRaconteur::MessageElement_PackCStructureToArrayElement("s1",s2->s1));
vret.push_back(RobotRaconteur::MessageElement_PackCStructureArrayElement("s2",s2->s2));
vret.push_back(RobotRaconteur::MessageElement_PackCStructureArrayElement("s3",RobotRaconteur::VerifyRRArrayLength(s2->s3, 11, false)));
vret.push_back(RobotRaconteur::MessageElement_PackCStructureArrayElement("s4",RobotRaconteur::VerifyRRArrayLength(s2->s4, 16, true)));
vret.push_back(RobotRaconteur::MessageElement_PackCStructureMultiDimArrayElement("s5",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(s2->s5,9,boost::assign::list_of(3)(3))));
vret.push_back(RobotRaconteur::MessageElement_PackCStructureMultiDimArrayElement("s6",s2->s6));
vret.push_back(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRCStructureArray<testcstruct1>  >(RRGetNodeWeak(),"s7",s2->s7));
vret.push_back(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRCStructureArray<testcstruct1>  >(RRGetNodeWeak(),"s8",s2->s8));
vret.push_back(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRCStructureMultiDimArray<testcstruct1>  >(RRGetNodeWeak(),"s9",s2->s9));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s10",s2->s10));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s11",s2->s11));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s12",s2->s12));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s13",s2->s13));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s14",s2->s14));
vret.push_back(RobotRaconteur::MessageElement_PackVarTypeElement(RRGetNodeWeak(),"s15",s2->s15));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("com.robotraconteur.testing.TestService3.teststruct3",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> teststruct3_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> >& i = m->Elements;
RR_SHARED_PTR<teststruct3 > ret=RR_MAKE_SHARED<teststruct3 >();
ret->s1=RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s1"));
ret->s2=RobotRaconteur::MessageElement_UnpackCStructureArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s2"));
ret->s3=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackCStructureArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s3")), 11, false);
ret->s4=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackCStructureArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s4")), 16, true);
ret->s5=RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackCStructureMultiDimArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s5")),9,boost::assign::list_of(3)(3));
ret->s6=RobotRaconteur::MessageElement_UnpackCStructureMultiDimArray<testcstruct1>(RobotRaconteur::MessageElement::FindElement(i,"s6"));
ret->s7=RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRCStructureArray<testcstruct1>  >(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s7"));
ret->s8=RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRCStructureArray<testcstruct1>  >(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s8"));
ret->s9=RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRCStructureMultiDimArray<testcstruct1>  >(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s9"));
ret->s10=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s10"));
ret->s11=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s11"));
ret->s12=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s12"));
ret->s13=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s13"));
ret->s14=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s14"));
ret->s15=RobotRaconteur::MessageElement_UnpackVarValue(RRGetNodeWeak(),RobotRaconteur::MessageElement::FindElement(i,"s15"));
return ret;
}

static void testroot3_stub_rrverify_p1(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 3, false);
}
static void testroot3_stub_rrverify_p2(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 3, true);
}
static void testroot3_stub_rrverify_p3(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::rr_cast<RobotRaconteur::RRMultiDimArray<int32_t >  >(value),4,boost::assign::list_of(2)(2));
}
static void testroot3_stub_rrverify_w1(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 6, false);
}
static void testroot3_stub_rrverify_w2(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 6, true);
}
static void testroot3_stub_rrverify_w3(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::rr_cast<RobotRaconteur::RRMultiDimArray<int32_t >  >(value),6,boost::assign::list_of(3)(2));
}
testroot3_stub::testroot3_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void testroot3_stub::RRInitStub()
{
rrvar_unreliable1=RR_MAKE_SHARED<RobotRaconteur::PipeClient<int32_t > >("unreliable1",shared_from_this(), true,RobotRaconteur::MemberDefinition_Direction_readonly) ;
rrvar_unreliable2=RR_MAKE_SHARED<RobotRaconteur::PipeClient<int32_t > >("unreliable2",shared_from_this(), true,RobotRaconteur::MemberDefinition_Direction_both) ;
rrvar_p1=RR_MAKE_SHARED<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("p1",shared_from_this(), false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_p1) ;
rrvar_p2=RR_MAKE_SHARED<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("p2",shared_from_this(), false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_p2) ;
rrvar_p3=RR_MAKE_SHARED<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > >("p3",shared_from_this(), false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_p3) ;
rrvar_peekwire=RR_MAKE_SHARED<RobotRaconteur::WireClient<int32_t > >("peekwire",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_readonly);
rrvar_pokewire=RR_MAKE_SHARED<RobotRaconteur::WireClient<int32_t > >("pokewire",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_writeonly);
rrvar_w1=RR_MAKE_SHARED<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("w1",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_w1); 
rrvar_w2=RR_MAKE_SHARED<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("w2",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_w2); 
rrvar_w3=RR_MAKE_SHARED<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > >("w3",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_stub_rrverify_w3); 
rrvar_readmem=RR_MAKE_SHARED<RobotRaconteur::ArrayMemoryClient<double > >("readmem",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_readonly);
rrvar_cstruct_m1=RR_MAKE_SHARED<RobotRaconteur::CStructureArrayMemoryClient<testcstruct2 > >("cstruct_m1",shared_from_this(),115,RobotRaconteur::MemberDefinition_Direction_both);
rrvar_cstruct_m2=RR_MAKE_SHARED<RobotRaconteur::CStructureMultiDimArrayMemoryClient<testcstruct2 > >("cstruct_m2",shared_from_this(),115,RobotRaconteur::MemberDefinition_Direction_both);
}

int32_t testroot3_stub::get_readme()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"readme");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
void testroot3_stub::set_writeme(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"writeme");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

int32_t testroot3_stub::get_unknown_modifier()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"unknown_modifier");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
void testroot3_stub::set_unknown_modifier(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"unknown_modifier");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

testenum1::testenum1 testroot3_stub::get_testenum1_prop()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"testenum1_prop");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackEnum<testenum1::testenum1>(me);
}
void testroot3_stub::set_testenum1_prop(testenum1::testenum1 value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"testenum1_prop");
req->AddElement(RobotRaconteur::MessageElement_PackEnumElement("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

testcstruct1 testroot3_stub::get_testcstruct1_prop()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"testcstruct1_prop");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(me);
}
void testroot3_stub::set_testcstruct1_prop(const testcstruct1& value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"testcstruct1_prop");
req->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<teststruct3 > testroot3_stub::get_teststruct3_prop()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"teststruct3_prop");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackStructure<teststruct3 >(RRGetNodeWeak(), me);
}
void testroot3_stub::set_teststruct3_prop(RR_SHARED_PTR<teststruct3 > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"teststruct3_prop");
req->AddElement(RobotRaconteur::MessageElement_PackStructElement(RRGetNodeWeak(),"value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > testroot3_stub::get_d1()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, false);
}
void testroot3_stub::set_d1(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > testroot3_stub::get_d2()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d2");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, true);
}
void testroot3_stub::set_d2(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d2");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > testroot3_stub::get_d3()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d3");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, false);
}
void testroot3_stub::set_d3(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d3");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > testroot3_stub::get_d4()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d4");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, true);
}
void testroot3_stub::set_d4(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d4");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > testroot3_stub::get_d5()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d5");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),me),9,boost::assign::list_of(3)(3));
}
void testroot3_stub::set_d5(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d5");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > testroot3_stub::get_d6()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d6");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),me),9,boost::assign::list_of(3)(3));
}
void testroot3_stub::set_d6(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d6");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

void testroot3_stub::testcstruct1_func1(const testcstruct1& s)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"testcstruct1_func1");
rr_req->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("s",s));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
}

testcstruct1 testroot3_stub::testcstruct1_func2()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"testcstruct1_func2");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(rr_me);
}

RR_SHARED_PTR<RobotRaconteur::Generator<double,void > > testroot3_stub::gen_func1()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func1");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
return RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<double,void > >("gen_func1", RobotRaconteur::RRArrayToScalar(rr_ret->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >()),shared_from_this());
}

RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > > testroot3_stub::gen_func2(const std::string& name)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func2");
rr_req->AddElement(RobotRaconteur::MessageElement_PackStringElement("name",name));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
return RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >("gen_func2", RobotRaconteur::RRArrayToScalar(rr_ret->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >()),shared_from_this());
}

RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > testroot3_stub::gen_func3(const std::string& name)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func3");
rr_req->AddElement(RobotRaconteur::MessageElement_PackStringElement("name",name));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
return RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >("gen_func3", RobotRaconteur::RRArrayToScalar(rr_ret->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >()),shared_from_this());
}

RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > testroot3_stub::gen_func4()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func4");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
return RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >("gen_func4", RobotRaconteur::RRArrayToScalar(rr_ret->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >()),shared_from_this());
}

RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > > testroot3_stub::gen_func5()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func5");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessRequest(rr_req);
return RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >("gen_func5", RobotRaconteur::RRArrayToScalar(rr_ret->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >()),shared_from_this());
}

RR_SHARED_PTR<obj4 > testroot3_stub::get_o4()
{
return RobotRaconteur::rr_cast<obj4 >(FindObjRefTyped("o4","com.robotraconteur.testing.TestService3.obj4"));
}

RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > testroot3_stub::get_unreliable1()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<int32_t > > value=rrvar_unreliable1;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_unreliable1(RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > testroot3_stub::get_unreliable2()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<int32_t > > value=rrvar_unreliable2;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_unreliable2(RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_stub::get_p1()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value=rrvar_p1;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_p1(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_stub::get_p2()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value=rrvar_p2;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_p2(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > testroot3_stub::get_p3()
{
RR_SHARED_PTR<RobotRaconteur::PipeClient<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value=rrvar_p3;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_p3(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > testroot3_stub::get_peekwire()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<int32_t > > value=rrvar_peekwire;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_peekwire(RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > testroot3_stub::get_pokewire()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<int32_t > > value=rrvar_pokewire;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_pokewire(RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_stub::get_w1()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value=rrvar_w1;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_w1(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_stub::get_w2()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value=rrvar_w2;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_w2(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > testroot3_stub::get_w3()
{
RR_SHARED_PTR<RobotRaconteur::WireClient<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value=rrvar_w3;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::set_w3(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value)
{
throw RobotRaconteur::InvalidOperationException("Not valid for client");
}

RR_SHARED_PTR<RobotRaconteur::ArrayMemory<double > > testroot3_stub::get_readmem()
{
RR_SHARED_PTR<RobotRaconteur::ArrayMemoryClient<double > > value=rrvar_readmem;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
RR_SHARED_PTR<RobotRaconteur::CStructureArrayMemory<testcstruct2 > > testroot3_stub::get_cstruct_m1()
{
RR_SHARED_PTR<RobotRaconteur::CStructureArrayMemoryClient<testcstruct2 > > value=rrvar_cstruct_m1;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
RR_SHARED_PTR<RobotRaconteur::CStructureMultiDimArrayMemory<testcstruct2 > > testroot3_stub::get_cstruct_m2()
{
RR_SHARED_PTR<RobotRaconteur::CStructureMultiDimArrayMemoryClient<testcstruct2 > > value=rrvar_cstruct_m2;
if (!value) throw RobotRaconteur::InvalidOperationException("Stub has been closed");
return value;
}
void testroot3_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void testroot3_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
if (m->MemberName=="unreliable1")
{
rrvar_unreliable1->PipePacketReceived(m);
return;
}
if (m->MemberName=="unreliable2")
{
rrvar_unreliable2->PipePacketReceived(m);
return;
}
if (m->MemberName=="p1")
{
rrvar_p1->PipePacketReceived(m);
return;
}
if (m->MemberName=="p2")
{
rrvar_p2->PipePacketReceived(m);
return;
}
if (m->MemberName=="p3")
{
rrvar_p3->PipePacketReceived(m);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void testroot3_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
if (m->MemberName=="peekwire")
{
rrvar_peekwire->WirePacketReceived(m);
return;
}
if (m->MemberName=="pokewire")
{
rrvar_pokewire->WirePacketReceived(m);
return;
}
if (m->MemberName=="w1")
{
rrvar_w1->WirePacketReceived(m);
return;
}
if (m->MemberName=="w2")
{
rrvar_w2->WirePacketReceived(m);
return;
}
if (m->MemberName=="w3")
{
rrvar_w3->WirePacketReceived(m);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>testroot3_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string testroot3_stub::RRType()
{
return "com.robotraconteur.testing.TestService3.testroot3";
}
void testroot3_stub::RRClose()
{
rrvar_unreliable1->Shutdown();
rrvar_unreliable2->Shutdown();
rrvar_p1->Shutdown();
rrvar_p2->Shutdown();
rrvar_p3->Shutdown();
rrvar_peekwire->Shutdown();
rrvar_pokewire->Shutdown();
rrvar_w1->Shutdown();
rrvar_w2->Shutdown();
rrvar_w3->Shutdown();
if (rrvar_readmem)
{
rrvar_readmem->Shutdown();
}
if (rrvar_cstruct_m1)
{
rrvar_cstruct_m1->Shutdown();
}
if (rrvar_cstruct_m2)
{
rrvar_cstruct_m2->Shutdown();
}
ServiceStub::RRClose();
}

RR_SHARED_PTR<RobotRaconteur::PipeClientBase> testroot3_stub::RRGetPipeClient(const std::string& membername)
{
if (membername =="unreliable1") return rrvar_unreliable1;
if (membername =="unreliable2") return rrvar_unreliable2;
if (membername =="p1") return rrvar_p1;
if (membername =="p2") return rrvar_p2;
if (membername =="p3") return rrvar_p3;
return ServiceStub::RRGetPipeClient(membername);
}

RR_SHARED_PTR<RobotRaconteur::WireClientBase> testroot3_stub::RRGetWireClient(const std::string& membername)
{
if (membername =="peekwire") return rrvar_peekwire;
if (membername =="pokewire") return rrvar_pokewire;
if (membername =="w1") return rrvar_w1;
if (membername =="w2") return rrvar_w2;
if (membername =="w3") return rrvar_w3;
return ServiceStub::RRGetWireClient(membername);
}

void testroot3_stub::async_get_readme(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"readme");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_readme, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_readme(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_writeme(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"writeme");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_writeme, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_writeme(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_unknown_modifier(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"unknown_modifier");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_unknown_modifier, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_unknown_modifier(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_unknown_modifier(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"unknown_modifier");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_unknown_modifier, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_unknown_modifier(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_testenum1_prop(boost::function<void (testenum1::testenum1,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"testenum1_prop");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_testenum1_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_testenum1_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (testenum1::testenum1 ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(testenum1::testenum1(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(testenum1::testenum1(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
testenum1::testenum1 rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackEnum<testenum1::testenum1>(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_testenum1_prop(testenum1::testenum1 value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"testenum1_prop");
req->AddElement(RobotRaconteur::MessageElement_PackEnumElement("value",value));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_testenum1_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_testenum1_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_testcstruct1_prop(boost::function<void (const testcstruct1&,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"testcstruct1_prop");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_testcstruct1_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_testcstruct1_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (const testcstruct1& ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(testcstruct1(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(testcstruct1(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
testcstruct1 rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_testcstruct1_prop(const testcstruct1& value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"testcstruct1_prop");
req->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("value",value));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_testcstruct1_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_testcstruct1_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_teststruct3_prop(boost::function<void (RR_SHARED_PTR<teststruct3 >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"teststruct3_prop");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_teststruct3_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_teststruct3_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<teststruct3 > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<teststruct3 >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<teststruct3 >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<teststruct3 > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackStructure<teststruct3 >(RRGetNodeWeak(), me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_teststruct3_prop(RR_SHARED_PTR<teststruct3 > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"teststruct3_prop");
req->AddElement(RobotRaconteur::MessageElement_PackStructElement(RRGetNodeWeak(),"value",value));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_teststruct3_prop, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_teststruct3_prop(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d1(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d1, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, false);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d1(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d1, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d2(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d2");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d2, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d2(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, true);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d2(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d2");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d2, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d2(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d3(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d3");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d3, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d3(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, false);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d3(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d3");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d3, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d3(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d4(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d4");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d4, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d4(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),me), 6, true);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d4(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d4");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d4, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d4(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d5(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d5");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d5, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d5(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),me),9,boost::assign::list_of(3)(3));
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d5(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d5");
req->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d5, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d5(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_d6(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d6");
AsyncProcessRequest(m,boost::bind(&testroot3_stub::rrend_get_d6, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_get_d6(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),me),9,boost::assign::list_of(3)(3));
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_set_d6(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d6");
req->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
AsyncProcessRequest(req,boost::bind(&testroot3_stub::rrend_set_d6, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void testroot3_stub::rrend_set_d6(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_testcstruct1_func1(const testcstruct1& s,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"testcstruct1_func1");
rr_req->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("s",s));
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_testcstruct1_func1, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_testcstruct1_func1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_testcstruct1_func2(boost::function<void (const testcstruct1&, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"testcstruct1_func2");
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_testcstruct1_func2, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_testcstruct1_func2(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (const testcstruct1& ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(testcstruct1(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(testcstruct1(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
testcstruct1 rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_gen_func1(boost::function<void (RR_SHARED_PTR<RobotRaconteur::Generator<double,void > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func1");
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_gen_func1, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_gen_func1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::Generator<double,void > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<double,void > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<double,void > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t index;
try
{
index=RobotRaconteur::RRArrayToScalar(m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >());
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<double,void > >("gen_func1", index, shared_from_this()), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_gen_func2(const std::string& name,boost::function<void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func2");
rr_req->AddElement(RobotRaconteur::MessageElement_PackStringElement("name",name));
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_gen_func2, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_gen_func2(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t index;
try
{
index=RobotRaconteur::RRArrayToScalar(m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >());
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >("gen_func2", index, shared_from_this()), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_gen_func3(const std::string& name,boost::function<void (RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func3");
rr_req->AddElement(RobotRaconteur::MessageElement_PackStringElement("name",name));
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_gen_func3, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_gen_func3(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t index;
try
{
index=RobotRaconteur::RRArrayToScalar(m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >());
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >("gen_func3", index, shared_from_this()), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_gen_func4(boost::function<void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func4");
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_gen_func4, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_gen_func4(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t index;
try
{
index=RobotRaconteur::RRArrayToScalar(m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >());
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >("gen_func4", index, shared_from_this()), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_gen_func5(boost::function<void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"gen_func5");
AsyncProcessRequest(rr_req,boost::bind(&testroot3_stub::rrend_gen_func5, RobotRaconteur::rr_cast<testroot3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void testroot3_stub::rrend_gen_func5(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t index;
try
{
index=RobotRaconteur::RRArrayToScalar(m->FindElement("index")->CastData<RobotRaconteur::RRArray<int32_t> >());
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(RR_MAKE_SHARED<RobotRaconteur::GeneratorClient<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >("gen_func5", index, shared_from_this()), RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void testroot3_stub::async_get_o4(boost::function<void(RR_SHARED_PTR<obj4>,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>)> handler, int32_t timeout)
{
AsyncFindObjRefTyped("o4", "com.robotraconteur.testing.TestService3.obj4", boost::bind(&RobotRaconteur::ServiceStub::EndAsyncFindObjRef<obj4 >,_1,_2,handler) ,timeout);
}

obj1_stub::obj1_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void obj1_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj1_stub::get_d1()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
void obj1_stub::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

void obj1_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj1_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj1_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>obj1_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string obj1_stub::RRType()
{
return "com.robotraconteur.testing.TestService3.obj1";
}
void obj1_stub::RRClose()
{
ServiceStub::RRClose();
}

RR_SHARED_PTR<RobotRaconteur::PipeClientBase> obj1_stub::RRGetPipeClient(const std::string& membername)
{
return ServiceStub::RRGetPipeClient(membername);
}

RR_SHARED_PTR<RobotRaconteur::WireClientBase> obj1_stub::RRGetWireClient(const std::string& membername)
{
return ServiceStub::RRGetWireClient(membername);
}

void obj1_stub::async_get_d1(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
AsyncProcessRequest(m,boost::bind(&obj1_stub::rrend_get_d1, RobotRaconteur::rr_cast<obj1_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj1_stub::rrend_get_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj1_stub::async_set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
AsyncProcessRequest(req,boost::bind(&obj1_stub::rrend_set_d1, RobotRaconteur::rr_cast<obj1_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj1_stub::rrend_set_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
obj2_stub::obj2_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void obj2_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj2_stub::get_d1()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
void obj2_stub::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

void obj2_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj2_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj2_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>obj2_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string obj2_stub::RRType()
{
return "com.robotraconteur.testing.TestService3.obj2";
}
void obj2_stub::RRClose()
{
ServiceStub::RRClose();
}

RR_SHARED_PTR<RobotRaconteur::PipeClientBase> obj2_stub::RRGetPipeClient(const std::string& membername)
{
return ServiceStub::RRGetPipeClient(membername);
}

RR_SHARED_PTR<RobotRaconteur::WireClientBase> obj2_stub::RRGetWireClient(const std::string& membername)
{
return ServiceStub::RRGetWireClient(membername);
}

void obj2_stub::async_get_d1(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
AsyncProcessRequest(m,boost::bind(&obj2_stub::rrend_get_d1, RobotRaconteur::rr_cast<obj2_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj2_stub::rrend_get_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj2_stub::async_set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
AsyncProcessRequest(req,boost::bind(&obj2_stub::rrend_set_d1, RobotRaconteur::rr_cast<obj2_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj2_stub::rrend_set_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
obj3_stub::obj3_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void obj3_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj3_stub::get_d1()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
void obj3_stub::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

void obj3_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj3_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj3_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>obj3_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string obj3_stub::RRType()
{
return "com.robotraconteur.testing.TestService3.obj3";
}
void obj3_stub::RRClose()
{
ServiceStub::RRClose();
}

RR_SHARED_PTR<RobotRaconteur::PipeClientBase> obj3_stub::RRGetPipeClient(const std::string& membername)
{
return ServiceStub::RRGetPipeClient(membername);
}

RR_SHARED_PTR<RobotRaconteur::WireClientBase> obj3_stub::RRGetWireClient(const std::string& membername)
{
return ServiceStub::RRGetWireClient(membername);
}

void obj3_stub::async_get_d1(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"d1");
AsyncProcessRequest(m,boost::bind(&obj3_stub::rrend_get_d1, RobotRaconteur::rr_cast<obj3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj3_stub::rrend_get_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackArray<double >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj3_stub::async_set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"d1");
req->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
AsyncProcessRequest(req,boost::bind(&obj3_stub::rrend_set_d1, RobotRaconteur::rr_cast<obj3_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj3_stub::rrend_set_d1(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
obj4_stub::obj4_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void obj4_stub::RRInitStub()
{
}

std::string obj4_stub::get_s_ind()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"s_ind");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackString(me);
}
void obj4_stub::set_s_ind(const std::string& value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"s_ind");
req->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

int32_t obj4_stub::get_i_ind()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"i_ind");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
void obj4_stub::set_i_ind(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"i_ind");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

std::string obj4_stub::get_data()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"data");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::MessageElement_UnpackString(me);
}
void obj4_stub::set_data(const std::string& value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"data");
req->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessRequest(req);
}

RR_SHARED_PTR<com::robotraconteur::testing::TestService1::sub3 > obj4_stub::get_o3_1(const std::string& ind)
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService1::sub3 >(FindObjRefTyped("o3_1", ind,"com.robotraconteur.testing.TestService1.sub3"));
}

void obj4_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj4_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj4_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>obj4_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->RequestID=rr_m->RequestID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string obj4_stub::RRType()
{
return "com.robotraconteur.testing.TestService3.obj4";
}
void obj4_stub::RRClose()
{
ServiceStub::RRClose();
}

RR_SHARED_PTR<RobotRaconteur::PipeClientBase> obj4_stub::RRGetPipeClient(const std::string& membername)
{
return ServiceStub::RRGetPipeClient(membername);
}

RR_SHARED_PTR<RobotRaconteur::WireClientBase> obj4_stub::RRGetWireClient(const std::string& membername)
{
return ServiceStub::RRGetWireClient(membername);
}

void obj4_stub::async_get_s_ind(boost::function<void (const std::string&,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"s_ind");
AsyncProcessRequest(m,boost::bind(&obj4_stub::rrend_get_s_ind, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_get_s_ind(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (const std::string& ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler("",err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler("",RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
std::string rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackString(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_set_s_ind(const std::string& value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"s_ind");
req->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
AsyncProcessRequest(req,boost::bind(&obj4_stub::rrend_set_s_ind, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_set_s_ind(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_get_i_ind(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"i_ind");
AsyncProcessRequest(m,boost::bind(&obj4_stub::rrend_get_i_ind, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_get_i_ind(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_set_i_ind(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"i_ind");
req->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
AsyncProcessRequest(req,boost::bind(&obj4_stub::rrend_set_i_ind, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_set_i_ind(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_get_data(boost::function<void (const std::string&,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"data");
AsyncProcessRequest(m,boost::bind(&obj4_stub::rrend_get_data, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_get_data(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (const std::string& ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler("",err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler("",RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
std::string rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::MessageElement_UnpackString(me);
}
catch (std::exception& err2)
{
RobotRaconteur::detail::InvokeHandlerWithException(node, handler, err2, RobotRaconteur::MessageErrorType_DataTypeError);
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_set_data(const std::string& value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"data");
req->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
AsyncProcessRequest(req,boost::bind(&obj4_stub::rrend_set_data, RobotRaconteur::rr_cast<obj4_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void obj4_stub::rrend_set_data(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void obj4_stub::async_get_o3_1(const std::string& ind, boost::function<void(RR_SHARED_PTR<com::robotraconteur::testing::TestService1::sub3>,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>)> handler, int32_t timeout)
{
AsyncFindObjRefTyped("o3_1", ind, "com.robotraconteur.testing.TestService1.sub3", boost::bind(&RobotRaconteur::ServiceStub::EndAsyncFindObjRef<com::robotraconteur::testing::TestService1::sub3 >,_1,_2,handler) ,timeout);
}


void testroot3_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
rr_readmem_mem.reset();
rr_cstruct_m1_mem.reset();
rr_cstruct_m2_mem.reset();
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3 > testroot3_skel::get_obj()
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3 >(uncastobj);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_testroot3 > testroot3_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<com::robotraconteur::testing::TestService3::async_testroot3 >(uncastobj);
}
void testroot3_skel::ReleaseCastObject() 
{
rr_unreliable1_pipe->Shutdown();
rr_unreliable2_pipe->Shutdown();
rr_p1_pipe->Shutdown();
rr_p2_pipe->Shutdown();
rr_p3_pipe->Shutdown();
rr_peekwire_wire->Shutdown();
rr_pokewire_wire->Shutdown();
rr_w1_wire->Shutdown();
rr_w2_wire->Shutdown();
rr_w3_wire->Shutdown();
}
std::string testroot3_skel::GetObjectType()
{
return "com.robotraconteur.testing.TestService3.testroot3";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_testroot3 > async_obj=get_asyncobj();
if (m->MemberName == "readme")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_readme(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_readme,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_readme();
mr->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
return mr;
}
}
if (m->MemberName == "writeme")
{
throw RobotRaconteur::WriteOnlyMemberException("Write only property");
}
if (m->MemberName == "unknown_modifier")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_unknown_modifier(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_unknown_modifier,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_unknown_modifier();
mr->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
return mr;
}
}
if (m->MemberName == "testenum1_prop")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_testenum1_prop(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_testenum1_prop,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
testenum1::testenum1 value=get_obj()->get_testenum1_prop();
mr->AddElement(RobotRaconteur::MessageElement_PackEnumElement("value",value));
return mr;
}
}
if (m->MemberName == "testcstruct1_prop")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_testcstruct1_prop(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_testcstruct1_prop,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
testcstruct1 value=get_obj()->get_testcstruct1_prop();
mr->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("value",value));
return mr;
}
}
if (m->MemberName == "teststruct3_prop")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_teststruct3_prop(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_teststruct3_prop,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<teststruct3 > value=get_obj()->get_teststruct3_prop();
mr->AddElement(RobotRaconteur::MessageElement_PackStructElement(RRGetNodeWeak(),"value",value));
return mr;
}
}
if (m->MemberName == "d1")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d1(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d1,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value=get_obj()->get_d1();
mr->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
return mr;
}
}
if (m->MemberName == "d2")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d2(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d2,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value=get_obj()->get_d2();
mr->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
return mr;
}
}
if (m->MemberName == "d3")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d3(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d3,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value=get_obj()->get_d3();
mr->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false)));
return mr;
}
}
if (m->MemberName == "d4")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d4(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d4,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value=get_obj()->get_d4();
mr->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true)));
return mr;
}
}
if (m->MemberName == "d5")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d5(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d5,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value=get_obj()->get_d5();
mr->AddElement(RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
return mr;
}
}
if (m->MemberName == "d6")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_get_d6(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_get_d6,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value=get_obj()->get_d6();
mr->AddElement(RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_testroot3 > async_obj=get_asyncobj();
if (m->MemberName == "readme")
{
throw RobotRaconteur::ReadOnlyMemberException("Read only property");
}
if (m->MemberName == "writeme")
{
int32_t value=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_writeme(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_writeme(value);
return mr;
}
}
if (m->MemberName == "unknown_modifier")
{
int32_t value=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_unknown_modifier(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_unknown_modifier(value);
return mr;
}
}
if (m->MemberName == "testenum1_prop")
{
testenum1::testenum1 value=RobotRaconteur::MessageElement_UnpackEnum<testenum1::testenum1>(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_testenum1_prop(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_testenum1_prop(value);
return mr;
}
}
if (m->MemberName == "testcstruct1_prop")
{
testcstruct1 value=RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_testcstruct1_prop(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_testcstruct1_prop(value);
return mr;
}
}
if (m->MemberName == "teststruct3_prop")
{
RR_SHARED_PTR<teststruct3 > value=RobotRaconteur::MessageElement_UnpackStructure<teststruct3 >(RRGetNodeWeak(), m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_teststruct3_prop(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_teststruct3_prop(value);
return mr;
}
}
if (m->MemberName == "d1")
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),m->FindElement("value")), 6, false);
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d1(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d1(value);
return mr;
}
}
if (m->MemberName == "d2")
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),m->FindElement("value")), 6, true);
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d2(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d2(value);
return mr;
}
}
if (m->MemberName == "d3")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),m->FindElement("value")), 6, false);
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d3(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d3(value);
return mr;
}
}
if (m->MemberName == "d4")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value=RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRArray<double >  >(RRGetNodeWeak(),m->FindElement("value")), 6, true);
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d4(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d4(value);
return mr;
}
}
if (m->MemberName == "d5")
{
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value=RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackList<RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),m->FindElement("value")),9,boost::assign::list_of(3)(3));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d5(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d5(value);
return mr;
}
}
if (m->MemberName == "d6")
{
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value=RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::MessageElement_UnpackMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(RRGetNodeWeak(),m->FindElement("value")),9,boost::assign::list_of(3)(3));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_set_d6(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d6(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void testroot3_skel::rr_get_readme(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_unknown_modifier(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_testenum1_prop(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,testenum1::testenum1 value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackEnumElement("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_testcstruct1_prop(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,testcstruct1 value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackCStructureToArrayElement("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_teststruct3_prop(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<teststruct3 > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackStructElement(skel1->RRGetNodeWeak(),"value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d2(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d3(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, false));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d4(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRArrayLength(value, 6, true));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d5(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackListElement<RobotRaconteur::RRMultiDimArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3)));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void testroot3_skel::rr_get_d6(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackMapElement<int32_t,RobotRaconteur::RRMultiDimArray<double >  >(skel1->RRGetNodeWeak(),"value",RobotRaconteur::VerifyRRMultiDimArrayLength<2>(value,9,boost::assign::list_of(3)(3)));
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_testroot3 > async_obj=get_asyncobj();
if (rr_m->MemberName == "testcstruct1_func1")
{
testcstruct1 s =RobotRaconteur::MessageElement_UnpackCStructureFromArray<testcstruct1>(rr_m->FindElement("s"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> rr_wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_testcstruct1_func1(s, boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_testcstruct1_func1,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->testcstruct1_func1(s);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "testcstruct1_func2")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> rr_wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3_skel>(shared_from_this());
async_obj->async_testcstruct1_func2(boost::bind(&com::robotraconteur::testing::TestService3::testroot3_skel::rr_testcstruct1_func2, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
testcstruct1 rr_return=get_obj()->testcstruct1_func2();
rr_mr->AddElement(RobotRaconteur::MessageElement_PackCStructureToArrayElement("return",rr_return));
return rr_mr;
}
}
if (rr_m->MemberName == "gen_func1")
{
{
RR_SHARED_PTR<RobotRaconteur::Generator<double,void > > rr_return=get_obj()->gen_func1();
int32_t rr_index;
{
boost::mutex::scoped_lock lock(generators_lock);
rr_index = get_new_generator_index();
generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<double,void > >(rr_return, "gen_func1",rr_index, shared_from_this(), RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
rr_mr->AddElement("index", RobotRaconteur::ScalarToRRArray(rr_index));
return rr_mr;
}
}
if (rr_m->MemberName == "gen_func2")
{
std::string name =RobotRaconteur::MessageElement_UnpackString(rr_m->FindElement("name"));
{
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > > rr_return=get_obj()->gen_func2(name);
int32_t rr_index;
{
boost::mutex::scoped_lock lock(generators_lock);
rr_index = get_new_generator_index();
generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >(rr_return, "gen_func2",rr_index, shared_from_this(), RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
rr_mr->AddElement("index", RobotRaconteur::ScalarToRRArray(rr_index));
return rr_mr;
}
}
if (rr_m->MemberName == "gen_func3")
{
std::string name =RobotRaconteur::MessageElement_UnpackString(rr_m->FindElement("name"));
{
RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > rr_return=get_obj()->gen_func3(name);
int32_t rr_index;
{
boost::mutex::scoped_lock lock(generators_lock);
rr_index = get_new_generator_index();
generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(rr_return, "gen_func3",rr_index, shared_from_this(), RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
rr_mr->AddElement("index", RobotRaconteur::ScalarToRRArray(rr_index));
return rr_mr;
}
}
if (rr_m->MemberName == "gen_func4")
{
{
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > rr_return=get_obj()->gen_func4();
int32_t rr_index;
{
boost::mutex::scoped_lock lock(generators_lock);
rr_index = get_new_generator_index();
generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(rr_return, "gen_func4",rr_index, shared_from_this(), RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
rr_mr->AddElement("index", RobotRaconteur::ScalarToRRArray(rr_index));
return rr_mr;
}
}
if (rr_m->MemberName == "gen_func5")
{
{
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > > rr_return=get_obj()->gen_func5();
int32_t rr_index;
{
boost::mutex::scoped_lock lock(generators_lock);
rr_index = get_new_generator_index();
generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >(rr_return, "gen_func5",rr_index, shared_from_this(), RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
rr_mr->AddElement("index", RobotRaconteur::ScalarToRRArray(rr_index));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void testroot3_skel::rr_testcstruct1_func1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_testcstruct1_func2(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, testcstruct1 ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackCStructureToArrayElement("return",ret);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_gen_func1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::Generator<double,void > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
int32_t rr_index;
{
boost::mutex::scoped_lock lock(skel1->generators_lock);
rr_index = skel1->get_new_generator_index();
skel1->generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<double,void > >(ret, "gen_func1",rr_index, skel1, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
mr = RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::ScalarToRRArray(rr_index));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_gen_func2(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
int32_t rr_index;
{
boost::mutex::scoped_lock lock(skel1->generators_lock);
rr_index = skel1->get_new_generator_index();
skel1->generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > >(ret, "gen_func2",rr_index, skel1, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
mr = RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::ScalarToRRArray(rr_index));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_gen_func3(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
int32_t rr_index;
{
boost::mutex::scoped_lock lock(skel1->generators_lock);
rr_index = skel1->get_new_generator_index();
skel1->generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(ret, "gen_func3",rr_index, skel1, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
mr = RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::ScalarToRRArray(rr_index));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_gen_func4(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
int32_t rr_index;
{
boost::mutex::scoped_lock lock(skel1->generators_lock);
rr_index = skel1->get_new_generator_index();
skel1->generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > >(ret, "gen_func4",rr_index, skel1, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
mr = RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::ScalarToRRArray(rr_index));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::rr_gen_func5(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel, RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
int32_t rr_index;
{
boost::mutex::scoped_lock lock(skel1->generators_lock);
rr_index = skel1->get_new_generator_index();
skel1->generators.insert(std::make_pair(rr_index,RR_MAKE_SHARED<RobotRaconteur::GeneratorServer<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > >(ret, "gen_func5",rr_index, skel1, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint())));
}
mr = RR_MAKE_SHARED<RobotRaconteur::MessageElement>("index",RobotRaconteur::ScalarToRRArray(rr_index));
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallFunction(skel, mr, err, m,ep);
}
void testroot3_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3 >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void testroot3_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> testroot3_skel::GetSubObj(const std::string &name, const std::string &ind)
{
if (name=="o4")
{
return RobotRaconteur::rr_cast<RobotRaconteur::RRObject>(get_obj()->get_o4());
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

static void testroot3_skel_rrverify_p1(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 3, false);
}
static void testroot3_skel_rrverify_p2(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 3, true);
}
static void testroot3_skel_rrverify_p3(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::rr_cast<RobotRaconteur::RRMultiDimArray<int32_t >  >(value),4,boost::assign::list_of(2)(2));
}
void testroot3_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3 >(rrobj1);
rr_unreliable1_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<int32_t > >("unreliable1",shared_from_this(),true,RobotRaconteur::MemberDefinition_Direction_readonly);
rr_unreliable2_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<int32_t > >("unreliable2",shared_from_this(),true,RobotRaconteur::MemberDefinition_Direction_both);
rr_p1_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("p1",shared_from_this(),false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_p1);
rr_p2_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("p2",shared_from_this(),false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_p2);
rr_p3_pipe=RR_MAKE_SHARED<RobotRaconteur::PipeServer<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > >("p3",shared_from_this(),false,RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_p3);
obj->set_unreliable1(rr_unreliable1_pipe);
obj->set_unreliable2(rr_unreliable2_pipe);
obj->set_p1(rr_p1_pipe);
obj->set_p2(rr_p2_pipe);
obj->set_p3(rr_p3_pipe);
}

void testroot3_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="unreliable1")
{
rr_unreliable1_pipe->PipePacketReceived(m,e);
return;
}
if (m->MemberName=="unreliable2")
{
rr_unreliable2_pipe->PipePacketReceived(m,e);
return;
}
if (m->MemberName=="p1")
{
rr_p1_pipe->PipePacketReceived(m,e);
return;
}
if (m->MemberName=="p2")
{
rr_p2_pipe->PipePacketReceived(m,e);
return;
}
if (m->MemberName=="p3")
{
rr_p3_pipe->PipePacketReceived(m,e);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="unreliable1")
{
return rr_unreliable1_pipe->PipeCommand(m,e);
}
if (m->MemberName=="unreliable2")
{
return rr_unreliable2_pipe->PipeCommand(m,e);
}
if (m->MemberName=="p1")
{
return rr_p1_pipe->PipeCommand(m,e);
}
if (m->MemberName=="p2")
{
return rr_p2_pipe->PipeCommand(m,e);
}
if (m->MemberName=="p3")
{
return rr_p3_pipe->PipeCommand(m,e);
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

static void testroot3_skel_rrverify_w1(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 6, false);
}
static void testroot3_skel_rrverify_w2(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRArrayLength(RobotRaconteur::rr_cast<RobotRaconteur::RRArray<int32_t >  >(value), 6, true);
}
static void testroot3_skel_rrverify_w3(RR_SHARED_PTR<RobotRaconteur::RRValue>& value)
{
RobotRaconteur::VerifyRRMultiDimArrayLength<2>(RobotRaconteur::rr_cast<RobotRaconteur::RRMultiDimArray<int32_t >  >(value),6,boost::assign::list_of(3)(2));
}
void testroot3_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3 >(rrobj1);
rr_peekwire_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<int32_t > >("peekwire",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_readonly);
rr_pokewire_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<int32_t > >("pokewire",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_writeonly);
rr_w1_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("w1",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_w1);
rr_w2_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > >("w2",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_w2);
rr_w3_wire=RR_MAKE_SHARED<RobotRaconteur::WireServer<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > >("w3",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_both,&testroot3_skel_rrverify_w3);
obj->set_peekwire(rr_peekwire_wire);
obj->set_pokewire(rr_pokewire_wire);
obj->set_w1(rr_w1_wire);
obj->set_w2(rr_w2_wire);
obj->set_w3(rr_w3_wire);
}

void testroot3_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="peekwire")
{
rr_peekwire_wire->WirePacketReceived(m,e);
return;
}
if (m->MemberName=="pokewire")
{
rr_pokewire_wire->WirePacketReceived(m,e);
return;
}
if (m->MemberName=="w1")
{
rr_w1_wire->WirePacketReceived(m,e);
return;
}
if (m->MemberName=="w2")
{
rr_w2_wire->WirePacketReceived(m,e);
return;
}
if (m->MemberName=="w3")
{
rr_w3_wire->WirePacketReceived(m,e);
return;
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
if (m->MemberName=="peekwire")
{
return rr_peekwire_wire->WireCommand(m,e);
}
if (m->MemberName=="pokewire")
{
return rr_pokewire_wire->WireCommand(m,e);
}
if (m->MemberName=="w1")
{
return rr_w1_wire->WireCommand(m,e);
}
if (m->MemberName=="w2")
{
return rr_w2_wire->WireCommand(m,e);
}
if (m->MemberName=="w3")
{
return rr_w3_wire->WireCommand(m,e);
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void testroot3_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::testroot3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::testroot3 >(o);
}
RR_SHARED_PTR<void> testroot3_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> testroot3_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
if (m->MemberName=="readmem")
{
if (rr_readmem_mem==0) rr_readmem_mem=RR_MAKE_SHARED<RobotRaconteur::ArrayMemoryServiceSkel<double > >("readmem",shared_from_this(),RobotRaconteur::MemberDefinition_Direction_readonly);
return rr_readmem_mem->CallMemoryFunction(m,e,get_obj()->get_readmem());
}
if (m->MemberName=="cstruct_m1")
{
if (rr_cstruct_m1_mem==0) rr_cstruct_m1_mem=RR_MAKE_SHARED<RobotRaconteur::CStructureArrayMemoryServiceSkel<testcstruct2 > >("cstruct_m1",shared_from_this(),115,RobotRaconteur::MemberDefinition_Direction_both);
return rr_cstruct_m1_mem->CallMemoryFunction(m,e,get_obj()->get_cstruct_m1());
}
if (m->MemberName=="cstruct_m2")
{
if (rr_cstruct_m2_mem==0) rr_cstruct_m2_mem=RR_MAKE_SHARED<RobotRaconteur::CStructureMultiDimArrayMemoryServiceSkel<testcstruct2 > >("cstruct_m2",shared_from_this(),115,RobotRaconteur::MemberDefinition_Direction_both);
return rr_cstruct_m2_mem->CallMemoryFunction(m,e,get_obj()->get_cstruct_m2());
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj1_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1 > obj1_skel::get_obj()
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1 >(uncastobj);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj1 > obj1_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<com::robotraconteur::testing::TestService3::async_obj1 >(uncastobj);
}
void obj1_skel::ReleaseCastObject() 
{
}
std::string obj1_skel::GetObjectType()
{
return "com.robotraconteur.testing.TestService3.obj1";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj1 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj1_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1_skel>(shared_from_this());
async_obj->async_get_d1(boost::bind(&com::robotraconteur::testing::TestService3::obj1_skel::rr_get_d1,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=get_obj()->get_d1();
mr->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj1 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=RobotRaconteur::MessageElement_UnpackArray<double >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj1_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1_skel>(shared_from_this());
async_obj->async_set_d1(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d1(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj1_skel::rr_get_d1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj1_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackArrayElement<double >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj1 > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj1_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1 >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void obj1_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> obj1_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj1_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1 >(rrobj1);
}

void obj1_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj1_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1 >(rrobj1);
}

void obj1_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj1_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj1 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj1 >(o);
}
RR_SHARED_PTR<void> obj1_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj1_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj2_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2 > obj2_skel::get_obj()
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2 >(uncastobj);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj2 > obj2_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<com::robotraconteur::testing::TestService3::async_obj2 >(uncastobj);
}
void obj2_skel::ReleaseCastObject() 
{
}
std::string obj2_skel::GetObjectType()
{
return "com.robotraconteur.testing.TestService3.obj2";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj2 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj2_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2_skel>(shared_from_this());
async_obj->async_get_d1(boost::bind(&com::robotraconteur::testing::TestService3::obj2_skel::rr_get_d1,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=get_obj()->get_d1();
mr->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj2 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=RobotRaconteur::MessageElement_UnpackArray<double >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj2_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2_skel>(shared_from_this());
async_obj->async_set_d1(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d1(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj2_skel::rr_get_d1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj2_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackArrayElement<double >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj2 > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj2_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2 >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void obj2_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> obj2_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj2_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2 >(rrobj1);
}

void obj2_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj2_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2 >(rrobj1);
}

void obj2_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj2_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj2 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj2 >(o);
}
RR_SHARED_PTR<void> obj2_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj2_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj3_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3 > obj3_skel::get_obj()
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3 >(uncastobj);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj3 > obj3_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<com::robotraconteur::testing::TestService3::async_obj3 >(uncastobj);
}
void obj3_skel::ReleaseCastObject() 
{
}
std::string obj3_skel::GetObjectType()
{
return "com.robotraconteur.testing.TestService3.obj3";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj3 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3_skel>(shared_from_this());
async_obj->async_get_d1(boost::bind(&com::robotraconteur::testing::TestService3::obj3_skel::rr_get_d1,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=get_obj()->get_d1();
mr->AddElement(RobotRaconteur::MessageElement_PackArrayElement<double >("value",value));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj3 > async_obj=get_asyncobj();
if (m->MemberName == "d1")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=RobotRaconteur::MessageElement_UnpackArray<double >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj3_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3_skel>(shared_from_this());
async_obj->async_set_d1(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_d1(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj3_skel::rr_get_d1(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj3_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackArrayElement<double >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj3 > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj3_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3 >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void obj3_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> obj3_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj3_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3 >(rrobj1);
}

void obj3_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj3_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3 >(rrobj1);
}

void obj3_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj3_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj3 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj3 >(o);
}
RR_SHARED_PTR<void> obj3_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj3_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void obj4_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4 > obj4_skel::get_obj()
{
return RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4 >(uncastobj);
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj4 > obj4_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<com::robotraconteur::testing::TestService3::async_obj4 >(uncastobj);
}
void obj4_skel::ReleaseCastObject() 
{
}
std::string obj4_skel::GetObjectType()
{
return "com.robotraconteur.testing.TestService3.obj4";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj4 > async_obj=get_asyncobj();
if (m->MemberName == "s_ind")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_get_s_ind(boost::bind(&com::robotraconteur::testing::TestService3::obj4_skel::rr_get_s_ind,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
std::string value=get_obj()->get_s_ind();
mr->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
return mr;
}
}
if (m->MemberName == "i_ind")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_get_i_ind(boost::bind(&com::robotraconteur::testing::TestService3::obj4_skel::rr_get_i_ind,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_i_ind();
mr->AddElement(RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value));
return mr;
}
}
if (m->MemberName == "data")
{
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_get_data(boost::bind(&com::robotraconteur::testing::TestService3::obj4_skel::rr_get_data,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
std::string value=get_obj()->get_data();
mr->AddElement(RobotRaconteur::MessageElement_PackStringElement("value",value));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj4 > async_obj=get_asyncobj();
if (m->MemberName == "s_ind")
{
std::string value=RobotRaconteur::MessageElement_UnpackString(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_set_s_ind(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_s_ind(value);
return mr;
}
}
if (m->MemberName == "i_ind")
{
int32_t value=RobotRaconteur::MessageElement_UnpackScalar<int32_t >(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_set_i_ind(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_i_ind(value);
return mr;
}
}
if (m->MemberName == "data")
{
std::string value=RobotRaconteur::MessageElement_UnpackString(m->FindElement("value"));
if (async_obj)
{
RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> wp=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4_skel>(shared_from_this());
async_obj->async_set_data(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_data(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj4_skel::rr_get_s_ind(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel,std::string value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackStringElement("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void obj4_skel::rr_get_i_ind(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackScalarElement<int32_t >("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
void obj4_skel::rr_get_data(RR_WEAK_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel,std::string value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr;
try
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4_skel> skel1=skel.lock();
if (!skel1) throw RobotRaconteur::InvalidOperationException("skel release");
mr=RobotRaconteur::MessageElement_PackStringElement("value",value);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::ExceptionToSharedPtr(err2, RobotRaconteur::MessageErrorType_DataTypeError),m, ep);
return;
}
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::async_obj4 > async_obj=get_asyncobj();
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj4_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4 >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void obj4_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> obj4_skel::GetSubObj(const std::string &name, const std::string &ind)
{
if (name=="o3_1")
{
return RobotRaconteur::rr_cast<RobotRaconteur::RRObject>(get_obj()->get_o3_1(ind));
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj4_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4 >(rrobj1);
}

void obj4_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj4_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4 >(rrobj1);
}

void obj4_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void obj4_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<com::robotraconteur::testing::TestService3::obj4 > obj=RobotRaconteur::rr_cast<com::robotraconteur::testing::TestService3::obj4 >(o);
}
RR_SHARED_PTR<void> obj4_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> obj4_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

testroot3_default_impl::testroot3_default_impl()
{
rrvar_readme=0;
rrvar_writeme=0;
rrvar_unknown_modifier=0;
rrvar_testenum1_prop=testenum1::testenum1();
rrvar_testcstruct1_prop=testcstruct1();
rrvar_teststruct3_prop=RR_SHARED_PTR<teststruct3 >();
rrvar_d1=RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >();
rrvar_d2=RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > >();
rrvar_d3=RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >();
rrvar_d4=RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > >();
rrvar_d5=RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > >();
rrvar_d6=RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > >();
}
int32_t testroot3_default_impl::get_readme()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_readme;
}
void testroot3_default_impl::set_writeme(int32_t value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_writeme = value;
}
int32_t testroot3_default_impl::get_unknown_modifier()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_unknown_modifier;
}
void testroot3_default_impl::set_unknown_modifier(int32_t value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_unknown_modifier = value;
}
testenum1::testenum1 testroot3_default_impl::get_testenum1_prop()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_testenum1_prop;
}
void testroot3_default_impl::set_testenum1_prop(testenum1::testenum1 value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_testenum1_prop = value;
}
testcstruct1 testroot3_default_impl::get_testcstruct1_prop()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_testcstruct1_prop;
}
void testroot3_default_impl::set_testcstruct1_prop(const testcstruct1& value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_testcstruct1_prop = value;
}
RR_SHARED_PTR<teststruct3 > testroot3_default_impl::get_teststruct3_prop()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_teststruct3_prop;
}
void testroot3_default_impl::set_teststruct3_prop(RR_SHARED_PTR<teststruct3 > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_teststruct3_prop = value;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > testroot3_default_impl::get_d1()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d1;
}
void testroot3_default_impl::set_d1(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d1 = value;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > testroot3_default_impl::get_d2()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d2;
}
void testroot3_default_impl::set_d2(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d2 = value;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > testroot3_default_impl::get_d3()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d3;
}
void testroot3_default_impl::set_d3(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d3 = value;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > testroot3_default_impl::get_d4()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d4;
}
void testroot3_default_impl::set_d4(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d4 = value;
}
RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > testroot3_default_impl::get_d5()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d5;
}
void testroot3_default_impl::set_d5(RR_SHARED_PTR<RobotRaconteur::RRList<RobotRaconteur::RRMultiDimArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d5 = value;
}
RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > testroot3_default_impl::get_d6()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d6;
}
void testroot3_default_impl::set_d6(RR_SHARED_PTR<RobotRaconteur::RRMap<int32_t,RobotRaconteur::RRMultiDimArray<double >  > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d6 = value;
}
void testroot3_default_impl::testcstruct1_func1(const testcstruct1& s)
{
throw RobotRaconteur::NotImplementedException("");
}
testcstruct1 testroot3_default_impl::testcstruct1_func2()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Generator<double,void > > testroot3_default_impl::gen_func1()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,void > > testroot3_default_impl::gen_func2(const std::string& name)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Generator<void,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > testroot3_default_impl::gen_func3(const std::string& name)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > >,RR_SHARED_PTR<RobotRaconteur::RRArray<uint8_t > > > > testroot3_default_impl::gen_func4()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Generator<RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 >,RR_SHARED_PTR<com::robotraconteur::testing::TestService1::teststruct2 > > > testroot3_default_impl::gen_func5()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<obj4 > testroot3_default_impl::get_o4()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > testroot3_default_impl::get_unreliable1()
{
boost::mutex::scoped_lock lock(this_lock);
if (!rrvar_unreliable1) throw RobotRaconteur::InvalidOperationException("Pipe not set");
return rrvar_unreliable1->GetPipe();
}
void testroot3_default_impl::set_unreliable1(RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > value)
{
boost::mutex::scoped_lock lock(this_lock);
if (rrvar_unreliable1) throw RobotRaconteur::InvalidOperationException("Pipe already set");
rrvar_unreliable1 = RR_MAKE_SHARED<RobotRaconteur::PipeBroadcaster<int32_t> >();
rrvar_unreliable1->Init(value);throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > testroot3_default_impl::get_unreliable2()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_unreliable2(RR_SHARED_PTR<RobotRaconteur::Pipe<int32_t > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_default_impl::get_p1()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_p1(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_default_impl::get_p2()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_p2(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > testroot3_default_impl::get_p3()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_p3(RR_SHARED_PTR<RobotRaconteur::Pipe<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > testroot3_default_impl::get_peekwire()
{
boost::mutex::scoped_lock lock(this_lock);
if (!rrvar_peekwire) throw RobotRaconteur::InvalidOperationException("Wire not set");
return rrvar_peekwire->GetWire();
}
void testroot3_default_impl::set_peekwire(RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > value)
{
if (rrvar_peekwire) throw RobotRaconteur::InvalidOperationException("Wire already set");
rrvar_peekwire = RR_MAKE_SHARED<RobotRaconteur::WireBroadcaster<int32_t> >();
rrvar_peekwire->Init(value);}
RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > testroot3_default_impl::get_pokewire()
{
boost::mutex::scoped_lock lock(this_lock);
if (!rrvar_pokewire) throw RobotRaconteur::InvalidOperationException("Wire not set");
return rrvar_pokewire->GetWire();
}
void testroot3_default_impl::set_pokewire(RR_SHARED_PTR<RobotRaconteur::Wire<int32_t > > value)
{
if (rrvar_pokewire) throw RobotRaconteur::InvalidOperationException("Wire already set");
rrvar_pokewire = RR_MAKE_SHARED<RobotRaconteur::WireUnicastReceiver<int32_t> >();
rrvar_pokewire->Init(value);}
RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_default_impl::get_w1()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_w1(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > testroot3_default_impl::get_w2()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_w2(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > testroot3_default_impl::get_w3()
{
throw RobotRaconteur::NotImplementedException("");
}
void testroot3_default_impl::set_w3(RR_SHARED_PTR<RobotRaconteur::Wire<RR_SHARED_PTR<RobotRaconteur::RRMultiDimArray<int32_t > > > > value)
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::ArrayMemory<double > > testroot3_default_impl::get_readmem()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::CStructureArrayMemory<testcstruct2 > > testroot3_default_impl::get_cstruct_m1()
{
throw RobotRaconteur::NotImplementedException("");
}
RR_SHARED_PTR<RobotRaconteur::CStructureMultiDimArrayMemory<testcstruct2 > > testroot3_default_impl::get_cstruct_m2()
{
throw RobotRaconteur::NotImplementedException("");
}
obj1_default_impl::obj1_default_impl()
{
rrvar_d1=RobotRaconteur::AllocateEmptyRRArray<double>(0);
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj1_default_impl::get_d1()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d1;
}
void obj1_default_impl::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d1 = value;
}
obj2_default_impl::obj2_default_impl()
{
rrvar_d1=RobotRaconteur::AllocateEmptyRRArray<double>(0);
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj2_default_impl::get_d1()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d1;
}
void obj2_default_impl::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d1 = value;
}
obj3_default_impl::obj3_default_impl()
{
rrvar_d1=RobotRaconteur::AllocateEmptyRRArray<double>(0);
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > obj3_default_impl::get_d1()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_d1;
}
void obj3_default_impl::set_d1(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_d1 = value;
}
obj4_default_impl::obj4_default_impl()
{
rrvar_s_ind="";
rrvar_i_ind=0;
rrvar_data="";
}
std::string obj4_default_impl::get_s_ind()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_s_ind;
}
void obj4_default_impl::set_s_ind(const std::string& value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_s_ind = value;
}
int32_t obj4_default_impl::get_i_ind()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_i_ind;
}
void obj4_default_impl::set_i_ind(int32_t value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_i_ind = value;
}
std::string obj4_default_impl::get_data()
{
boost::mutex::scoped_lock lock(this_lock);
return rrvar_data;
}
void obj4_default_impl::set_data(const std::string& value)
{
boost::mutex::scoped_lock lock(this_lock);
rrvar_data = value;
}
RR_SHARED_PTR<com::robotraconteur::testing::TestService1::sub3 > obj4_default_impl::get_o3_1(const std::string& ind)
{
throw RobotRaconteur::NotImplementedException("");
}

}
}
}
}

