//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;

#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService3
{
public class teststruct3
{
    public testcstruct1 s1;
    public testcstruct1[] s2;
    public testcstruct1[] s3;
    public testcstruct1[] s4;
    public CStructureMultiDimArray s5;
    public CStructureMultiDimArray s6;
    public List<testcstruct1> s7;
    public List<testcstruct1[]> s8;
    public List<CStructureMultiDimArray> s9;
    public object s10;
    public object s11;
    public object s12;
    public object s13;
    public object s14;
    public object s15;
}

public struct testcstruct1
{
    public double d1;
    public double[] d2;
    public double[] d3;
    public double[] d4;
    public testcstruct2 s1;
    public testcstruct2[] s2;
    public testcstruct2[] s3;
    public testcstruct2[] s4;
}

public struct testcstruct2
{
    public sbyte i1;
    public sbyte[] i2;
    public sbyte[] i3;
}

[RobotRaconteurServiceObjectInterface()]
public interface testroot3
{
    int readme { get; set; }
    int writeme { get; set; }
    int unknown_modifier { get; set; }
    testenum1 testenum1_prop { get; set; }
    testcstruct1 testcstruct1_prop { get; set; }
    teststruct3 teststruct3_prop { get; set; }
    List<double[]> d1 { get; set; }
    List<double[]> d2 { get; set; }
    Dictionary<int,double[]> d3 { get; set; }
    Dictionary<int,double[]> d4 { get; set; }
    List<MultiDimArray> d5 { get; set; }
    Dictionary<int,MultiDimArray> d6 { get; set; }
    void testcstruct1_func1(testcstruct1 s);
    testcstruct1 testcstruct1_func2();
    Generator2<double> gen_func1();
    Generator2<byte[]> gen_func2(string name);
    Generator3<byte[]> gen_func3(string name);
    Generator1<byte[],byte[]> gen_func4();
    Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> gen_func5();
    obj4 get_o4();
    Pipe<int> unreliable1{ get; set; }
    Pipe<int> unreliable2{ get; set; }
    Pipe<int[]> p1{ get; set; }
    Pipe<int[]> p2{ get; set; }
    Pipe<MultiDimArray> p3{ get; set; }
    Wire<int> peekwire{ get; set; }
    Wire<int> pokewire{ get; set; }
    Wire<int[]> w1{ get; set; }
    Wire<int[]> w2{ get; set; }
    Wire<MultiDimArray> w3{ get; set; }
    ArrayMemory<double> readmem { get; set; }
    CStructureArrayMemory<testcstruct2> cstruct_m1 { get; set; }
    CStructureMultiDimArrayMemory<testcstruct2> cstruct_m2 { get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface obj1
{
    double[] d1 { get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface obj2 : obj1
{
    double[] d1 { get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface obj3 : obj1, obj2
{
    double[] d1 { get; set; }
}

[RobotRaconteurServiceObjectInterface()]
public interface obj4 : com.robotraconteur.testing.TestService1.sub2
{
    string s_ind { get; set; }
    int i_ind { get; set; }
    string data { get; set; }
    com.robotraconteur.testing.TestService1.sub3 get_o3_1(string ind);
}

public static class com__robotraconteur__testing__TestService3Constants 
{
    public const string strconst="This is a\n \"string constant\" \\/\b\f \r\u00ff tabme\ttabme\n smile! \ud83d\ude01";
    public const int int32const=3856384;
    public static readonly int[] int32const_array={182476, 56483, -2947};
    public static readonly double[] doubleconst_array={1.5847, 3.14, -548e3, 3452.67e2, 485e-21};
    public static class structconst { public const string strconst="This is a\n \"string constant\" \\/\b\f \r\u00ff tabme\ttabme\n smile! \ud83d\ude01"; public static readonly int[] int32const_array={182476, 56483, -2947}; }
    public static class structconst2 { public static class structconst { public const string strconst="This is a\n \"string constant\" \\/\b\f \r\u00ff tabme\ttabme\n smile! \ud83d\ude01"; public static readonly int[] int32const_array={182476, 56483, -2947}; } public const int int32const=3856384; }
}
    public enum testenum1
    {
    value1 = 0,
    value2 = 1,
    value3 = 2,
    anothervalue = -1,
    anothervalue2 = -2,
    anothervalue3 = -3,
    hexval1 = 0x10,
    hexval2 = 0x11,
    neghexval1 = -2147483643,
    neghexval2 = -2147483642,
    more_values = -2147483641
    };
}
