//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService1
{
public class com__robotraconteur__testing__TestService1Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="#This is the standard test service for RobotRaconteur\n#It is not meant to be exhaustive, rather it tests the\n#most common operations.\n\n#Each of the members defined has a specified behavior.\n#Refer to the reference implementation for details\n#on these behaviors.  New implementations of\n#Robot Raconteur should test against the reference\n#client and server to determine compatibilty.\n\nservice com.robotraconteur.testing.TestService1\n\noption version 0.8\n\nimport com.robotraconteur.testing.TestService2\n\nexception testexception1\nexception testexception2\n\nstruct teststruct1\nfield double[] dat1\nfield string str2\nfield string{int32} vec3\nfield string{string} dict4\nfield string{list} list5\nfield teststruct2 struct1\nfield teststruct2{string} dstruct2\nfield teststruct2{list} lstruct3\nfield double[*] multidimarray\n\nfield varvalue var3\n\nend struct\n\nstruct teststruct2\nfield double[] mydat\n\nend struct\n\nobject testroot\nimplements com.robotraconteur.testing.TestService2.baseobj\n\noption constant double[] doubleconst {3.4, 4.8, 14372.8}\noption constant string strconst \"This is a constant\"\n\n#Properties to test the serialization of different data types\n\n#numbers\n\nproperty double d1\nproperty double[] d2\nproperty double[16] d3\nproperty double[16-] d4\nproperty double[*] d5\nproperty double[3,3] d6\n\nproperty single s1\nproperty single[] s2\n\nproperty int8 i8_1\nproperty int8[] i8_2\n\nproperty uint8 u8_1\nproperty uint8[] u8_2\nproperty uint8[*] u8_3\n\nproperty int16 i16_1\nproperty int16[] i16_2\n\nproperty uint16 u16_1\nproperty uint16[] u16_2\n\nproperty int32 i32_1\nproperty int32[] i32_2\nproperty int32[] i32_huge\n\nproperty uint32 u32_1\nproperty uint32[] u32_2\n\nproperty int64 i64_1\nproperty int64[] i64_2\n\nproperty uint64 u64_1\nproperty uint64[] u64_2\n\n#strings\nproperty string str1\n\n#structs\nproperty teststruct1 struct1\nproperty teststruct2 struct2\n\n#indexed sets\nproperty double{int32} is_d1\nproperty double{string} is_d2\nproperty double[]{int32} is_d3\nproperty double[]{string} is_d4\nproperty double[*]{int32} is_d5\nproperty double[*]{string} is_d6\n\nproperty string{int32} is_str1\nproperty string{string} is_str2\n\nproperty teststruct2{int32} is_struct1\nproperty teststruct2{string} is_struct2\nproperty com.robotraconteur.testing.TestService2.ostruct2 struct3\n\n#lists\nproperty double{list} list_d1\nproperty double[]{list} list_d3\nproperty double[*]{list} list_d5\n\nproperty string{list} list_str1\nproperty teststruct2{list} list_struct1\n\n#varvalue\nproperty varvalue var1\nproperty varvalue{int32} var2\nproperty varvalue var_num\nproperty varvalue var_str\nproperty varvalue var_struct\nproperty varvalue var_vector\nproperty varvalue var_dictionary\nproperty varvalue var_list\nproperty varvalue var_multidimarray\n\n#Throw an error to test error transmission\nproperty double errtest\nproperty teststruct1 nulltest\n\n#functions\nfunction void func1()\nfunction void func2(double d1, double d2)\nfunction double func3(double d1, double d2)\nfunction int32 meaning_of_life()\nfunction void func_errtest()\nfunction void func_errtest1()\nfunction void func_errtest2()\nfunction void func_errtest3()\n\n#events\n\nevent ev1()\nevent ev2(double d1, teststruct2 s2 )\n\n#objrefs\n\nobjref sub1 o1\nobjref sub1[] o2\nobjref sub1{int32} o3\nobjref sub1{string} o4\nobjref com.robotraconteur.testing.TestService2.subobj o5\n\nobjref varobject o6\n\nfunction void o6_op(int32 op)\n\n#pipes\n\npipe double[] p1\n\n#option pipe p2 unreliable\npipe teststruct2 p2\nfunction void pipe_check_error()\n\npipe double broadcastpipe\n\n#callbacks\ncallback void cb1()\ncallback void cb2(double d1, double d2)\ncallback double cb3(double d1, double d2)\ncallback int32 cb_meaning_of_life()\ncallback void cb_errtest()\n\nfunction void test_callbacks()\n\n#wires\n\nwire double[] w1\nwire teststruct2 w2\nwire int32[*] w3\n\nwire double broadcastwire\n\n#memory\n\nmemory double[] m1\nmemory double[*] m2\nmemory uint8[*] m3\n\nend object\n\nobject sub1\nproperty double[] d1\nproperty double[*] d2\n\nobjref sub2 o2_1\nobjref sub2{int32} o2_2\nobjref sub2{string} o2_3\n\nproperty string s_ind\nproperty int32 i_ind\n\nend object\n\nobject sub2\n\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\nobject sub3\nproperty string ind\nproperty string data2\nproperty double data3\nfunction double add(double d)\nend object\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.testing.TestService1";}
    public teststruct1_stub teststruct1_stubentry;
    public teststruct2_stub teststruct2_stubentry;
    public com__robotraconteur__testing__TestService1Factory()
{
    teststruct1_stubentry=new teststruct1_stub(this);
    teststruct2_stubentry=new teststruct2_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="teststruct1")    return teststruct1_stubentry;
    if (objecttype=="teststruct2")    return teststruct2_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override ICStructureStub FindCStructureStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate cstructure stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "testroot":
    return new testroot_stub(innerstub);
    case "sub1":
    return new sub1_stub(innerstub);
    case "sub2":
    return new sub2_stub(innerstub);
    case "sub3":
    return new sub3_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "testroot":
    return new testroot_skel((testroot)obj);
    case "sub1":
    return new sub1_skel((sub1)obj);
    case "sub2":
    return new sub2_skel((sub2)obj);
    case "sub3":
    return new sub3_skel((sub3)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    if (rr_stype=="testexception1") return new testexception1(rr_exp.Message);
    if (rr_stype=="testexception2") return new testexception2(rr_exp.Message);
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class teststruct1_stub : IStructureStub {
    public teststruct1_stub(com__robotraconteur__testing__TestService1Factory d) {def=d;}
    private com__robotraconteur__testing__TestService1Factory def;
    public MessageElementStructure PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    teststruct1 s = (teststruct1)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("dat1",s.dat1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("str2",s.str2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("vec3",RobotRaconteurNode.s.PackMapType<int,string>(s.vec3)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("dict4",RobotRaconteurNode.s.PackMapType<string,string>(s.dict4)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("list5",RobotRaconteurNode.s.PackListType<string>(s.list5)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("struct1",RobotRaconteurNode.s.PackStructure(s.struct1)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("dstruct2",RobotRaconteurNode.s.PackMapType<string,teststruct2>(s.dstruct2)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("lstruct3",RobotRaconteurNode.s.PackListType<teststruct2>(s.lstruct3)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("multidimarray",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)s.multidimarray)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("var3",RobotRaconteurNode.s.PackVarType(s.var3)));
    return new MessageElementStructure("com.robotraconteur.testing.TestService1.teststruct1",m);
    }
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    teststruct1 s=new teststruct1();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.dat1 =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"dat1"));
    s.str2 =MessageElementUtil.CastDataAndDispose<string>(MessageElement.FindElement(mm,"str2"));
    s.vec3 =(Dictionary<int,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,string>(MessageElement.FindElement(mm,"vec3").Data);
    s.dict4 =(Dictionary<string,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,string>(MessageElement.FindElement(mm,"dict4").Data);
    s.list5 =(List<string>)RobotRaconteurNode.s.UnpackListTypeDispose<string>(MessageElement.FindElement(mm,"list5").Data);
    s.struct1 =RobotRaconteurNode.s.UnpackStructureDispose<teststruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(MessageElement.FindElement(mm,"struct1")));
    s.dstruct2 =(Dictionary<string,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,teststruct2>(MessageElement.FindElement(mm,"dstruct2").Data);
    s.lstruct3 =(List<teststruct2>)RobotRaconteurNode.s.UnpackListTypeDispose<teststruct2>(MessageElement.FindElement(mm,"lstruct3").Data);
    s.multidimarray =RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(MessageElement.FindElement(mm,"multidimarray")));
    s.var3 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"var3"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class teststruct2_stub : IStructureStub {
    public teststruct2_stub(com__robotraconteur__testing__TestService1Factory d) {def=d;}
    private com__robotraconteur__testing__TestService1Factory def;
    public MessageElementStructure PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    teststruct2 s = (teststruct2)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("mydat",s.mydat));
    return new MessageElementStructure("com.robotraconteur.testing.TestService1.teststruct2",m);
    }
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    teststruct2 s=new teststruct2();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.mydat =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"mydat"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_testroot : com.robotraconteur.testing.TestService2.async_baseobj
{
    void async_get_d1(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d1(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d2(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d2(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d3(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d3(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d4(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d4(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d5(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d5(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d6(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d6(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_s1(Action<float,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_s1(float value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_s2(Action<float[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_s2(float[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i8_1(Action<sbyte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i8_1(sbyte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i8_2(Action<sbyte[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i8_2(sbyte[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u8_1(Action<byte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u8_1(byte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u8_2(Action<byte[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u8_2(byte[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u8_3(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u8_3(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i16_1(Action<short,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i16_1(short value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i16_2(Action<short[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i16_2(short[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u16_1(Action<ushort,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u16_1(ushort value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u16_2(Action<ushort[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u16_2(ushort[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i32_1(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i32_1(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i32_2(Action<int[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i32_2(int[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i32_huge(Action<int[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i32_huge(int[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u32_1(Action<uint,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u32_1(uint value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u32_2(Action<uint[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u32_2(uint[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i64_1(Action<long,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i64_1(long value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i64_2(Action<long[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i64_2(long[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u64_1(Action<ulong,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u64_1(ulong value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_u64_2(Action<ulong[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_u64_2(ulong[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_str1(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_str1(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_struct1(Action<teststruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_struct1(teststruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_struct2(Action<teststruct2,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_struct2(teststruct2 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d1(Action<Dictionary<int,double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d1(Dictionary<int,double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d2(Action<Dictionary<string,double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d2(Dictionary<string,double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d3(Action<Dictionary<int,double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d3(Dictionary<int,double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d4(Action<Dictionary<string,double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d4(Dictionary<string,double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d5(Action<Dictionary<int,MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d5(Dictionary<int,MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_d6(Action<Dictionary<string,MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_d6(Dictionary<string,MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_str1(Action<Dictionary<int,string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_str1(Dictionary<int,string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_str2(Action<Dictionary<string,string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_str2(Dictionary<string,string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_struct1(Action<Dictionary<int,teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_struct1(Dictionary<int,teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_is_struct2(Action<Dictionary<string,teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_is_struct2(Dictionary<string,teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_struct3(Action<com.robotraconteur.testing.TestService2.ostruct2,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_list_d1(Action<List<double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_list_d1(List<double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_list_d3(Action<List<double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_list_d3(List<double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_list_d5(Action<List<MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_list_d5(List<MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_list_str1(Action<List<string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_list_str1(List<string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_list_struct1(Action<List<teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_list_struct1(List<teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var1(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var1(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var2(Action<Dictionary<int,object>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var2(Dictionary<int,object> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_num(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_num(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_str(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_str(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_struct(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_struct(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_vector(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_vector(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_dictionary(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_dictionary(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_list(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_list(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_var_multidimarray(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_var_multidimarray(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_errtest(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_errtest(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_nulltest(Action<teststruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_nulltest(teststruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func1(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func2(double d1, double d2,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func3(double d1, double d2,Action<double,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_meaning_of_life(Action<int,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func_errtest(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func_errtest1(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func_errtest2(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_func_errtest3(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_o6_op(int op,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_pipe_check_error(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_test_callbacks(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o1(Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o2(int ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o3(int ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o4(string ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o5(Action<com.robotraconteur.testing.TestService2.subobj,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o6(Action<object,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class testroot_stub : ServiceStub , testroot, async_testroot{
    private CallbackClient<Action> rr_cb1;
    private CallbackClient<Action<double, double>> rr_cb2;
    private CallbackClient<Func<double,double,double>> rr_cb3;
    private CallbackClient<Func<int>> rr_cb_meaning_of_life;
    private CallbackClient<Action> rr_cb_errtest;
    private Pipe<double[]> rr_p1;
    private Pipe<teststruct2> rr_p2;
    private Pipe<double> rr_broadcastpipe;
    private Wire<double[]> rr_w1;
    private Wire<teststruct2> rr_w2;
    private Wire<MultiDimArray> rr_w3;
    private Wire<double> rr_broadcastwire;
    private ArrayMemory<double> rr_m1;
    private MultiDimArrayMemory<double> rr_m2;
    private MultiDimArrayMemory<byte> rr_m3;
    public testroot_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_cb1=new CallbackClient<Action>("cb1");
    rr_cb2=new CallbackClient<Action<double, double>>("cb2");
    rr_cb3=new CallbackClient<Func<double,double,double>>("cb3");
    rr_cb_meaning_of_life=new CallbackClient<Func<int>>("cb_meaning_of_life");
    rr_cb_errtest=new CallbackClient<Action>("cb_errtest");
    rr_p1=new Pipe<double[]>(innerstub.GetPipe("p1"));
    rr_p2=new Pipe<teststruct2>(innerstub.GetPipe("p2"));
    rr_broadcastpipe=new Pipe<double>(innerstub.GetPipe("broadcastpipe"));
    rr_w1=new Wire<double[]>(innerstub.GetWire("w1"));
    rr_w2=new Wire<teststruct2>(innerstub.GetWire("w2"));
    rr_w3=new Wire<MultiDimArray>(innerstub.GetWire("w3"));
    rr_broadcastwire=new Wire<double>(innerstub.GetWire("broadcastwire"));
    rr_m1=new ArrayMemoryClient<double>(innerstub.GetArrayMemory("m1"));
    rr_m2=new MultiDimArrayMemoryClient<double>(innerstub.GetMultiDimArrayMemory("m2"));
    rr_m3=new MultiDimArrayMemoryClient<byte>(innerstub.GetMultiDimArrayMemory("m3"));
    }
    public double d1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public double[] d2 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d2", m);
    }
    }
    }
    public double[] d3 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d3"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d3", m);
    }
    }
    }
    public double[] d4 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d4"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d4", m);
    }
    }
    }
    public MultiDimArray d5 {
    get {
    return RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(rr_innerstub.PropertyGet("d5")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_innerstub.PropertySet("d5", m);
    }
    }
    }
    public MultiDimArray d6 {
    get {
    return RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(rr_innerstub.PropertyGet("d6")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_innerstub.PropertySet("d6", m);
    }
    }
    }
    public float s1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<float[]>(rr_innerstub.PropertyGet("s1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new float[] {value}))
    {
    rr_innerstub.PropertySet("s1", m);
    }
    }
    }
    public float[] s2 {
    get {
    return MessageElementUtil.CastDataAndDispose<float[]>(rr_innerstub.PropertyGet("s2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("s2", m);
    }
    }
    }
    public sbyte i8_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<sbyte[]>(rr_innerstub.PropertyGet("i8_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new sbyte[] {value}))
    {
    rr_innerstub.PropertySet("i8_1", m);
    }
    }
    }
    public sbyte[] i8_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<sbyte[]>(rr_innerstub.PropertyGet("i8_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("i8_2", m);
    }
    }
    }
    public byte u8_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<byte[]>(rr_innerstub.PropertyGet("u8_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new byte[] {value}))
    {
    rr_innerstub.PropertySet("u8_1", m);
    }
    }
    }
    public byte[] u8_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<byte[]>(rr_innerstub.PropertyGet("u8_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("u8_2", m);
    }
    }
    }
    public MultiDimArray u8_3 {
    get {
    return RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(rr_innerstub.PropertyGet("u8_3")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_innerstub.PropertySet("u8_3", m);
    }
    }
    }
    public short i16_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<short[]>(rr_innerstub.PropertyGet("i16_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new short[] {value}))
    {
    rr_innerstub.PropertySet("i16_1", m);
    }
    }
    }
    public short[] i16_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<short[]>(rr_innerstub.PropertyGet("i16_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("i16_2", m);
    }
    }
    }
    public ushort u16_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<ushort[]>(rr_innerstub.PropertyGet("u16_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new ushort[] {value}))
    {
    rr_innerstub.PropertySet("u16_1", m);
    }
    }
    }
    public ushort[] u16_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<ushort[]>(rr_innerstub.PropertyGet("u16_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("u16_2", m);
    }
    }
    }
    public int i32_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i32_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("i32_1", m);
    }
    }
    }
    public int[] i32_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i32_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("i32_2", m);
    }
    }
    }
    public int[] i32_huge {
    get {
    return MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i32_huge"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("i32_huge", m);
    }
    }
    }
    public uint u32_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<uint[]>(rr_innerstub.PropertyGet("u32_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new uint[] {value}))
    {
    rr_innerstub.PropertySet("u32_1", m);
    }
    }
    }
    public uint[] u32_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<uint[]>(rr_innerstub.PropertyGet("u32_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("u32_2", m);
    }
    }
    }
    public long i64_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<long[]>(rr_innerstub.PropertyGet("i64_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new long[] {value}))
    {
    rr_innerstub.PropertySet("i64_1", m);
    }
    }
    }
    public long[] i64_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<long[]>(rr_innerstub.PropertyGet("i64_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("i64_2", m);
    }
    }
    }
    public ulong u64_1 {
    get {
    return (MessageElementUtil.CastDataAndDispose<ulong[]>(rr_innerstub.PropertyGet("u64_1")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new ulong[] {value}))
    {
    rr_innerstub.PropertySet("u64_1", m);
    }
    }
    }
    public ulong[] u64_2 {
    get {
    return MessageElementUtil.CastDataAndDispose<ulong[]>(rr_innerstub.PropertyGet("u64_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("u64_2", m);
    }
    }
    }
    public string str1 {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("str1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("str1", m);
    }
    }
    }
    public teststruct1 struct1 {
    get {
    return RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(rr_innerstub.PropertyGet("struct1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_innerstub.PropertySet("struct1", m);
    }
    }
    }
    public teststruct2 struct2 {
    get {
    return RobotRaconteurNode.s.UnpackStructureDispose<teststruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(rr_innerstub.PropertyGet("struct2")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_innerstub.PropertySet("struct2", m);
    }
    }
    }
    public Dictionary<int,double> is_d1 {
    get {
    return (Dictionary<int,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double>(rr_innerstub.PropertyGet("is_d1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,double>(value)))
    {
    rr_innerstub.PropertySet("is_d1", m);
    }
    }
    }
    public Dictionary<string,double> is_d2 {
    get {
    return (Dictionary<string,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double>(rr_innerstub.PropertyGet("is_d2").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,double>(value)))
    {
    rr_innerstub.PropertySet("is_d2", m);
    }
    }
    }
    public Dictionary<int,double[]> is_d3 {
    get {
    return (Dictionary<int,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double[]>(rr_innerstub.PropertyGet("is_d3").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,double[]>(value)))
    {
    rr_innerstub.PropertySet("is_d3", m);
    }
    }
    }
    public Dictionary<string,double[]> is_d4 {
    get {
    return (Dictionary<string,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double[]>(rr_innerstub.PropertyGet("is_d4").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,double[]>(value)))
    {
    rr_innerstub.PropertySet("is_d4", m);
    }
    }
    }
    public Dictionary<int,MultiDimArray> is_d5 {
    get {
    return (Dictionary<int,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,MultiDimArray>(rr_innerstub.PropertyGet("is_d5").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,MultiDimArray>(value)))
    {
    rr_innerstub.PropertySet("is_d5", m);
    }
    }
    }
    public Dictionary<string,MultiDimArray> is_d6 {
    get {
    return (Dictionary<string,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,MultiDimArray>(rr_innerstub.PropertyGet("is_d6").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,MultiDimArray>(value)))
    {
    rr_innerstub.PropertySet("is_d6", m);
    }
    }
    }
    public Dictionary<int,string> is_str1 {
    get {
    return (Dictionary<int,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,string>(rr_innerstub.PropertyGet("is_str1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,string>(value)))
    {
    rr_innerstub.PropertySet("is_str1", m);
    }
    }
    }
    public Dictionary<string,string> is_str2 {
    get {
    return (Dictionary<string,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,string>(rr_innerstub.PropertyGet("is_str2").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,string>(value)))
    {
    rr_innerstub.PropertySet("is_str2", m);
    }
    }
    }
    public Dictionary<int,teststruct2> is_struct1 {
    get {
    return (Dictionary<int,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,teststruct2>(rr_innerstub.PropertyGet("is_struct1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,teststruct2>(value)))
    {
    rr_innerstub.PropertySet("is_struct1", m);
    }
    }
    }
    public Dictionary<string,teststruct2> is_struct2 {
    get {
    return (Dictionary<string,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,teststruct2>(rr_innerstub.PropertyGet("is_struct2").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,teststruct2>(value)))
    {
    rr_innerstub.PropertySet("is_struct2", m);
    }
    }
    }
    public com.robotraconteur.testing.TestService2.ostruct2 struct3 {
    get {
    return RobotRaconteurNode.s.UnpackStructureDispose<com.robotraconteur.testing.TestService2.ostruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(rr_innerstub.PropertyGet("struct3")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_innerstub.PropertySet("struct3", m);
    }
    }
    }
    public List<double> list_d1 {
    get {
    return (List<double>)RobotRaconteurNode.s.UnpackListTypeDispose<double>(rr_innerstub.PropertyGet("list_d1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<double>(value)))
    {
    rr_innerstub.PropertySet("list_d1", m);
    }
    }
    }
    public List<double[]> list_d3 {
    get {
    return (List<double[]>)RobotRaconteurNode.s.UnpackListTypeDispose<double[]>(rr_innerstub.PropertyGet("list_d3").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<double[]>(value)))
    {
    rr_innerstub.PropertySet("list_d3", m);
    }
    }
    }
    public List<MultiDimArray> list_d5 {
    get {
    return (List<MultiDimArray>)RobotRaconteurNode.s.UnpackListTypeDispose<MultiDimArray>(rr_innerstub.PropertyGet("list_d5").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<MultiDimArray>(value)))
    {
    rr_innerstub.PropertySet("list_d5", m);
    }
    }
    }
    public List<string> list_str1 {
    get {
    return (List<string>)RobotRaconteurNode.s.UnpackListTypeDispose<string>(rr_innerstub.PropertyGet("list_str1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<string>(value)))
    {
    rr_innerstub.PropertySet("list_str1", m);
    }
    }
    }
    public List<teststruct2> list_struct1 {
    get {
    return (List<teststruct2>)RobotRaconteurNode.s.UnpackListTypeDispose<teststruct2>(rr_innerstub.PropertyGet("list_struct1").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<teststruct2>(value)))
    {
    rr_innerstub.PropertySet("list_struct1", m);
    }
    }
    }
    public object var1 {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var1", m);
    }
    }
    }
    public Dictionary<int,object> var2 {
    get {
    return (Dictionary<int,object>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,object>(rr_innerstub.PropertyGet("var2").Data);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,object>(value)))
    {
    rr_innerstub.PropertySet("var2", m);
    }
    }
    }
    public object var_num {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_num"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_num", m);
    }
    }
    }
    public object var_str {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_str"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_str", m);
    }
    }
    }
    public object var_struct {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_struct"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_struct", m);
    }
    }
    }
    public object var_vector {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_vector"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_vector", m);
    }
    }
    }
    public object var_dictionary {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_dictionary"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_dictionary", m);
    }
    }
    }
    public object var_list {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_list"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_list", m);
    }
    }
    }
    public object var_multidimarray {
    get {
    return RobotRaconteurNode.s.UnpackVarTypeDispose(rr_innerstub.PropertyGet("var_multidimarray"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_innerstub.PropertySet("var_multidimarray", m);
    }
    }
    }
    public double errtest {
    get {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("errtest")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_innerstub.PropertySet("errtest", m);
    }
    }
    }
    public teststruct1 nulltest {
    get {
    return RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(rr_innerstub.PropertyGet("nulltest")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_innerstub.PropertySet("nulltest", m);
    }
    }
    }
    public void func1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func1",rr_param))
    {
    }
    }
    }
    public void func2(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func2",rr_param))
    {
    }
    }
    }
    public double func3(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func3",rr_param))
    {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_me))[0];
    }
    }
    }
    public int meaning_of_life() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("meaning_of_life",rr_param))
    {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_me))[0];
    }
    }
    }
    public void func_errtest() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest",rr_param))
    {
    }
    }
    }
    public void func_errtest1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest1",rr_param))
    {
    }
    }
    }
    public void func_errtest2() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest2",rr_param))
    {
    }
    }
    }
    public void func_errtest3() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest3",rr_param))
    {
    }
    }
    }
    public void o6_op(int op) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("op",new int[] {op}));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("o6_op",rr_param))
    {
    }
    }
    }
    public void pipe_check_error() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("pipe_check_error",rr_param))
    {
    }
    }
    }
    public void test_callbacks() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("test_callbacks",rr_param))
    {
    }
    }
    }
    public event Action ev1;
    public event Action<double, teststruct2> ev2;
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "ev1":
    {
    if (ev1 != null) { 
    ev1();
    }
    return;
    }
    case "ev2":
    {
    if (ev2 != null) { 
    double d1=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d1")))[0];
    teststruct2 s2=RobotRaconteurNode.s.UnpackStructureDispose<teststruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(vectorptr_messageelement_util.FindElement(rr_m,"s2")));
    ev2(d1, s2);
    }
    return;
    }
    default:
    break;
    }
    }
    public sub1 get_o1() {
    return (sub1)FindObjRefTyped("o1","com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o2(int ind) {
    return (sub1)FindObjRefTyped("o2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o3(int ind) {
    return (sub1)FindObjRefTyped("o3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o4(string ind) {
    return (sub1)FindObjRefTyped("o4",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public com.robotraconteur.testing.TestService2.subobj get_o5() {
    return (com.robotraconteur.testing.TestService2.subobj)FindObjRefTyped("o5","com.robotraconteur.testing.TestService2.subobj");
    }
    public object get_o6() {
    return (object)FindObjRef("o6");
    }
    public Pipe<double[]> p1 {
    get { return rr_p1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<teststruct2> p2 {
    get { return rr_p2;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<double> broadcastpipe {
    get { return rr_broadcastpipe;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action> cb1 {
    get { return rr_cb1;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action<double, double>> cb2 {
    get { return rr_cb2;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<double,double,double>> cb3 {
    get { return rr_cb3;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<int>> cb_meaning_of_life {
    get { return rr_cb_meaning_of_life;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action> cb_errtest {
    get { return rr_cb_errtest;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> w1 {
    get { return rr_w1;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<teststruct2> w2 {
    get { return rr_w2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<MultiDimArray> w3 {
    get { return rr_w3;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double> broadcastwire {
    get { return rr_broadcastwire;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "cb1":
    {
    this.cb1.Function();
    return new MessageElement("return",(int)0);
    }
    case "cb2":
    {
    double d1=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d1")))[0];
    double d2=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d2")))[0];
    this.cb2.Function(d1, d2);
    return new MessageElement("return",(int)0);
    }
    case "cb3":
    {
    double d1=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d1")))[0];
    double d2=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d2")))[0];
    double ret=cb3.Function(d1, d2);
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {ret});
    }
    case "cb_meaning_of_life":
    {
    int ret=cb_meaning_of_life.Function();
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "cb_errtest":
    {
    this.cb_errtest.Function();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public ArrayMemory<double> m1 { 
    get { return rr_m1; }
    set { throw new InvalidOperationException();}
    }
    public MultiDimArrayMemory<double> m2 {
    get { return rr_m2; }
    set { throw new InvalidOperationException();}
    }
    public MultiDimArrayMemory<byte> m3 {
    get { return rr_m3; }
    set { throw new InvalidOperationException();}
    }
    public virtual void async_get_d1(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d1",rrend_async_get_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d1(MessageElement value ,Exception err,object param)
    {
    Action<double,Exception> rr_handler=(Action<double,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double),err);
    return;
    }
    double rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<double[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(double),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d1(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_async_PropertySet("d1",mm,rrend_async_set_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d2(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d2",rrend_async_get_d2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d2(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d2(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d2",mm,rrend_async_set_d2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d3(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d3",rrend_async_get_d3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d3(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d3(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d3",mm,rrend_async_set_d3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d4(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d4",rrend_async_get_d4,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d4(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d4(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d4",mm,rrend_async_set_d4,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d4(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d5(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d5",rrend_async_get_d5,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d5(MessageElement value ,Exception err,object param)
    {
    Action<MultiDimArray,Exception> rr_handler=(Action<MultiDimArray,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(MultiDimArray),err);
    return;
    }
    MultiDimArray rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(value));
    } catch (Exception err2) {
    rr_handler(default(MultiDimArray),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d5(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_async_PropertySet("d5",mm,rrend_async_set_d5,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d5(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d6(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d6",rrend_async_get_d6,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d6(MessageElement value ,Exception err,object param)
    {
    Action<MultiDimArray,Exception> rr_handler=(Action<MultiDimArray,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(MultiDimArray),err);
    return;
    }
    MultiDimArray rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(value));
    } catch (Exception err2) {
    rr_handler(default(MultiDimArray),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d6(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_async_PropertySet("d6",mm,rrend_async_set_d6,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d6(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_s1(Action<float,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("s1",rrend_async_get_s1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_s1(MessageElement value ,Exception err,object param)
    {
    Action<float,Exception> rr_handler=(Action<float,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(float),err);
    return;
    }
    float rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<float[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(float),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_s1(float value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new float[] {value}))
    {
    rr_async_PropertySet("s1",mm,rrend_async_set_s1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_s1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_s2(Action<float[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("s2",rrend_async_get_s2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_s2(MessageElement value ,Exception err,object param)
    {
    Action<float[],Exception> rr_handler=(Action<float[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(float[]),err);
    return;
    }
    float[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<float[]>(value);
    } catch (Exception err2) {
    rr_handler(default(float[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_s2(float[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("s2",mm,rrend_async_set_s2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_s2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i8_1(Action<sbyte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i8_1",rrend_async_get_i8_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i8_1(MessageElement value ,Exception err,object param)
    {
    Action<sbyte,Exception> rr_handler=(Action<sbyte,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(sbyte),err);
    return;
    }
    sbyte rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<sbyte[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(sbyte),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i8_1(sbyte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new sbyte[] {value}))
    {
    rr_async_PropertySet("i8_1",mm,rrend_async_set_i8_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i8_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i8_2(Action<sbyte[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i8_2",rrend_async_get_i8_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i8_2(MessageElement value ,Exception err,object param)
    {
    Action<sbyte[],Exception> rr_handler=(Action<sbyte[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(sbyte[]),err);
    return;
    }
    sbyte[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<sbyte[]>(value);
    } catch (Exception err2) {
    rr_handler(default(sbyte[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i8_2(sbyte[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("i8_2",mm,rrend_async_set_i8_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i8_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u8_1(Action<byte,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u8_1",rrend_async_get_u8_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u8_1(MessageElement value ,Exception err,object param)
    {
    Action<byte,Exception> rr_handler=(Action<byte,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(byte),err);
    return;
    }
    byte rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<byte[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(byte),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u8_1(byte value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new byte[] {value}))
    {
    rr_async_PropertySet("u8_1",mm,rrend_async_set_u8_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u8_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u8_2(Action<byte[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u8_2",rrend_async_get_u8_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u8_2(MessageElement value ,Exception err,object param)
    {
    Action<byte[],Exception> rr_handler=(Action<byte[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(byte[]),err);
    return;
    }
    byte[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<byte[]>(value);
    } catch (Exception err2) {
    rr_handler(default(byte[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u8_2(byte[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("u8_2",mm,rrend_async_set_u8_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u8_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u8_3(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u8_3",rrend_async_get_u8_3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u8_3(MessageElement value ,Exception err,object param)
    {
    Action<MultiDimArray,Exception> rr_handler=(Action<MultiDimArray,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(MultiDimArray),err);
    return;
    }
    MultiDimArray rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(value));
    } catch (Exception err2) {
    rr_handler(default(MultiDimArray),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u8_3(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_async_PropertySet("u8_3",mm,rrend_async_set_u8_3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u8_3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i16_1(Action<short,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i16_1",rrend_async_get_i16_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i16_1(MessageElement value ,Exception err,object param)
    {
    Action<short,Exception> rr_handler=(Action<short,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(short),err);
    return;
    }
    short rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<short[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(short),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i16_1(short value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new short[] {value}))
    {
    rr_async_PropertySet("i16_1",mm,rrend_async_set_i16_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i16_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i16_2(Action<short[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i16_2",rrend_async_get_i16_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i16_2(MessageElement value ,Exception err,object param)
    {
    Action<short[],Exception> rr_handler=(Action<short[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(short[]),err);
    return;
    }
    short[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<short[]>(value);
    } catch (Exception err2) {
    rr_handler(default(short[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i16_2(short[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("i16_2",mm,rrend_async_set_i16_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i16_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u16_1(Action<ushort,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u16_1",rrend_async_get_u16_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u16_1(MessageElement value ,Exception err,object param)
    {
    Action<ushort,Exception> rr_handler=(Action<ushort,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(ushort),err);
    return;
    }
    ushort rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<ushort[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(ushort),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u16_1(ushort value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new ushort[] {value}))
    {
    rr_async_PropertySet("u16_1",mm,rrend_async_set_u16_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u16_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u16_2(Action<ushort[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u16_2",rrend_async_get_u16_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u16_2(MessageElement value ,Exception err,object param)
    {
    Action<ushort[],Exception> rr_handler=(Action<ushort[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(ushort[]),err);
    return;
    }
    ushort[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<ushort[]>(value);
    } catch (Exception err2) {
    rr_handler(default(ushort[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u16_2(ushort[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("u16_2",mm,rrend_async_set_u16_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u16_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i32_1(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i32_1",rrend_async_get_i32_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i32_1(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i32_1(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("i32_1",mm,rrend_async_set_i32_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i32_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i32_2(Action<int[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i32_2",rrend_async_get_i32_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i32_2(MessageElement value ,Exception err,object param)
    {
    Action<int[],Exception> rr_handler=(Action<int[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int[]),err);
    return;
    }
    int[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<int[]>(value);
    } catch (Exception err2) {
    rr_handler(default(int[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i32_2(int[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("i32_2",mm,rrend_async_set_i32_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i32_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i32_huge(Action<int[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i32_huge",rrend_async_get_i32_huge,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i32_huge(MessageElement value ,Exception err,object param)
    {
    Action<int[],Exception> rr_handler=(Action<int[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int[]),err);
    return;
    }
    int[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<int[]>(value);
    } catch (Exception err2) {
    rr_handler(default(int[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i32_huge(int[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("i32_huge",mm,rrend_async_set_i32_huge,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i32_huge(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u32_1(Action<uint,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u32_1",rrend_async_get_u32_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u32_1(MessageElement value ,Exception err,object param)
    {
    Action<uint,Exception> rr_handler=(Action<uint,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(uint),err);
    return;
    }
    uint rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<uint[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(uint),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u32_1(uint value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new uint[] {value}))
    {
    rr_async_PropertySet("u32_1",mm,rrend_async_set_u32_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u32_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u32_2(Action<uint[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u32_2",rrend_async_get_u32_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u32_2(MessageElement value ,Exception err,object param)
    {
    Action<uint[],Exception> rr_handler=(Action<uint[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(uint[]),err);
    return;
    }
    uint[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<uint[]>(value);
    } catch (Exception err2) {
    rr_handler(default(uint[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u32_2(uint[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("u32_2",mm,rrend_async_set_u32_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u32_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i64_1(Action<long,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i64_1",rrend_async_get_i64_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i64_1(MessageElement value ,Exception err,object param)
    {
    Action<long,Exception> rr_handler=(Action<long,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(long),err);
    return;
    }
    long rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<long[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(long),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i64_1(long value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new long[] {value}))
    {
    rr_async_PropertySet("i64_1",mm,rrend_async_set_i64_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i64_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i64_2(Action<long[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i64_2",rrend_async_get_i64_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i64_2(MessageElement value ,Exception err,object param)
    {
    Action<long[],Exception> rr_handler=(Action<long[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(long[]),err);
    return;
    }
    long[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<long[]>(value);
    } catch (Exception err2) {
    rr_handler(default(long[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i64_2(long[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("i64_2",mm,rrend_async_set_i64_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i64_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u64_1(Action<ulong,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u64_1",rrend_async_get_u64_1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u64_1(MessageElement value ,Exception err,object param)
    {
    Action<ulong,Exception> rr_handler=(Action<ulong,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(ulong),err);
    return;
    }
    ulong rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<ulong[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(ulong),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u64_1(ulong value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new ulong[] {value}))
    {
    rr_async_PropertySet("u64_1",mm,rrend_async_set_u64_1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u64_1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_u64_2(Action<ulong[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("u64_2",rrend_async_get_u64_2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_u64_2(MessageElement value ,Exception err,object param)
    {
    Action<ulong[],Exception> rr_handler=(Action<ulong[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(ulong[]),err);
    return;
    }
    ulong[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<ulong[]>(value);
    } catch (Exception err2) {
    rr_handler(default(ulong[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_u64_2(ulong[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("u64_2",mm,rrend_async_set_u64_2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_u64_2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_str1(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("str1",rrend_async_get_str1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_str1(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_str1(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("str1",mm,rrend_async_set_str1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_str1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_struct1(Action<teststruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("struct1",rrend_async_get_struct1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_struct1(MessageElement value ,Exception err,object param)
    {
    Action<teststruct1,Exception> rr_handler=(Action<teststruct1,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(teststruct1),err);
    return;
    }
    teststruct1 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(value));
    } catch (Exception err2) {
    rr_handler(default(teststruct1),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_struct1(teststruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_async_PropertySet("struct1",mm,rrend_async_set_struct1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_struct1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_struct2(Action<teststruct2,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("struct2",rrend_async_get_struct2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_struct2(MessageElement value ,Exception err,object param)
    {
    Action<teststruct2,Exception> rr_handler=(Action<teststruct2,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(teststruct2),err);
    return;
    }
    teststruct2 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackStructureDispose<teststruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(value));
    } catch (Exception err2) {
    rr_handler(default(teststruct2),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_struct2(teststruct2 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_async_PropertySet("struct2",mm,rrend_async_set_struct2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_struct2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d1(Action<Dictionary<int,double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d1",rrend_async_get_is_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d1(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,double>,Exception> rr_handler=(Action<Dictionary<int,double>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,double>),err);
    return;
    }
    Dictionary<int,double> rr_ret;
    try {
    rr_ret=(Dictionary<int,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,double>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d1(Dictionary<int,double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,double>(value)))
    {
    rr_async_PropertySet("is_d1",mm,rrend_async_set_is_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d2(Action<Dictionary<string,double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d2",rrend_async_get_is_d2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d2(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<string,double>,Exception> rr_handler=(Action<Dictionary<string,double>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<string,double>),err);
    return;
    }
    Dictionary<string,double> rr_ret;
    try {
    rr_ret=(Dictionary<string,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<string,double>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d2(Dictionary<string,double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,double>(value)))
    {
    rr_async_PropertySet("is_d2",mm,rrend_async_set_is_d2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d3(Action<Dictionary<int,double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d3",rrend_async_get_is_d3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d3(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,double[]>,Exception> rr_handler=(Action<Dictionary<int,double[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,double[]>),err);
    return;
    }
    Dictionary<int,double[]> rr_ret;
    try {
    rr_ret=(Dictionary<int,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double[]>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,double[]>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d3(Dictionary<int,double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,double[]>(value)))
    {
    rr_async_PropertySet("is_d3",mm,rrend_async_set_is_d3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d4(Action<Dictionary<string,double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d4",rrend_async_get_is_d4,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d4(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<string,double[]>,Exception> rr_handler=(Action<Dictionary<string,double[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<string,double[]>),err);
    return;
    }
    Dictionary<string,double[]> rr_ret;
    try {
    rr_ret=(Dictionary<string,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double[]>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<string,double[]>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d4(Dictionary<string,double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,double[]>(value)))
    {
    rr_async_PropertySet("is_d4",mm,rrend_async_set_is_d4,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d4(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d5(Action<Dictionary<int,MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d5",rrend_async_get_is_d5,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d5(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,MultiDimArray>,Exception> rr_handler=(Action<Dictionary<int,MultiDimArray>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,MultiDimArray>),err);
    return;
    }
    Dictionary<int,MultiDimArray> rr_ret;
    try {
    rr_ret=(Dictionary<int,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,MultiDimArray>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,MultiDimArray>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d5(Dictionary<int,MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,MultiDimArray>(value)))
    {
    rr_async_PropertySet("is_d5",mm,rrend_async_set_is_d5,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d5(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_d6(Action<Dictionary<string,MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_d6",rrend_async_get_is_d6,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_d6(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<string,MultiDimArray>,Exception> rr_handler=(Action<Dictionary<string,MultiDimArray>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<string,MultiDimArray>),err);
    return;
    }
    Dictionary<string,MultiDimArray> rr_ret;
    try {
    rr_ret=(Dictionary<string,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,MultiDimArray>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<string,MultiDimArray>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_d6(Dictionary<string,MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,MultiDimArray>(value)))
    {
    rr_async_PropertySet("is_d6",mm,rrend_async_set_is_d6,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_d6(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_str1(Action<Dictionary<int,string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_str1",rrend_async_get_is_str1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_str1(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,string>,Exception> rr_handler=(Action<Dictionary<int,string>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,string>),err);
    return;
    }
    Dictionary<int,string> rr_ret;
    try {
    rr_ret=(Dictionary<int,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,string>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,string>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_str1(Dictionary<int,string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,string>(value)))
    {
    rr_async_PropertySet("is_str1",mm,rrend_async_set_is_str1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_str1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_str2(Action<Dictionary<string,string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_str2",rrend_async_get_is_str2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_str2(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<string,string>,Exception> rr_handler=(Action<Dictionary<string,string>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<string,string>),err);
    return;
    }
    Dictionary<string,string> rr_ret;
    try {
    rr_ret=(Dictionary<string,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,string>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<string,string>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_str2(Dictionary<string,string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,string>(value)))
    {
    rr_async_PropertySet("is_str2",mm,rrend_async_set_is_str2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_str2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_struct1(Action<Dictionary<int,teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_struct1",rrend_async_get_is_struct1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_struct1(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,teststruct2>,Exception> rr_handler=(Action<Dictionary<int,teststruct2>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,teststruct2>),err);
    return;
    }
    Dictionary<int,teststruct2> rr_ret;
    try {
    rr_ret=(Dictionary<int,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,teststruct2>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,teststruct2>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_struct1(Dictionary<int,teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,teststruct2>(value)))
    {
    rr_async_PropertySet("is_struct1",mm,rrend_async_set_is_struct1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_struct1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_is_struct2(Action<Dictionary<string,teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("is_struct2",rrend_async_get_is_struct2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_is_struct2(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<string,teststruct2>,Exception> rr_handler=(Action<Dictionary<string,teststruct2>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<string,teststruct2>),err);
    return;
    }
    Dictionary<string,teststruct2> rr_ret;
    try {
    rr_ret=(Dictionary<string,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,teststruct2>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<string,teststruct2>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_is_struct2(Dictionary<string,teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<string,teststruct2>(value)))
    {
    rr_async_PropertySet("is_struct2",mm,rrend_async_set_is_struct2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_is_struct2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_struct3(Action<com.robotraconteur.testing.TestService2.ostruct2,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("struct3",rrend_async_get_struct3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_struct3(MessageElement value ,Exception err,object param)
    {
    Action<com.robotraconteur.testing.TestService2.ostruct2,Exception> rr_handler=(Action<com.robotraconteur.testing.TestService2.ostruct2,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(com.robotraconteur.testing.TestService2.ostruct2),err);
    return;
    }
    com.robotraconteur.testing.TestService2.ostruct2 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackStructureDispose<com.robotraconteur.testing.TestService2.ostruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(value));
    } catch (Exception err2) {
    rr_handler(default(com.robotraconteur.testing.TestService2.ostruct2),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_async_PropertySet("struct3",mm,rrend_async_set_struct3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_struct3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_list_d1(Action<List<double>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("list_d1",rrend_async_get_list_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_list_d1(MessageElement value ,Exception err,object param)
    {
    Action<List<double>,Exception> rr_handler=(Action<List<double>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(List<double>),err);
    return;
    }
    List<double> rr_ret;
    try {
    rr_ret=(List<double>)RobotRaconteurNode.s.UnpackListTypeDispose<double>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(List<double>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_list_d1(List<double> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<double>(value)))
    {
    rr_async_PropertySet("list_d1",mm,rrend_async_set_list_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_list_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_list_d3(Action<List<double[]>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("list_d3",rrend_async_get_list_d3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_list_d3(MessageElement value ,Exception err,object param)
    {
    Action<List<double[]>,Exception> rr_handler=(Action<List<double[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(List<double[]>),err);
    return;
    }
    List<double[]> rr_ret;
    try {
    rr_ret=(List<double[]>)RobotRaconteurNode.s.UnpackListTypeDispose<double[]>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(List<double[]>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_list_d3(List<double[]> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<double[]>(value)))
    {
    rr_async_PropertySet("list_d3",mm,rrend_async_set_list_d3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_list_d3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_list_d5(Action<List<MultiDimArray>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("list_d5",rrend_async_get_list_d5,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_list_d5(MessageElement value ,Exception err,object param)
    {
    Action<List<MultiDimArray>,Exception> rr_handler=(Action<List<MultiDimArray>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(List<MultiDimArray>),err);
    return;
    }
    List<MultiDimArray> rr_ret;
    try {
    rr_ret=(List<MultiDimArray>)RobotRaconteurNode.s.UnpackListTypeDispose<MultiDimArray>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(List<MultiDimArray>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_list_d5(List<MultiDimArray> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<MultiDimArray>(value)))
    {
    rr_async_PropertySet("list_d5",mm,rrend_async_set_list_d5,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_list_d5(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_list_str1(Action<List<string>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("list_str1",rrend_async_get_list_str1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_list_str1(MessageElement value ,Exception err,object param)
    {
    Action<List<string>,Exception> rr_handler=(Action<List<string>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(List<string>),err);
    return;
    }
    List<string> rr_ret;
    try {
    rr_ret=(List<string>)RobotRaconteurNode.s.UnpackListTypeDispose<string>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(List<string>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_list_str1(List<string> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<string>(value)))
    {
    rr_async_PropertySet("list_str1",mm,rrend_async_set_list_str1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_list_str1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_list_struct1(Action<List<teststruct2>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("list_struct1",rrend_async_get_list_struct1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_list_struct1(MessageElement value ,Exception err,object param)
    {
    Action<List<teststruct2>,Exception> rr_handler=(Action<List<teststruct2>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(List<teststruct2>),err);
    return;
    }
    List<teststruct2> rr_ret;
    try {
    rr_ret=(List<teststruct2>)RobotRaconteurNode.s.UnpackListTypeDispose<teststruct2>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(List<teststruct2>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_list_struct1(List<teststruct2> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackListType<teststruct2>(value)))
    {
    rr_async_PropertySet("list_struct1",mm,rrend_async_set_list_struct1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_list_struct1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var1(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var1",rrend_async_get_var1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var1(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var1(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var1",mm,rrend_async_set_var1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var2(Action<Dictionary<int,object>,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var2",rrend_async_get_var2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var2(MessageElement value ,Exception err,object param)
    {
    Action<Dictionary<int,object>,Exception> rr_handler=(Action<Dictionary<int,object>,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(Dictionary<int,object>),err);
    return;
    }
    Dictionary<int,object> rr_ret;
    try {
    rr_ret=(Dictionary<int,object>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,object>(value.Data);
    } catch (Exception err2) {
    rr_handler(default(Dictionary<int,object>),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var2(Dictionary<int,object> value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMapType<int,object>(value)))
    {
    rr_async_PropertySet("var2",mm,rrend_async_set_var2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_num(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_num",rrend_async_get_var_num,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_num(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_num(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_num",mm,rrend_async_set_var_num,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_num(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_str(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_str",rrend_async_get_var_str,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_str(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_str(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_str",mm,rrend_async_set_var_str,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_str(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_struct(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_struct",rrend_async_get_var_struct,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_struct(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_struct(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_struct",mm,rrend_async_set_var_struct,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_struct(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_vector(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_vector",rrend_async_get_var_vector,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_vector(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_vector(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_vector",mm,rrend_async_set_var_vector,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_vector(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_dictionary(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_dictionary",rrend_async_get_var_dictionary,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_dictionary(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_dictionary(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_dictionary",mm,rrend_async_set_var_dictionary,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_dictionary(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_list(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_list",rrend_async_get_var_list,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_list(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_list(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_list",mm,rrend_async_set_var_list,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_list(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_var_multidimarray(Action<object,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("var_multidimarray",rrend_async_get_var_multidimarray,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_var_multidimarray(MessageElement value ,Exception err,object param)
    {
    Action<object,Exception> rr_handler=(Action<object,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(object),err);
    return;
    }
    object rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackVarTypeDispose(value);
    } catch (Exception err2) {
    rr_handler(default(object),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_var_multidimarray(object value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackVarType(value)))
    {
    rr_async_PropertySet("var_multidimarray",mm,rrend_async_set_var_multidimarray,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_var_multidimarray(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_errtest(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("errtest",rrend_async_get_errtest,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_errtest(MessageElement value ,Exception err,object param)
    {
    Action<double,Exception> rr_handler=(Action<double,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double),err);
    return;
    }
    double rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<double[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(double),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_errtest(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_async_PropertySet("errtest",mm,rrend_async_set_errtest,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_errtest(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_nulltest(Action<teststruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("nulltest",rrend_async_get_nulltest,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_nulltest(MessageElement value ,Exception err,object param)
    {
    Action<teststruct1,Exception> rr_handler=(Action<teststruct1,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(teststruct1),err);
    return;
    }
    teststruct1 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(value));
    } catch (Exception err2) {
    rr_handler(default(teststruct1),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_nulltest(teststruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_async_PropertySet("nulltest",mm,rrend_async_set_nulltest,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_nulltest(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func1(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("func1",rr_param,rrend_async_func1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func1(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func2(double d1, double d2,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    rr_async_FunctionCall("func2",rr_param,rrend_async_func2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func2(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func3(double d1, double d2,Action<double,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    rr_async_FunctionCall("func3",rr_param,rrend_async_func3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func3(MessageElement ret ,Exception err,object param)
    {
    Action<double,Exception> rr_handler=(Action<double,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double),err);
    return;
    }
    double rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<double[]>(ret))[0];
    } catch (Exception err2) {
    rr_handler(default(double),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_meaning_of_life(Action<int,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("meaning_of_life",rr_param,rrend_async_meaning_of_life,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_meaning_of_life(MessageElement ret ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(ret))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_func_errtest(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("func_errtest",rr_param,rrend_async_func_errtest,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func_errtest(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func_errtest1(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("func_errtest1",rr_param,rrend_async_func_errtest1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func_errtest1(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func_errtest2(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("func_errtest2",rr_param,rrend_async_func_errtest2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func_errtest2(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_func_errtest3(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("func_errtest3",rr_param,rrend_async_func_errtest3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_func_errtest3(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_o6_op(int op,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("op",new int[] {op}));
    rr_async_FunctionCall("o6_op",rr_param,rrend_async_o6_op,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_o6_op(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_pipe_check_error(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("pipe_check_error",rr_param,rrend_async_pipe_check_error,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_pipe_check_error(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_test_callbacks(Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("test_callbacks",rr_param,rrend_async_test_callbacks,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_test_callbacks(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public void async_get_o1(Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o1","com.robotraconteur.testing.TestService1.sub1",handler,timeout);
    }
    public void async_get_o2(int ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",handler,timeout);
    }
    public void async_get_o3(int ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",handler,timeout);
    }
    public void async_get_o4(string ind, Action<sub1,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o4",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",handler,timeout);
    }
    public void async_get_o5(Action<com.robotraconteur.testing.TestService2.subobj,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o5","com.robotraconteur.testing.TestService2.subobj",handler,timeout);
    }
    public void async_get_o6(Action<object,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE) {
    AsyncFindObjRef("o6",handler,timeout);
    }
}
public interface async_sub1
{
    void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_d2(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d2(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o2_1(Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o2_2(int ind, Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o2_3(string ind, Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub1_stub : ServiceStub , sub1, async_sub1{
    public sub1_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public double[] d1 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public MultiDimArray d2 {
    get {
    return RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(rr_innerstub.PropertyGet("d2")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_innerstub.PropertySet("d2", m);
    }
    }
    }
    public string s_ind {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("s_ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("s_ind", m);
    }
    }
    }
    public int i_ind {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i_ind")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("i_ind", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public sub2 get_o2_1() {
    return (sub2)FindObjRefTyped("o2_1","com.robotraconteur.testing.TestService1.sub2");
    }
    public sub2 get_o2_2(int ind) {
    return (sub2)FindObjRefTyped("o2_2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2");
    }
    public sub2 get_o2_3(string ind) {
    return (sub2)FindObjRefTyped("o2_3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d1",rrend_async_get_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d1(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d1",mm,rrend_async_set_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_d2(Action<MultiDimArray,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d2",rrend_async_get_d2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d2(MessageElement value ,Exception err,object param)
    {
    Action<MultiDimArray,Exception> rr_handler=(Action<MultiDimArray,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(MultiDimArray),err);
    return;
    }
    MultiDimArray rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(value));
    } catch (Exception err2) {
    rr_handler(default(MultiDimArray),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d2(MultiDimArray value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)value)))
    {
    rr_async_PropertySet("d2",mm,rrend_async_set_d2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("s_ind",rrend_async_get_s_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_s_ind(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("s_ind",mm,rrend_async_set_s_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_s_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i_ind",rrend_async_get_i_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i_ind(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("i_ind",mm,rrend_async_set_i_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public void async_get_o2_1(Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o2_1","com.robotraconteur.testing.TestService1.sub2",handler,timeout);
    }
    public void async_get_o2_2(int ind, Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o2_2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",handler,timeout);
    }
    public void async_get_o2_3(string ind, Action<sub2,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o2_3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",handler,timeout);
    }
}
public interface async_sub2
{
    void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_data(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_data(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o3_1(string ind, Action<sub3,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub2_stub : ServiceStub , sub2, async_sub2{
    public sub2_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string s_ind {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("s_ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("s_ind", m);
    }
    }
    }
    public int i_ind {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i_ind")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("i_ind", m);
    }
    }
    }
    public string data {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("data"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("data", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public sub3 get_o3_1(string ind) {
    return (sub3)FindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("s_ind",rrend_async_get_s_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_s_ind(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("s_ind",mm,rrend_async_set_s_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_s_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i_ind",rrend_async_get_i_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i_ind(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("i_ind",mm,rrend_async_set_i_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_data(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("data",rrend_async_get_data,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_data(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_data(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("data",mm,rrend_async_set_data,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_data(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public void async_get_o3_1(string ind, Action<sub3,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3",handler,timeout);
    }
}
public interface async_sub3
{
    void async_get_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_data2(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_data2(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_data3(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_data3(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_add(double d,Action<double,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub3_stub : ServiceStub , sub3, async_sub3{
    public sub3_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string ind {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("ind", m);
    }
    }
    }
    public string data2 {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("data2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("data2", m);
    }
    }
    }
    public double data3 {
    get {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("data3")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_innerstub.PropertySet("data3", m);
    }
    }
    }
    public double add(double d) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d",new double[] {d}));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("add",rr_param))
    {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_me))[0];
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("ind",rrend_async_get_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_ind(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("ind",mm,rrend_async_set_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_data2(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("data2",rrend_async_get_data2,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_data2(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_data2(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("data2",mm,rrend_async_set_data2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_data2(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_data3(Action<double,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("data3",rrend_async_get_data3,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_data3(MessageElement value ,Exception err,object param)
    {
    Action<double,Exception> rr_handler=(Action<double,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double),err);
    return;
    }
    double rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<double[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(double),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_data3(double value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new double[] {value}))
    {
    rr_async_PropertySet("data3",mm,rrend_async_set_data3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_data3(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_add(double d,Action<double,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d",new double[] {d}));
    rr_async_FunctionCall("add",rr_param,rrend_async_add,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_add(MessageElement ret ,Exception err,object param)
    {
    Action<double,Exception> rr_handler=(Action<double,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double),err);
    return;
    }
    double rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<double[]>(ret))[0];
    } catch (Exception err2) {
    rr_handler(default(double),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
}
public class testroot_skel : ServiceSkel {
    protected testroot obj;
    public testroot_skel(object o) : base(o) { obj=(testroot)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "d1":
    {
    double ret=obj.d1;
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {ret});
    }
    case "d2":
    {
    double[] ret=obj.d2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "d3":
    {
    double[] ret=obj.d3;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "d4":
    {
    double[] ret=obj.d4;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "d5":
    {
    MultiDimArray ret=obj.d5;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)ret));
    }
    case "d6":
    {
    MultiDimArray ret=obj.d6;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)ret));
    }
    case "s1":
    {
    float ret=obj.s1;
    return MessageElementUtil.NewMessageElementDispose("return",new float[] {ret});
    }
    case "s2":
    {
    float[] ret=obj.s2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i8_1":
    {
    sbyte ret=obj.i8_1;
    return MessageElementUtil.NewMessageElementDispose("return",new sbyte[] {ret});
    }
    case "i8_2":
    {
    sbyte[] ret=obj.i8_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "u8_1":
    {
    byte ret=obj.u8_1;
    return MessageElementUtil.NewMessageElementDispose("return",new byte[] {ret});
    }
    case "u8_2":
    {
    byte[] ret=obj.u8_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "u8_3":
    {
    MultiDimArray ret=obj.u8_3;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)ret));
    }
    case "i16_1":
    {
    short ret=obj.i16_1;
    return MessageElementUtil.NewMessageElementDispose("return",new short[] {ret});
    }
    case "i16_2":
    {
    short[] ret=obj.i16_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "u16_1":
    {
    ushort ret=obj.u16_1;
    return MessageElementUtil.NewMessageElementDispose("return",new ushort[] {ret});
    }
    case "u16_2":
    {
    ushort[] ret=obj.u16_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i32_1":
    {
    int ret=obj.i32_1;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "i32_2":
    {
    int[] ret=obj.i32_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i32_huge":
    {
    int[] ret=obj.i32_huge;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "u32_1":
    {
    uint ret=obj.u32_1;
    return MessageElementUtil.NewMessageElementDispose("return",new uint[] {ret});
    }
    case "u32_2":
    {
    uint[] ret=obj.u32_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i64_1":
    {
    long ret=obj.i64_1;
    return MessageElementUtil.NewMessageElementDispose("return",new long[] {ret});
    }
    case "i64_2":
    {
    long[] ret=obj.i64_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "u64_1":
    {
    ulong ret=obj.u64_1;
    return MessageElementUtil.NewMessageElementDispose("return",new ulong[] {ret});
    }
    case "u64_2":
    {
    ulong[] ret=obj.u64_2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "str1":
    {
    string ret=obj.str1;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "struct1":
    {
    teststruct1 ret=obj.struct1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackStructure(ret));
    }
    case "struct2":
    {
    teststruct2 ret=obj.struct2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackStructure(ret));
    }
    case "is_d1":
    {
    Dictionary<int,double> ret=obj.is_d1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,double>(ret));
    }
    case "is_d2":
    {
    Dictionary<string,double> ret=obj.is_d2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<string,double>(ret));
    }
    case "is_d3":
    {
    Dictionary<int,double[]> ret=obj.is_d3;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,double[]>(ret));
    }
    case "is_d4":
    {
    Dictionary<string,double[]> ret=obj.is_d4;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<string,double[]>(ret));
    }
    case "is_d5":
    {
    Dictionary<int,MultiDimArray> ret=obj.is_d5;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,MultiDimArray>(ret));
    }
    case "is_d6":
    {
    Dictionary<string,MultiDimArray> ret=obj.is_d6;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<string,MultiDimArray>(ret));
    }
    case "is_str1":
    {
    Dictionary<int,string> ret=obj.is_str1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,string>(ret));
    }
    case "is_str2":
    {
    Dictionary<string,string> ret=obj.is_str2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<string,string>(ret));
    }
    case "is_struct1":
    {
    Dictionary<int,teststruct2> ret=obj.is_struct1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,teststruct2>(ret));
    }
    case "is_struct2":
    {
    Dictionary<string,teststruct2> ret=obj.is_struct2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<string,teststruct2>(ret));
    }
    case "struct3":
    {
    com.robotraconteur.testing.TestService2.ostruct2 ret=obj.struct3;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackStructure(ret));
    }
    case "list_d1":
    {
    List<double> ret=obj.list_d1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackListType<double>(ret));
    }
    case "list_d3":
    {
    List<double[]> ret=obj.list_d3;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackListType<double[]>(ret));
    }
    case "list_d5":
    {
    List<MultiDimArray> ret=obj.list_d5;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackListType<MultiDimArray>(ret));
    }
    case "list_str1":
    {
    List<string> ret=obj.list_str1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackListType<string>(ret));
    }
    case "list_struct1":
    {
    List<teststruct2> ret=obj.list_struct1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackListType<teststruct2>(ret));
    }
    case "var1":
    {
    object ret=obj.var1;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var2":
    {
    Dictionary<int,object> ret=obj.var2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMapType<int,object>(ret));
    }
    case "var_num":
    {
    object ret=obj.var_num;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_str":
    {
    object ret=obj.var_str;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_struct":
    {
    object ret=obj.var_struct;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_vector":
    {
    object ret=obj.var_vector;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_dictionary":
    {
    object ret=obj.var_dictionary;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_list":
    {
    object ret=obj.var_list;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "var_multidimarray":
    {
    object ret=obj.var_multidimarray;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackVarType(ret));
    }
    case "errtest":
    {
    double ret=obj.errtest;
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {ret});
    }
    case "nulltest":
    {
    teststruct1 ret=obj.nulltest;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackStructure(ret));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "d1":
    {
    obj.d1=(MessageElementUtil.CastDataAndDispose<double[]>(m))[0];
    return;
    }
    case "d2":
    {
    obj.d2=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    case "d3":
    {
    obj.d3=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    case "d4":
    {
    obj.d4=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    case "d5":
    {
    obj.d5=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(m));
    return;
    }
    case "d6":
    {
    obj.d6=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(m));
    return;
    }
    case "s1":
    {
    obj.s1=(MessageElementUtil.CastDataAndDispose<float[]>(m))[0];
    return;
    }
    case "s2":
    {
    obj.s2=MessageElementUtil.CastDataAndDispose<float[]>(m);
    return;
    }
    case "i8_1":
    {
    obj.i8_1=(MessageElementUtil.CastDataAndDispose<sbyte[]>(m))[0];
    return;
    }
    case "i8_2":
    {
    obj.i8_2=MessageElementUtil.CastDataAndDispose<sbyte[]>(m);
    return;
    }
    case "u8_1":
    {
    obj.u8_1=(MessageElementUtil.CastDataAndDispose<byte[]>(m))[0];
    return;
    }
    case "u8_2":
    {
    obj.u8_2=MessageElementUtil.CastDataAndDispose<byte[]>(m);
    return;
    }
    case "u8_3":
    {
    obj.u8_3=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(m));
    return;
    }
    case "i16_1":
    {
    obj.i16_1=(MessageElementUtil.CastDataAndDispose<short[]>(m))[0];
    return;
    }
    case "i16_2":
    {
    obj.i16_2=MessageElementUtil.CastDataAndDispose<short[]>(m);
    return;
    }
    case "u16_1":
    {
    obj.u16_1=(MessageElementUtil.CastDataAndDispose<ushort[]>(m))[0];
    return;
    }
    case "u16_2":
    {
    obj.u16_2=MessageElementUtil.CastDataAndDispose<ushort[]>(m);
    return;
    }
    case "i32_1":
    {
    obj.i32_1=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "i32_2":
    {
    obj.i32_2=MessageElementUtil.CastDataAndDispose<int[]>(m);
    return;
    }
    case "i32_huge":
    {
    obj.i32_huge=MessageElementUtil.CastDataAndDispose<int[]>(m);
    return;
    }
    case "u32_1":
    {
    obj.u32_1=(MessageElementUtil.CastDataAndDispose<uint[]>(m))[0];
    return;
    }
    case "u32_2":
    {
    obj.u32_2=MessageElementUtil.CastDataAndDispose<uint[]>(m);
    return;
    }
    case "i64_1":
    {
    obj.i64_1=(MessageElementUtil.CastDataAndDispose<long[]>(m))[0];
    return;
    }
    case "i64_2":
    {
    obj.i64_2=MessageElementUtil.CastDataAndDispose<long[]>(m);
    return;
    }
    case "u64_1":
    {
    obj.u64_1=(MessageElementUtil.CastDataAndDispose<ulong[]>(m))[0];
    return;
    }
    case "u64_2":
    {
    obj.u64_2=MessageElementUtil.CastDataAndDispose<ulong[]>(m);
    return;
    }
    case "str1":
    {
    obj.str1=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "struct1":
    {
    obj.struct1=RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(m));
    return;
    }
    case "struct2":
    {
    obj.struct2=RobotRaconteurNode.s.UnpackStructureDispose<teststruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(m));
    return;
    }
    case "is_d1":
    {
    obj.is_d1=(Dictionary<int,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double>(m.Data);
    return;
    }
    case "is_d2":
    {
    obj.is_d2=(Dictionary<string,double>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double>(m.Data);
    return;
    }
    case "is_d3":
    {
    obj.is_d3=(Dictionary<int,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,double[]>(m.Data);
    return;
    }
    case "is_d4":
    {
    obj.is_d4=(Dictionary<string,double[]>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,double[]>(m.Data);
    return;
    }
    case "is_d5":
    {
    obj.is_d5=(Dictionary<int,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,MultiDimArray>(m.Data);
    return;
    }
    case "is_d6":
    {
    obj.is_d6=(Dictionary<string,MultiDimArray>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,MultiDimArray>(m.Data);
    return;
    }
    case "is_str1":
    {
    obj.is_str1=(Dictionary<int,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,string>(m.Data);
    return;
    }
    case "is_str2":
    {
    obj.is_str2=(Dictionary<string,string>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,string>(m.Data);
    return;
    }
    case "is_struct1":
    {
    obj.is_struct1=(Dictionary<int,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,teststruct2>(m.Data);
    return;
    }
    case "is_struct2":
    {
    obj.is_struct2=(Dictionary<string,teststruct2>)RobotRaconteurNode.s.UnpackMapTypeDispose<string,teststruct2>(m.Data);
    return;
    }
    case "struct3":
    {
    obj.struct3=RobotRaconteurNode.s.UnpackStructureDispose<com.robotraconteur.testing.TestService2.ostruct2>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(m));
    return;
    }
    case "list_d1":
    {
    obj.list_d1=(List<double>)RobotRaconteurNode.s.UnpackListTypeDispose<double>(m.Data);
    return;
    }
    case "list_d3":
    {
    obj.list_d3=(List<double[]>)RobotRaconteurNode.s.UnpackListTypeDispose<double[]>(m.Data);
    return;
    }
    case "list_d5":
    {
    obj.list_d5=(List<MultiDimArray>)RobotRaconteurNode.s.UnpackListTypeDispose<MultiDimArray>(m.Data);
    return;
    }
    case "list_str1":
    {
    obj.list_str1=(List<string>)RobotRaconteurNode.s.UnpackListTypeDispose<string>(m.Data);
    return;
    }
    case "list_struct1":
    {
    obj.list_struct1=(List<teststruct2>)RobotRaconteurNode.s.UnpackListTypeDispose<teststruct2>(m.Data);
    return;
    }
    case "var1":
    {
    obj.var1=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var2":
    {
    obj.var2=(Dictionary<int,object>)RobotRaconteurNode.s.UnpackMapTypeDispose<int,object>(m.Data);
    return;
    }
    case "var_num":
    {
    obj.var_num=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_str":
    {
    obj.var_str=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_struct":
    {
    obj.var_struct=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_vector":
    {
    obj.var_vector=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_dictionary":
    {
    obj.var_dictionary=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_list":
    {
    obj.var_list=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "var_multidimarray":
    {
    obj.var_multidimarray=RobotRaconteurNode.s.UnpackVarTypeDispose(m);
    return;
    }
    case "errtest":
    {
    obj.errtest=(MessageElementUtil.CastDataAndDispose<double[]>(m))[0];
    return;
    }
    case "nulltest":
    {
    obj.nulltest=RobotRaconteurNode.s.UnpackStructureDispose<teststruct1>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "func1":
    {
    this.obj.func1();
    return new MessageElement("return",(int)0);
    }
    case "func2":
    {
    double d1=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d1")))[0];
    double d2=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d2")))[0];
    this.obj.func2(d1, d2);
    return new MessageElement("return",(int)0);
    }
    case "func3":
    {
    double d1=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d1")))[0];
    double d2=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d2")))[0];
    double rr_ret=this.obj.func3(d1, d2);
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {rr_ret});
    }
    case "meaning_of_life":
    {
    int rr_ret=this.obj.meaning_of_life();
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {rr_ret});
    }
    case "func_errtest":
    {
    this.obj.func_errtest();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest1":
    {
    this.obj.func_errtest1();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest2":
    {
    this.obj.func_errtest2();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest3":
    {
    this.obj.func_errtest3();
    return new MessageElement("return",(int)0);
    }
    case "o6_op":
    {
    int op=(MessageElementUtil.CastDataAndDispose<int[]>(vectorptr_messageelement_util.FindElement(rr_m,"op")))[0];
    this.obj.o6_op(op);
    return new MessageElement("return",(int)0);
    }
    case "pipe_check_error":
    {
    this.obj.pipe_check_error();
    return new MessageElement("return",(int)0);
    }
    case "test_callbacks":
    {
    this.obj.test_callbacks();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o1": {
    return obj.get_o1();
    }
    case "o2": {
    return obj.get_o2(Int32.Parse(ind));
    }
    case "o3": {
    return obj.get_o3(Int32.Parse(ind));
    }
    case "o4": {
    return obj.get_o4(ind);
    }
    case "o5": {
    return obj.get_o5();
    }
    case "o6": {
    return obj.get_o6();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1+=rr_ev1;
    obj.ev2+=rr_ev2;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1-=rr_ev1;
    obj.ev2-=rr_ev2;
    }
    public void rr_ev1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    this.innerskel.WrappedDispatchEvent("ev1",rr_param);
    }
    }
    public void rr_ev2(double d1, teststruct2 s2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("s2",RobotRaconteurNode.s.PackStructure(s2)));
    this.innerskel.WrappedDispatchEvent("ev2",rr_param);
    }
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    case "cb1": {
    return new Action( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb1",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    case "cb2": {
    return new Action<double, double>( delegate(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb2",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    case "cb3": {
    return new Func<double,double,double>( delegate(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d1",new double[] {d1}));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("d2",new double[] {d2}));
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb3",rr_endpoint,rr_param))
    {
    return (MessageElementUtil.CastDataAndDispose<double[]>(rr_me))[0];
    }
    }
    });
    }
    case "cb_meaning_of_life": {
    return new Func<int>( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb_meaning_of_life",rr_endpoint,rr_param))
    {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_me))[0];
    }
    }
    });
    }
    case "cb_errtest": {
    return new Action( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb_errtest",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.p1=new Pipe<double[]>(innerskel.GetPipe("p1"));
    obj.p2=new Pipe<teststruct2>(innerskel.GetPipe("p2"));
    obj.broadcastpipe=new Pipe<double>(innerskel.GetPipe("broadcastpipe"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.cb1=new CallbackServer<Action>("cb1",this);
    obj.cb2=new CallbackServer<Action<double, double>>("cb2",this);
    obj.cb3=new CallbackServer<Func<double,double,double>>("cb3",this);
    obj.cb_meaning_of_life=new CallbackServer<Func<int>>("cb_meaning_of_life",this);
    obj.cb_errtest=new CallbackServer<Action>("cb_errtest",this);
    }
    public override void InitWireServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.w1=new Wire<double[]>(innerskel.GetWire("w1"));
    obj.w2=new Wire<teststruct2>(innerskel.GetWire("w2"));
    obj.w3=new Wire<MultiDimArray>(innerskel.GetWire("w3"));
    obj.broadcastwire=new Wire<double>(innerskel.GetWire("broadcastwire"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    case "m1": {
    WrappedArrayMemoryDirectorNET<double> dir=new  WrappedArrayMemoryDirectorNET<double>(obj.m1);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    case "m2": {
    WrappedMultiDimArrayMemoryDirectorNET<double> dir=new  WrappedMultiDimArrayMemoryDirectorNET<double>(obj.m2);
    return dir;
    }
    case "m3": {
    WrappedMultiDimArrayMemoryDirectorNET<byte> dir=new  WrappedMultiDimArrayMemoryDirectorNET<byte>(obj.m3);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.testroot"; } }
}
public class sub1_skel : ServiceSkel {
    protected sub1 obj;
    public sub1_skel(object o) : base(o) { obj=(sub1)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "d1":
    {
    double[] ret=obj.d1;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "d2":
    {
    MultiDimArray ret=obj.d2;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackMultiDimArray((MultiDimArray)ret));
    }
    case "s_ind":
    {
    string ret=obj.s_ind;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i_ind":
    {
    int ret=obj.i_ind;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "d1":
    {
    obj.d1=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    case "d2":
    {
    obj.d2=RobotRaconteurNode.s.UnpackMultiDimArrayDispose(MessageElementUtil.CastDataAndDispose<MessageElementMultiDimArray>(m));
    return;
    }
    case "s_ind":
    {
    obj.s_ind=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "i_ind":
    {
    obj.i_ind=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o2_1": {
    return obj.get_o2_1();
    }
    case "o2_2": {
    return obj.get_o2_2(Int32.Parse(ind));
    }
    case "o2_3": {
    return obj.get_o2_3(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub1"; } }
}
public class sub2_skel : ServiceSkel {
    protected sub2 obj;
    public sub2_skel(object o) : base(o) { obj=(sub2)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "s_ind":
    {
    string ret=obj.s_ind;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i_ind":
    {
    int ret=obj.i_ind;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "data":
    {
    string ret=obj.data;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "s_ind":
    {
    obj.s_ind=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "i_ind":
    {
    obj.i_ind=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "data":
    {
    obj.data=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o3_1": {
    return obj.get_o3_1(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub2"; } }
}
public class sub3_skel : ServiceSkel {
    protected sub3 obj;
    public sub3_skel(object o) : base(o) { obj=(sub3)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "ind":
    {
    string ret=obj.ind;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "data2":
    {
    string ret=obj.data2;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "data3":
    {
    double ret=obj.data3;
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {ret});
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "ind":
    {
    obj.ind=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "data2":
    {
    obj.data2=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "data3":
    {
    obj.data3=(MessageElementUtil.CastDataAndDispose<double[]>(m))[0];
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "add":
    {
    double d=(MessageElementUtil.CastDataAndDispose<double[]>(vectorptr_messageelement_util.FindElement(rr_m,"d")))[0];
    double rr_ret=this.obj.add(d);
    return MessageElementUtil.NewMessageElementDispose("return",new double[] {rr_ret});
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub3"; } }
}
public static class RRExtensions{
    public static Task<double> async_get_d1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double> t=new RobotRaconteurTaskCompletion<double>();
    rr_obj.async_get_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d1(this async_testroot rr_obj, double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d2(this async_testroot rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d3(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d3(this async_testroot rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d4(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d4(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d4(this async_testroot rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d4(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<MultiDimArray> async_get_d5(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<MultiDimArray> t=new RobotRaconteurTaskCompletion<MultiDimArray>();
    rr_obj.async_get_d5(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d5(this async_testroot rr_obj, MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d5(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<MultiDimArray> async_get_d6(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<MultiDimArray> t=new RobotRaconteurTaskCompletion<MultiDimArray>();
    rr_obj.async_get_d6(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d6(this async_testroot rr_obj, MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d6(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<float> async_get_s1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<float> t=new RobotRaconteurTaskCompletion<float>();
    rr_obj.async_get_s1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_s1(this async_testroot rr_obj, float value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_s1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<float[]> async_get_s2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<float[]> t=new RobotRaconteurTaskCompletion<float[]>();
    rr_obj.async_get_s2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_s2(this async_testroot rr_obj, float[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_s2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<sbyte> async_get_i8_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sbyte> t=new RobotRaconteurTaskCompletion<sbyte>();
    rr_obj.async_get_i8_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i8_1(this async_testroot rr_obj, sbyte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i8_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<sbyte[]> async_get_i8_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sbyte[]> t=new RobotRaconteurTaskCompletion<sbyte[]>();
    rr_obj.async_get_i8_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i8_2(this async_testroot rr_obj, sbyte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i8_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<byte> async_get_u8_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<byte> t=new RobotRaconteurTaskCompletion<byte>();
    rr_obj.async_get_u8_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u8_1(this async_testroot rr_obj, byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u8_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<byte[]> async_get_u8_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<byte[]> t=new RobotRaconteurTaskCompletion<byte[]>();
    rr_obj.async_get_u8_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u8_2(this async_testroot rr_obj, byte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u8_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<MultiDimArray> async_get_u8_3(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<MultiDimArray> t=new RobotRaconteurTaskCompletion<MultiDimArray>();
    rr_obj.async_get_u8_3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u8_3(this async_testroot rr_obj, MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u8_3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<short> async_get_i16_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<short> t=new RobotRaconteurTaskCompletion<short>();
    rr_obj.async_get_i16_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i16_1(this async_testroot rr_obj, short value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i16_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<short[]> async_get_i16_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<short[]> t=new RobotRaconteurTaskCompletion<short[]>();
    rr_obj.async_get_i16_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i16_2(this async_testroot rr_obj, short[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i16_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<ushort> async_get_u16_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<ushort> t=new RobotRaconteurTaskCompletion<ushort>();
    rr_obj.async_get_u16_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u16_1(this async_testroot rr_obj, ushort value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u16_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<ushort[]> async_get_u16_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<ushort[]> t=new RobotRaconteurTaskCompletion<ushort[]>();
    rr_obj.async_get_u16_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u16_2(this async_testroot rr_obj, ushort[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u16_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_i32_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_i32_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i32_1(this async_testroot rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i32_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int[]> async_get_i32_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int[]> t=new RobotRaconteurTaskCompletion<int[]>();
    rr_obj.async_get_i32_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i32_2(this async_testroot rr_obj, int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i32_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int[]> async_get_i32_huge(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int[]> t=new RobotRaconteurTaskCompletion<int[]>();
    rr_obj.async_get_i32_huge(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i32_huge(this async_testroot rr_obj, int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i32_huge(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<uint> async_get_u32_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<uint> t=new RobotRaconteurTaskCompletion<uint>();
    rr_obj.async_get_u32_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u32_1(this async_testroot rr_obj, uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u32_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<uint[]> async_get_u32_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<uint[]> t=new RobotRaconteurTaskCompletion<uint[]>();
    rr_obj.async_get_u32_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u32_2(this async_testroot rr_obj, uint[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u32_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<long> async_get_i64_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<long> t=new RobotRaconteurTaskCompletion<long>();
    rr_obj.async_get_i64_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i64_1(this async_testroot rr_obj, long value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i64_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<long[]> async_get_i64_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<long[]> t=new RobotRaconteurTaskCompletion<long[]>();
    rr_obj.async_get_i64_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i64_2(this async_testroot rr_obj, long[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i64_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<ulong> async_get_u64_1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<ulong> t=new RobotRaconteurTaskCompletion<ulong>();
    rr_obj.async_get_u64_1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u64_1(this async_testroot rr_obj, ulong value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u64_1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<ulong[]> async_get_u64_2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<ulong[]> t=new RobotRaconteurTaskCompletion<ulong[]>();
    rr_obj.async_get_u64_2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_u64_2(this async_testroot rr_obj, ulong[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_u64_2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_str1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_str1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_str1(this async_testroot rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_str1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<teststruct1> async_get_struct1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<teststruct1> t=new RobotRaconteurTaskCompletion<teststruct1>();
    rr_obj.async_get_struct1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_struct1(this async_testroot rr_obj, teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_struct1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<teststruct2> async_get_struct2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<teststruct2> t=new RobotRaconteurTaskCompletion<teststruct2>();
    rr_obj.async_get_struct2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_struct2(this async_testroot rr_obj, teststruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_struct2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,double>> async_get_is_d1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,double>> t=new RobotRaconteurTaskCompletion<Dictionary<int,double>>();
    rr_obj.async_get_is_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d1(this async_testroot rr_obj, Dictionary<int,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<string,double>> async_get_is_d2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<string,double>> t=new RobotRaconteurTaskCompletion<Dictionary<string,double>>();
    rr_obj.async_get_is_d2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d2(this async_testroot rr_obj, Dictionary<string,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,double[]>> async_get_is_d3(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,double[]>> t=new RobotRaconteurTaskCompletion<Dictionary<int,double[]>>();
    rr_obj.async_get_is_d3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d3(this async_testroot rr_obj, Dictionary<int,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<string,double[]>> async_get_is_d4(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<string,double[]>> t=new RobotRaconteurTaskCompletion<Dictionary<string,double[]>>();
    rr_obj.async_get_is_d4(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d4(this async_testroot rr_obj, Dictionary<string,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d4(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,MultiDimArray>> async_get_is_d5(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,MultiDimArray>> t=new RobotRaconteurTaskCompletion<Dictionary<int,MultiDimArray>>();
    rr_obj.async_get_is_d5(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d5(this async_testroot rr_obj, Dictionary<int,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d5(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<string,MultiDimArray>> async_get_is_d6(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<string,MultiDimArray>> t=new RobotRaconteurTaskCompletion<Dictionary<string,MultiDimArray>>();
    rr_obj.async_get_is_d6(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_d6(this async_testroot rr_obj, Dictionary<string,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_d6(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,string>> async_get_is_str1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,string>> t=new RobotRaconteurTaskCompletion<Dictionary<int,string>>();
    rr_obj.async_get_is_str1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_str1(this async_testroot rr_obj, Dictionary<int,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_str1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<string,string>> async_get_is_str2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<string,string>> t=new RobotRaconteurTaskCompletion<Dictionary<string,string>>();
    rr_obj.async_get_is_str2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_str2(this async_testroot rr_obj, Dictionary<string,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_str2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,teststruct2>> async_get_is_struct1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,teststruct2>> t=new RobotRaconteurTaskCompletion<Dictionary<int,teststruct2>>();
    rr_obj.async_get_is_struct1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_struct1(this async_testroot rr_obj, Dictionary<int,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_struct1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<string,teststruct2>> async_get_is_struct2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<string,teststruct2>> t=new RobotRaconteurTaskCompletion<Dictionary<string,teststruct2>>();
    rr_obj.async_get_is_struct2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_is_struct2(this async_testroot rr_obj, Dictionary<string,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_is_struct2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<com.robotraconteur.testing.TestService2.ostruct2> async_get_struct3(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService2.ostruct2> t=new RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService2.ostruct2>();
    rr_obj.async_get_struct3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_struct3(this async_testroot rr_obj, com.robotraconteur.testing.TestService2.ostruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_struct3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<List<double>> async_get_list_d1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<List<double>> t=new RobotRaconteurTaskCompletion<List<double>>();
    rr_obj.async_get_list_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_list_d1(this async_testroot rr_obj, List<double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_list_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<List<double[]>> async_get_list_d3(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<List<double[]>> t=new RobotRaconteurTaskCompletion<List<double[]>>();
    rr_obj.async_get_list_d3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_list_d3(this async_testroot rr_obj, List<double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_list_d3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<List<MultiDimArray>> async_get_list_d5(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<List<MultiDimArray>> t=new RobotRaconteurTaskCompletion<List<MultiDimArray>>();
    rr_obj.async_get_list_d5(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_list_d5(this async_testroot rr_obj, List<MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_list_d5(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<List<string>> async_get_list_str1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<List<string>> t=new RobotRaconteurTaskCompletion<List<string>>();
    rr_obj.async_get_list_str1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_list_str1(this async_testroot rr_obj, List<string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_list_str1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<List<teststruct2>> async_get_list_struct1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<List<teststruct2>> t=new RobotRaconteurTaskCompletion<List<teststruct2>>();
    rr_obj.async_get_list_struct1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_list_struct1(this async_testroot rr_obj, List<teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_list_struct1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var1(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var1(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<Dictionary<int,object>> async_get_var2(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Dictionary<int,object>> t=new RobotRaconteurTaskCompletion<Dictionary<int,object>>();
    rr_obj.async_get_var2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var2(this async_testroot rr_obj, Dictionary<int,object> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_num(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_num(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_num(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_num(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_str(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_str(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_str(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_str(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_struct(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_struct(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_struct(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_struct(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_vector(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_vector(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_vector(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_vector(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_dictionary(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_dictionary(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_dictionary(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_dictionary(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_list(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_list(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_list(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_list(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<object> async_get_var_multidimarray(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_var_multidimarray(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_var_multidimarray(this async_testroot rr_obj, object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_var_multidimarray(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double> async_get_errtest(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double> t=new RobotRaconteurTaskCompletion<double>();
    rr_obj.async_get_errtest(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_errtest(this async_testroot rr_obj, double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_errtest(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<teststruct1> async_get_nulltest(this async_testroot rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<teststruct1> t=new RobotRaconteurTaskCompletion<teststruct1>();
    rr_obj.async_get_nulltest(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_nulltest(this async_testroot rr_obj, teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_nulltest(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_func1(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func1(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_func2(this async_testroot rr_obj,double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func2(d1, d2,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<double> async_func3(this async_testroot rr_obj,double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double> rr_t=new RobotRaconteurTaskCompletion<double>();
    rr_obj.async_func3(d1, d2,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<int> async_meaning_of_life(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> rr_t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_meaning_of_life(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_func_errtest(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func_errtest(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_func_errtest1(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func_errtest1(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_func_errtest2(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func_errtest2(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_func_errtest3(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_func_errtest3(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_o6_op(this async_testroot rr_obj,int op,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_o6_op(op,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_pipe_check_error(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_pipe_check_error(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task async_test_callbacks(this async_testroot rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_test_callbacks(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<sub1> async_get_o1(this async_testroot rr_obj, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub1> t=new RobotRaconteurTaskCompletion<sub1>();
    rr_obj.async_get_o1(t.handler,timeout);
    return t.Task;
    }
    public static Task<sub1> async_get_o2(this async_testroot rr_obj, int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub1> t=new RobotRaconteurTaskCompletion<sub1>();
    rr_obj.async_get_o2(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<sub1> async_get_o3(this async_testroot rr_obj, int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub1> t=new RobotRaconteurTaskCompletion<sub1>();
    rr_obj.async_get_o3(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<sub1> async_get_o4(this async_testroot rr_obj, string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub1> t=new RobotRaconteurTaskCompletion<sub1>();
    rr_obj.async_get_o4(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<com.robotraconteur.testing.TestService2.subobj> async_get_o5(this async_testroot rr_obj, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService2.subobj> t=new RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService2.subobj>();
    rr_obj.async_get_o5(t.handler,timeout);
    return t.Task;
    }
    public static Task<object> async_get_o6(this async_testroot rr_obj, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<object> t=new RobotRaconteurTaskCompletion<object>();
    rr_obj.async_get_o6(t.handler,timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d1(this async_sub1 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d1(this async_sub1 rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<MultiDimArray> async_get_d2(this async_sub1 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<MultiDimArray> t=new RobotRaconteurTaskCompletion<MultiDimArray>();
    rr_obj.async_get_d2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d2(this async_sub1 rr_obj, MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_s_ind(this async_sub1 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_s_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_s_ind(this async_sub1 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_s_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_i_ind(this async_sub1 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_i_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i_ind(this async_sub1 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<sub2> async_get_o2_1(this async_sub1 rr_obj, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub2> t=new RobotRaconteurTaskCompletion<sub2>();
    rr_obj.async_get_o2_1(t.handler,timeout);
    return t.Task;
    }
    public static Task<sub2> async_get_o2_2(this async_sub1 rr_obj, int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub2> t=new RobotRaconteurTaskCompletion<sub2>();
    rr_obj.async_get_o2_2(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<sub2> async_get_o2_3(this async_sub1 rr_obj, string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub2> t=new RobotRaconteurTaskCompletion<sub2>();
    rr_obj.async_get_o2_3(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<string> async_get_s_ind(this async_sub2 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_s_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_s_ind(this async_sub2 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_s_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_i_ind(this async_sub2 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_i_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i_ind(this async_sub2 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_data(this async_sub2 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_data(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_data(this async_sub2 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_data(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<sub3> async_get_o3_1(this async_sub2 rr_obj, string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<sub3> t=new RobotRaconteurTaskCompletion<sub3>();
    rr_obj.async_get_o3_1(ind,t.handler,timeout);
    return t.Task;
    }
    public static Task<string> async_get_ind(this async_sub3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_ind(this async_sub3 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_data2(this async_sub3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_data2(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_data2(this async_sub3 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_data2(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double> async_get_data3(this async_sub3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double> t=new RobotRaconteurTaskCompletion<double>();
    rr_obj.async_get_data3(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_data3(this async_sub3 rr_obj, double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_data3(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double> async_add(this async_sub3 rr_obj,double d,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double> rr_t=new RobotRaconteurTaskCompletion<double>();
    rr_obj.async_add(d,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
}
}
