//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService3
{
public class com__robotraconteur__testing__TestService3Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="service com.robotraconteur.testing.TestService3\n\nstdver 0.9.0\n#option version 0.9.0\n\nimport com.robotraconteur.testing.TestService1\nusing  com.robotraconteur.testing.TestService1.testroot\nusing  com.robotraconteur.testing.TestService1.teststruct1\nusing  com.robotraconteur.testing.TestService1.teststruct2\nusing  com.robotraconteur.testing.TestService1.testexception1\nusing  com.robotraconteur.testing.TestService1.sub2\nusing  com.robotraconteur.testing.TestService1.sub3\n\nenum testenum1\nvalue1 = 0,	value2,	value3,	anothervalue = -1,\nanothervalue2 = -2,\nanothervalue3 = -3,\nhexval1 = 0x10,\nhexval2,\nneghexval1 = 0x80000005,\nneghexval2,\nmore_values\nend enum\n\nconstant string strconst \"This is a\\n \\\"string constant\\\" \\\\\\/\\b\\f \\r\\u00FF tabme\\ttabme\\n smile! \\ud83d\\udE01\"\nconstant int32 int32const 3856384\nconstant int32[] int32const_array {182476, 56483, -2947}\nconstant double[] doubleconst_array {1.5847, 3.14, -548e3, 3452.67e2, 485e-21}\nconstant struct structconst {field1: strconst, field2: int32const_array}\nconstant struct structconst2 {field3: structconst, field4: int32const}\n\ncstruct testcstruct1\nfield double d1\nfield double[6] d2\nfield double[6-] d3\nfield double[3,3] d4\nfield testcstruct2 s1\nfield testcstruct2[8] s2\nfield testcstruct2[9-] s3\nfield testcstruct2[2,4] s4\nend cstruct\n\ncstruct testcstruct2\nfield int8 i1\nfield int8[15] i2\nfield int8[17-] i3\nend cstruct\n\nstruct teststruct3\nfield testcstruct1 s1\nfield testcstruct1[] s2\nfield testcstruct1[11] s3\nfield testcstruct1[16-] s4\nfield testcstruct1[3,3] s5\nfield testcstruct1[*] s6\nfield testcstruct1{list} s7\nfield testcstruct1[]{list} s8\nfield testcstruct1[*]{list} s9\nfield varvalue s10\nfield varvalue s11\nfield varvalue s12\nfield varvalue s13\nfield varvalue s14\nfield varvalue s15\nend struct\n\nobject testroot3\nproperty int32 readme [readonly]\nproperty int32 writeme [writeonly]\n\npipe int32 unreliable1 [unreliable,readonly]\noption pipe unreliable2 unreliable\npipe int32 unreliable2\n\nwire int32 peekwire [readonly]\nwire int32 \\\npokewire [writeonly]\nproperty int32 unknown_modifier [unknown, unknown2(), unknown_3(23, 45.8e-5, hello, \"world\")]\n\nmemory double[] readmem [readonly]\n\nobjref obj4 o4\n\nproperty testenum1 testenum1_prop\n\nproperty testcstruct1 testcstruct1_prop\nfunction void testcstruct1_func1(testcstruct1 s)\nfunction testcstruct1 testcstruct1_func2()\n\nproperty teststruct3 teststruct3_prop\n\nmemory testcstruct2[] cstruct_m1\nmemory testcstruct2[*] cstruct_m2\n\nfunction double{generator} gen_func1()\nfunction uint8[]{generator} gen_func2(string name)\nfunction void gen_func3(string name, uint8[]{generator} in)\nfunction uint8[]{generator} gen_func4(uint8[]{generator} in)\nfunction teststruct2{generator} gen_func5(teststruct2{generator} in)\n\nend object\n\nobject obj1\nproperty double[] d1\nend object\n\nobject obj2\nimplements obj1\nproperty double[] d1\nend object\n\nobject obj3\nimplements obj1\nimplements obj2\nproperty double[] d1\nend object\n\nobject obj4\nimplements sub2\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.testing.TestService3";}
    public teststruct3_stub teststruct3_stubentry;
    public testcstruct1_stub testcstruct1_stubentry;
    public testcstruct2_stub testcstruct2_stubentry;
    public com__robotraconteur__testing__TestService3Factory()
{
    teststruct3_stubentry=new teststruct3_stub(this);
    testcstruct1_stubentry=new testcstruct1_stub(this);
    testcstruct2_stubentry=new testcstruct2_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="teststruct3")    return teststruct3_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override ICStructureStub FindCStructureStub(string objecttype)
    {
    if (objecttype=="testcstruct1")    return testcstruct1_stubentry;
    if (objecttype=="testcstruct2")    return testcstruct2_stubentry;
    throw new DataTypeException("Cannot find appropriate cstructure stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "testroot3":
    return new testroot3_stub(innerstub);
    case "obj1":
    return new obj1_stub(innerstub);
    case "obj2":
    return new obj2_stub(innerstub);
    case "obj3":
    return new obj3_stub(innerstub);
    case "obj4":
    return new obj4_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "testroot3":
    return new testroot3_skel((testroot3)obj);
    case "obj1":
    return new obj1_skel((obj1)obj);
    case "obj2":
    return new obj2_skel((obj2)obj);
    case "obj3":
    return new obj3_skel((obj3)obj);
    case "obj4":
    return new obj4_skel((obj4)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class teststruct3_stub : IStructureStub {
    public teststruct3_stub(com__robotraconteur__testing__TestService3Factory d) {def=d;}
    private com__robotraconteur__testing__TestService3Factory def;
    public MessageElementStructure PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    teststruct3 s = (teststruct3)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s1",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref s.s1)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s2",RobotRaconteurNode.s.PackCStructureArray<testcstruct1>(s.s2)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s3",RobotRaconteurNode.s.PackCStructureArray<testcstruct1>(s.s3)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s4",RobotRaconteurNode.s.PackCStructureArray<testcstruct1>(s.s4)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s5",RobotRaconteurNode.s.PackCStructureMultiDimArray<testcstruct1>(s.s5)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s6",RobotRaconteurNode.s.PackCStructureMultiDimArray<testcstruct1>(s.s6)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s7",RobotRaconteurNode.s.PackListType<testcstruct1>(s.s7)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s8",RobotRaconteurNode.s.PackListType<testcstruct1[]>(s.s8)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s9",RobotRaconteurNode.s.PackListType<CStructureMultiDimArray>(s.s9)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s10",RobotRaconteurNode.s.PackVarType(s.s10)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s11",RobotRaconteurNode.s.PackVarType(s.s11)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s12",RobotRaconteurNode.s.PackVarType(s.s12)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s13",RobotRaconteurNode.s.PackVarType(s.s13)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s14",RobotRaconteurNode.s.PackVarType(s.s14)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s15",RobotRaconteurNode.s.PackVarType(s.s15)));
    return new MessageElementStructure("com.robotraconteur.testing.TestService3.teststruct3",m);
    }
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    teststruct3 s=new teststruct3();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.s1 =RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s1")));
    s.s2 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s2")));
    s.s3 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s3")));
    s.s4 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s4")));
    s.s5 =RobotRaconteurNode.s.UnpackCStructureMultiDimArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureMultiDimArray>(MessageElement.FindElement(mm,"s5")));
    s.s6 =RobotRaconteurNode.s.UnpackCStructureMultiDimArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureMultiDimArray>(MessageElement.FindElement(mm,"s6")));
    s.s7 =(List<testcstruct1>)RobotRaconteurNode.s.UnpackListTypeDispose<testcstruct1>(MessageElement.FindElement(mm,"s7").Data);
    s.s8 =(List<testcstruct1[]>)RobotRaconteurNode.s.UnpackListTypeDispose<testcstruct1[]>(MessageElement.FindElement(mm,"s8").Data);
    s.s9 =(List<CStructureMultiDimArray>)RobotRaconteurNode.s.UnpackListTypeDispose<CStructureMultiDimArray>(MessageElement.FindElement(mm,"s9").Data);
    s.s10 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s10"));
    s.s11 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s11"));
    s.s12 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s12"));
    s.s13 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s13"));
    s.s14 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s14"));
    s.s15 =RobotRaconteurNode.s.UnpackVarTypeDispose(MessageElement.FindElement(mm,"s15"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class testcstruct1_stub : CStructureStub<testcstruct1> {
    public testcstruct1_stub(com__robotraconteur__testing__TestService3Factory d) {def=d;}
    private com__robotraconteur__testing__TestService3Factory def;
    public override MessageElementCStructure PackCStructure(ref testcstruct1 s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    testcstruct1 s = (testcstruct1)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("d1",new double[] {s.d1}));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("d2",s.d2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("d3",s.d3));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("d4",s.d4));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s1",RobotRaconteurNode.s.PackCStructureToArray<testcstruct2>(ref s.s1)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s2",RobotRaconteurNode.s.PackCStructureArray<testcstruct2>(s.s2)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s3",RobotRaconteurNode.s.PackCStructureArray<testcstruct2>(s.s3)));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("s4",RobotRaconteurNode.s.PackCStructureArray<testcstruct2>(s.s4)));
    return new MessageElementCStructure(m);
    }
    }
    public override testcstruct1 UnpackCStructure(MessageElementCStructure m) {
    if (m == null ) throw new NullReferenceException("CStructure must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    testcstruct1 s = new testcstruct1();
    s.d1 =(MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"d1")))[0];
    s.d2 =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"d2"));
    s.d3 =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"d3"));
    s.d4 =MessageElementUtil.CastDataAndDispose<double[]>(MessageElement.FindElement(mm,"d4"));
    s.s1 =RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct2>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s1")));
    s.s2 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct2>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s2")));
    s.s3 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct2>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s3")));
    s.s4 =RobotRaconteurNode.s.UnpackCStructureArrayDispose<testcstruct2>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(MessageElement.FindElement(mm,"s4")));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testcstruct1"; } }}

public class testcstruct2_stub : CStructureStub<testcstruct2> {
    public testcstruct2_stub(com__robotraconteur__testing__TestService3Factory d) {def=d;}
    private com__robotraconteur__testing__TestService3Factory def;
    public override MessageElementCStructure PackCStructure(ref testcstruct2 s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    testcstruct2 s = (testcstruct2)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("i1",new sbyte[] {s.i1}));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("i2",s.i2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.NewMessageElementDispose("i3",s.i3));
    return new MessageElementCStructure(m);
    }
    }
    public override testcstruct2 UnpackCStructure(MessageElementCStructure m) {
    if (m == null ) throw new NullReferenceException("CStructure must not be null");
    using(vectorptr_messageelement mm=m.Elements)
    {
    testcstruct2 s = new testcstruct2();
    s.i1 =(MessageElementUtil.CastDataAndDispose<sbyte[]>(MessageElement.FindElement(mm,"i1")))[0];
    s.i2 =MessageElementUtil.CastDataAndDispose<sbyte[]>(MessageElement.FindElement(mm,"i2"));
    s.i3 =MessageElementUtil.CastDataAndDispose<sbyte[]>(MessageElement.FindElement(mm,"i3"));
    return s;
    }
    }
    public override string TypeName { get { return "com.robotraconteur.testing.TestService3.testcstruct2"; } }}

public interface async_testroot3
{
    void async_get_readme(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_readme(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_writeme(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_writeme(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_unknown_modifier(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_unknown_modifier(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_testenum1_prop(Action<testenum1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_testenum1_prop(testenum1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_testcstruct1_prop(Action<testcstruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_testcstruct1_prop(testcstruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_teststruct3_prop(Action<teststruct3,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_teststruct3_prop(teststruct3 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_testcstruct1_func1(testcstruct1 s,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_testcstruct1_func2(Action<testcstruct1,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_gen_func1(Action<Generator2<double>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_gen_func2(string name,Action<Generator2<byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_gen_func3(string name,Action<Generator3<byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_gen_func4(Action<Generator1<byte[],byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_gen_func5(Action<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o4(Action<obj4,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class testroot3_stub : ServiceStub , testroot3, async_testroot3{
    private Pipe<int> rr_unreliable1;
    private Pipe<int> rr_unreliable2;
    private Wire<int> rr_peekwire;
    private Wire<int> rr_pokewire;
    private ArrayMemory<double> rr_readmem;
    private CStructureArrayMemory<testcstruct2> rr_cstruct_m1;
    private CStructureMultiDimArrayMemory<testcstruct2> rr_cstruct_m2;
    public testroot3_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_unreliable1=new Pipe<int>(innerstub.GetPipe("unreliable1"));
    rr_unreliable2=new Pipe<int>(innerstub.GetPipe("unreliable2"));
    rr_peekwire=new Wire<int>(innerstub.GetWire("peekwire"));
    rr_pokewire=new Wire<int>(innerstub.GetWire("pokewire"));
    rr_readmem=new ArrayMemoryClient<double>(innerstub.GetArrayMemory("readmem"));
    rr_cstruct_m1=new CStructureArrayMemoryClient<testcstruct2>(innerstub.GetCStructureArrayMemory("cstruct_m1"));
    rr_cstruct_m2=new CStructureMultiDimArrayMemoryClient<testcstruct2>(innerstub.GetCStructureMultiDimArrayMemory("cstruct_m2"));
    }
    public int readme {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("readme")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("readme", m);
    }
    }
    }
    public int writeme {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("writeme")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("writeme", m);
    }
    }
    }
    public int unknown_modifier {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("unknown_modifier")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("unknown_modifier", m);
    }
    }
    }
    public testenum1 testenum1_prop {
    get {
    return ((testenum1)(MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("testenum1_prop")))[0]);
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {((int)value)}))
    {
    rr_innerstub.PropertySet("testenum1_prop", m);
    }
    }
    }
    public testcstruct1 testcstruct1_prop {
    get {
    return RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(rr_innerstub.PropertyGet("testcstruct1_prop")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref value)))
    {
    rr_innerstub.PropertySet("testcstruct1_prop", m);
    }
    }
    }
    public teststruct3 teststruct3_prop {
    get {
    return RobotRaconteurNode.s.UnpackStructureDispose<teststruct3>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(rr_innerstub.PropertyGet("teststruct3_prop")));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_innerstub.PropertySet("teststruct3_prop", m);
    }
    }
    }
    public void testcstruct1_func1(testcstruct1 s) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("s",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref s)));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("testcstruct1_func1",rr_param))
    {
    }
    }
    }
    public testcstruct1 testcstruct1_func2() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("testcstruct1_func2",rr_param))
    {
    return RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(rr_me));
    }
    }
    }
    public Generator2<double> gen_func1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("gen_func1",rr_param);
    return new Generator2Client<double>(generator_client);
    }
    }
    public Generator2<byte[]> gen_func2(string name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("name",name));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("gen_func2",rr_param);
    return new Generator2Client<byte[]>(generator_client);
    }
    }
    public Generator3<byte[]> gen_func3(string name) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("name",name));
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("gen_func3",rr_param);
    return new Generator3Client<byte[]>(generator_client);
    }
    }
    public Generator1<byte[],byte[]> gen_func4() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("gen_func4",rr_param);
    return new Generator1Client<byte[],byte[]>(generator_client);
    }
    }
    public Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> gen_func5() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    WrappedGeneratorClient generator_client = rr_innerstub.GeneratorFunctionCall("gen_func5",rr_param);
    return new Generator1Client<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>(generator_client);
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public obj4 get_o4() {
    return (obj4)FindObjRefTyped("o4","com.robotraconteur.testing.TestService3.obj4");
    }
    public Pipe<int> unreliable1 {
    get { return rr_unreliable1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<int> unreliable2 {
    get { return rr_unreliable2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> peekwire {
    get { return rr_peekwire;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<int> pokewire {
    get { return rr_pokewire;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public ArrayMemory<double> readmem { 
    get { return rr_readmem; }
    set { throw new InvalidOperationException();}
    }
    public CStructureArrayMemory<testcstruct2> cstruct_m1 { 
    get { return rr_cstruct_m1; }
    set { throw new InvalidOperationException();}
    }
    public CStructureMultiDimArrayMemory<testcstruct2> cstruct_m2 {
    get { return rr_cstruct_m2; }
    set { throw new InvalidOperationException();}
    }
    public virtual void async_get_readme(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("readme",rrend_async_get_readme,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_readme(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_readme(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("readme",mm,rrend_async_set_readme,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_readme(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_writeme(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("writeme",rrend_async_get_writeme,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_writeme(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_writeme(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("writeme",mm,rrend_async_set_writeme,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_writeme(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_unknown_modifier(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("unknown_modifier",rrend_async_get_unknown_modifier,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_unknown_modifier(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_unknown_modifier(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("unknown_modifier",mm,rrend_async_set_unknown_modifier,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_unknown_modifier(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_testenum1_prop(Action<testenum1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("testenum1_prop",rrend_async_get_testenum1_prop,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_testenum1_prop(MessageElement value ,Exception err,object param)
    {
    Action<testenum1,Exception> rr_handler=(Action<testenum1,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(testenum1),err);
    return;
    }
    testenum1 rr_ret;
    try {
    rr_ret=((testenum1)(MessageElementUtil.CastDataAndDispose<int[]>(value))[0]);
    } catch (Exception err2) {
    rr_handler(default(testenum1),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_testenum1_prop(testenum1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {((int)value)}))
    {
    rr_async_PropertySet("testenum1_prop",mm,rrend_async_set_testenum1_prop,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_testenum1_prop(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_testcstruct1_prop(Action<testcstruct1,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("testcstruct1_prop",rrend_async_get_testcstruct1_prop,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_testcstruct1_prop(MessageElement value ,Exception err,object param)
    {
    Action<testcstruct1,Exception> rr_handler=(Action<testcstruct1,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(testcstruct1),err);
    return;
    }
    testcstruct1 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(value));
    } catch (Exception err2) {
    rr_handler(default(testcstruct1),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_testcstruct1_prop(testcstruct1 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref value)))
    {
    rr_async_PropertySet("testcstruct1_prop",mm,rrend_async_set_testcstruct1_prop,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_testcstruct1_prop(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_teststruct3_prop(Action<teststruct3,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("teststruct3_prop",rrend_async_get_teststruct3_prop,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_teststruct3_prop(MessageElement value ,Exception err,object param)
    {
    Action<teststruct3,Exception> rr_handler=(Action<teststruct3,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(teststruct3),err);
    return;
    }
    teststruct3 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackStructureDispose<teststruct3>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(value));
    } catch (Exception err2) {
    rr_handler(default(teststruct3),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_teststruct3_prop(teststruct3 value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",RobotRaconteurNode.s.PackStructure(value)))
    {
    rr_async_PropertySet("teststruct3_prop",mm,rrend_async_set_teststruct3_prop,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_teststruct3_prop(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_testcstruct1_func1(testcstruct1 s,Action<Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("s",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref s)));
    rr_async_FunctionCall("testcstruct1_func1",rr_param,rrend_async_testcstruct1_func1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_testcstruct1_func1(MessageElement ret ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_testcstruct1_func2(Action<testcstruct1,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_FunctionCall("testcstruct1_func2",rr_param,rrend_async_testcstruct1_func2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_testcstruct1_func2(MessageElement ret ,Exception err,object param)
    {
    Action<testcstruct1,Exception> rr_handler=(Action<testcstruct1,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(testcstruct1),err);
    return;
    }
    testcstruct1 rr_ret;
    try {
    rr_ret=RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(ret));
    } catch (Exception err2) {
    rr_handler(default(testcstruct1),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_gen_func1(Action<Generator2<double>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_GeneratorFunctionCall("gen_func1",rr_param,rrend_async_gen_func1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_gen_func1(WrappedGeneratorClient ret ,Exception err,object param)
    {
    Action<Generator2<double>,Exception> rr_handler=(Action<Generator2<double>,Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    Generator2Client< double> rr_ret=new Generator2Client< double>(ret);
    rr_handler(rr_ret,null);
    }
    public virtual void async_gen_func2(string name,Action<Generator2<byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("name",name));
    rr_async_GeneratorFunctionCall("gen_func2",rr_param,rrend_async_gen_func2,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_gen_func2(WrappedGeneratorClient ret ,Exception err,object param)
    {
    Action<Generator2<byte[]>,Exception> rr_handler=(Action<Generator2<byte[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    Generator2Client< byte[]> rr_ret=new Generator2Client< byte[]>(ret);
    rr_handler(rr_ret,null);
    }
    public virtual void async_gen_func3(string name,Action<Generator3<byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.NewMessageElementDispose("name",name));
    rr_async_GeneratorFunctionCall("gen_func3",rr_param,rrend_async_gen_func3,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_gen_func3(WrappedGeneratorClient ret ,Exception err,object param)
    {
    Action<Generator3<byte[]>,Exception> rr_handler=(Action<Generator3<byte[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    Generator3Client< byte[]> rr_ret=new Generator3Client< byte[]>(ret);
    rr_handler(rr_ret,null);
    }
    public virtual void async_gen_func4(Action<Generator1<byte[],byte[]>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_GeneratorFunctionCall("gen_func4",rr_param,rrend_async_gen_func4,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_gen_func4(WrappedGeneratorClient ret ,Exception err,object param)
    {
    Action<Generator1<byte[],byte[]>,Exception> rr_handler=(Action<Generator1<byte[],byte[]>,Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    Generator1Client< byte[],byte[]> rr_ret=new Generator1Client< byte[],byte[]>(ret);
    rr_handler(rr_ret,null);
    }
    public virtual void async_gen_func5(Action<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>,Exception> rr_handler,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    rr_async_GeneratorFunctionCall("gen_func5",rr_param,rrend_async_gen_func5,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_gen_func5(WrappedGeneratorClient ret ,Exception err,object param)
    {
    Action<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>,Exception> rr_handler=(Action<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>,Exception>)param;
    if (err!=null)
    {
    rr_handler(null,err);
    return;
    }
    Generator1Client< com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> rr_ret=new Generator1Client< com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>(ret);
    rr_handler(rr_ret,null);
    }
    public void async_get_o4(Action<obj4,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o4","com.robotraconteur.testing.TestService3.obj4",handler,timeout);
    }
}
public interface async_obj1
{
    void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class obj1_stub : ServiceStub , obj1, async_obj1{
    public obj1_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public double[] d1 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d1",rrend_async_get_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d1(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d1",mm,rrend_async_set_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
}
public interface async_obj2 : async_obj1
{
    void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class obj2_stub : ServiceStub , obj2, async_obj2{
    public obj2_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public double[] d1 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d1",rrend_async_get_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d1(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d1",mm,rrend_async_set_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
}
public interface async_obj3 : async_obj1, async_obj2
{
    void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class obj3_stub : ServiceStub , obj3, async_obj3{
    public obj3_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public double[] d1 {
    get {
    return MessageElementUtil.CastDataAndDispose<double[]>(rr_innerstub.PropertyGet("d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_d1(Action<double[],Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("d1",rrend_async_get_d1,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_d1(MessageElement value ,Exception err,object param)
    {
    Action<double[],Exception> rr_handler=(Action<double[],Exception>)param;
    if (err!=null)
    {
    rr_handler(default(double[]),err);
    return;
    }
    double[] rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<double[]>(value);
    } catch (Exception err2) {
    rr_handler(default(double[]),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_d1(double[] value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("d1",mm,rrend_async_set_d1,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_d1(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
}
public interface async_obj4 : com.robotraconteur.testing.TestService1.async_sub2
{
    void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_data(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_set_data(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    void async_get_o3_1(string ind, Action<com.robotraconteur.testing.TestService1.sub3,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class obj4_stub : ServiceStub , obj4, async_obj4{
    public obj4_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string s_ind {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("s_ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("s_ind", m);
    }
    }
    }
    public int i_ind {
    get {
    return (MessageElementUtil.CastDataAndDispose<int[]>(rr_innerstub.PropertyGet("i_ind")))[0];
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_innerstub.PropertySet("i_ind", m);
    }
    }
    }
    public string data {
    get {
    return MessageElementUtil.CastDataAndDispose<string>(rr_innerstub.PropertyGet("data"));
    }
    set {
    using(MessageElement m=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_innerstub.PropertySet("data", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public com.robotraconteur.testing.TestService1.sub3 get_o3_1(string ind) {
    return (com.robotraconteur.testing.TestService1.sub3)FindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual void async_get_s_ind(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("s_ind",rrend_async_get_s_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_s_ind(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_s_ind(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("s_ind",mm,rrend_async_set_s_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_s_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_i_ind(Action<int,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("i_ind",rrend_async_get_i_ind,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_i_ind(MessageElement value ,Exception err,object param)
    {
    Action<int,Exception> rr_handler=(Action<int,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(int),err);
    return;
    }
    int rr_ret;
    try {
    rr_ret=(MessageElementUtil.CastDataAndDispose<int[]>(value))[0];
    } catch (Exception err2) {
    rr_handler(default(int),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_i_ind(int value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",new int[] {value}))
    {
    rr_async_PropertySet("i_ind",mm,rrend_async_set_i_ind,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_i_ind(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public virtual void async_get_data(Action<string,Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    rr_async_PropertyGet("data",rrend_async_get_data,rr_handler,rr_timeout);
    }
    protected virtual void rrend_async_get_data(MessageElement value ,Exception err,object param)
    {
    Action<string,Exception> rr_handler=(Action<string,Exception>)param;
    if (err!=null)
    {
    rr_handler(default(string),err);
    return;
    }
    string rr_ret;
    try {
    rr_ret=MessageElementUtil.CastDataAndDispose<string>(value);
    } catch (Exception err2) {
    rr_handler(default(string),err2);
    return;
    }
    rr_handler(rr_ret,null);
    }
    public virtual void async_set_data(string value, Action<Exception> rr_handler, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.NewMessageElementDispose("value",value))
    {
    rr_async_PropertySet("data",mm,rrend_async_set_data,rr_handler,rr_timeout);
    }
    }
    protected virtual void rrend_async_set_data(MessageElement m ,Exception err,object param)
    {
    Action<Exception> rr_handler=(Action<Exception>)param;
    if (err!=null)
    {
    rr_handler(err);
    return;
    }
    rr_handler(null);
    }
    public void async_get_o3_1(string ind, Action<com.robotraconteur.testing.TestService1.sub3,Exception> handler, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    AsyncFindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3",handler,timeout);
    }
}
public class testroot3_skel : ServiceSkel {
    protected testroot3 obj;
    public testroot3_skel(object o) : base(o) { obj=(testroot3)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "readme":
    {
    int ret=obj.readme;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "writeme":
    {
    int ret=obj.writeme;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "unknown_modifier":
    {
    int ret=obj.unknown_modifier;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "testenum1_prop":
    {
    testenum1 ret=obj.testenum1_prop;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {((int)ret)});
    }
    case "testcstruct1_prop":
    {
    testcstruct1 ret=obj.testcstruct1_prop;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref ret));
    }
    case "teststruct3_prop":
    {
    teststruct3 ret=obj.teststruct3_prop;
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackStructure(ret));
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "readme":
    {
    obj.readme=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "writeme":
    {
    obj.writeme=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "unknown_modifier":
    {
    obj.unknown_modifier=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "testenum1_prop":
    {
    obj.testenum1_prop=((testenum1)(MessageElementUtil.CastDataAndDispose<int[]>(m))[0]);
    return;
    }
    case "testcstruct1_prop":
    {
    obj.testcstruct1_prop=RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(m));
    return;
    }
    case "teststruct3_prop":
    {
    obj.teststruct3_prop=RobotRaconteurNode.s.UnpackStructureDispose<teststruct3>(MessageElementUtil.CastDataAndDispose<MessageElementStructure>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "testcstruct1_func1":
    {
    testcstruct1 s=RobotRaconteurNode.s.UnpackCStructureFromArrayDispose<testcstruct1>(MessageElementUtil.CastDataAndDispose<MessageElementCStructureArray>(vectorptr_messageelement_util.FindElement(rr_m,"s")));
    this.obj.testcstruct1_func1(s);
    return new MessageElement("return",(int)0);
    }
    case "testcstruct1_func2":
    {
    testcstruct1 rr_ret=this.obj.testcstruct1_func2();
    return MessageElementUtil.NewMessageElementDispose("return",RobotRaconteurNode.s.PackCStructureToArray<testcstruct1>(ref rr_ret));
    }
    case "gen_func1":
    {
    Generator2<double> rr_ret=this.obj.gen_func1();
    int generator_index = innerskel.RegisterGeneratorServer("gen_func1", new WrappedGenerator2ServerDirectorNET<double>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "gen_func2":
    {
    string name=MessageElementUtil.CastDataAndDispose<string>(vectorptr_messageelement_util.FindElement(rr_m,"name"));
    Generator2<byte[]> rr_ret=this.obj.gen_func2(name);
    int generator_index = innerskel.RegisterGeneratorServer("gen_func2", new WrappedGenerator2ServerDirectorNET<byte[]>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "gen_func3":
    {
    string name=MessageElementUtil.CastDataAndDispose<string>(vectorptr_messageelement_util.FindElement(rr_m,"name"));
    Generator3<byte[]> rr_ret=this.obj.gen_func3(name);
    int generator_index = innerskel.RegisterGeneratorServer("gen_func3", new WrappedGenerator3ServerDirectorNET<byte[]>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "gen_func4":
    {
    Generator1<byte[],byte[]> rr_ret=this.obj.gen_func4();
    int generator_index = innerskel.RegisterGeneratorServer("gen_func4", new WrappedGenerator1ServerDirectorNET<byte[],byte[]>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    case "gen_func5":
    {
    Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2> rr_ret=this.obj.gen_func5();
    int generator_index = innerskel.RegisterGeneratorServer("gen_func5", new WrappedGenerator1ServerDirectorNET<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>(rr_ret));
    return new MessageElement("index",generator_index);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o4": {
    return obj.get_o4();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(testroot3)rrobj1;
    obj.unreliable1=new Pipe<int>(innerskel.GetPipe("unreliable1"));
    obj.unreliable2=new Pipe<int>(innerskel.GetPipe("unreliable2"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(testroot3)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(testroot3)rrobj1;
    obj.peekwire=new Wire<int>(innerskel.GetWire("peekwire"));
    obj.pokewire=new Wire<int>(innerskel.GetWire("pokewire"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    case "readmem": {
    WrappedArrayMemoryDirectorNET<double> dir=new  WrappedArrayMemoryDirectorNET<double>(obj.readmem);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    case "cstruct_m1": {
    WrappedCStructureArrayMemoryDirectorNET<testcstruct2> dir=new  WrappedCStructureArrayMemoryDirectorNET<testcstruct2>(obj.cstruct_m1);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    case "cstruct_m2": {
    WrappedCStructureMultiDimArrayMemoryDirectorNET<testcstruct2> dir=new  WrappedCStructureMultiDimArrayMemoryDirectorNET<testcstruct2>(obj.cstruct_m2);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService3.testroot3"; } }
}
public class obj1_skel : ServiceSkel {
    protected obj1 obj;
    public obj1_skel(object o) : base(o) { obj=(obj1)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "d1":
    {
    double[] ret=obj.d1;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "d1":
    {
    obj.d1=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(obj1)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService3.obj1"; } }
}
public class obj2_skel : ServiceSkel {
    protected obj2 obj;
    public obj2_skel(object o) : base(o) { obj=(obj2)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "d1":
    {
    double[] ret=obj.d1;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "d1":
    {
    obj.d1=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(obj2)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService3.obj2"; } }
}
public class obj3_skel : ServiceSkel {
    protected obj3 obj;
    public obj3_skel(object o) : base(o) { obj=(obj3)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "d1":
    {
    double[] ret=obj.d1;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "d1":
    {
    obj.d1=MessageElementUtil.CastDataAndDispose<double[]>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(obj3)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService3.obj3"; } }
}
public class obj4_skel : ServiceSkel {
    protected obj4 obj;
    public obj4_skel(object o) : base(o) { obj=(obj4)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "s_ind":
    {
    string ret=obj.s_ind;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    case "i_ind":
    {
    int ret=obj.i_ind;
    return MessageElementUtil.NewMessageElementDispose("return",new int[] {ret});
    }
    case "data":
    {
    string ret=obj.data;
    return MessageElementUtil.NewMessageElementDispose("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "s_ind":
    {
    obj.s_ind=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    case "i_ind":
    {
    obj.i_ind=(MessageElementUtil.CastDataAndDispose<int[]>(m))[0];
    return;
    }
    case "data":
    {
    obj.data=MessageElementUtil.CastDataAndDispose<string>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o3_1": {
    return obj.get_o3_1(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(obj4)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureArrayMemoryDirector GetCStructureArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedCStructureMultiDimArrayMemoryDirector GetCStructureMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService3.obj4"; } }
}
public static class RRExtensions{
    public static Task<int> async_get_readme(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_readme(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_readme(this async_testroot3 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_readme(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_writeme(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_writeme(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_writeme(this async_testroot3 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_writeme(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_unknown_modifier(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_unknown_modifier(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_unknown_modifier(this async_testroot3 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_unknown_modifier(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<testenum1> async_get_testenum1_prop(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<testenum1> t=new RobotRaconteurTaskCompletion<testenum1>();
    rr_obj.async_get_testenum1_prop(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_testenum1_prop(this async_testroot3 rr_obj, testenum1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_testenum1_prop(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<testcstruct1> async_get_testcstruct1_prop(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<testcstruct1> t=new RobotRaconteurTaskCompletion<testcstruct1>();
    rr_obj.async_get_testcstruct1_prop(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_testcstruct1_prop(this async_testroot3 rr_obj, testcstruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_testcstruct1_prop(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<teststruct3> async_get_teststruct3_prop(this async_testroot3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<teststruct3> t=new RobotRaconteurTaskCompletion<teststruct3>();
    rr_obj.async_get_teststruct3_prop(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_teststruct3_prop(this async_testroot3 rr_obj, teststruct3 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_teststruct3_prop(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_testcstruct1_func1(this async_testroot3 rr_obj,testcstruct1 s,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion rr_t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_testcstruct1_func1(s,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<testcstruct1> async_testcstruct1_func2(this async_testroot3 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<testcstruct1> rr_t=new RobotRaconteurTaskCompletion<testcstruct1>();
    rr_obj.async_testcstruct1_func2(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<Generator2<double>> async_gen_func1(this async_testroot3 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Generator2<double>> rr_t=new RobotRaconteurTaskCompletion<Generator2<double>>();
    rr_obj.async_gen_func1(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<Generator2<byte[]>> async_gen_func2(this async_testroot3 rr_obj,string name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Generator2<byte[]>> rr_t=new RobotRaconteurTaskCompletion<Generator2<byte[]>>();
    rr_obj.async_gen_func2(name,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<Generator3<byte[]>> async_gen_func3(this async_testroot3 rr_obj,string name,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Generator3<byte[]>> rr_t=new RobotRaconteurTaskCompletion<Generator3<byte[]>>();
    rr_obj.async_gen_func3(name,rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<Generator1<byte[],byte[]>> async_gen_func4(this async_testroot3 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Generator1<byte[],byte[]>> rr_t=new RobotRaconteurTaskCompletion<Generator1<byte[],byte[]>>();
    rr_obj.async_gen_func4(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>> async_gen_func5(this async_testroot3 rr_obj,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>> rr_t=new RobotRaconteurTaskCompletion<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>>();
    rr_obj.async_gen_func5(rr_t.handler,rr_timeout);
    return rr_t.Task;
    }
    public static Task<obj4> async_get_o4(this async_testroot3 rr_obj, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<obj4> t=new RobotRaconteurTaskCompletion<obj4>();
    rr_obj.async_get_o4(t.handler,timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d1(this async_obj1 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d1(this async_obj1 rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d1(this async_obj2 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d1(this async_obj2 rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<double[]> async_get_d1(this async_obj3 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<double[]> t=new RobotRaconteurTaskCompletion<double[]>();
    rr_obj.async_get_d1(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_d1(this async_obj3 rr_obj, double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_d1(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_s_ind(this async_obj4 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_s_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_s_ind(this async_obj4 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_s_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<int> async_get_i_ind(this async_obj4 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<int> t=new RobotRaconteurTaskCompletion<int>();
    rr_obj.async_get_i_ind(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_i_ind(this async_obj4 rr_obj, int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_i_ind(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<string> async_get_data(this async_obj4 rr_obj, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<string> t=new RobotRaconteurTaskCompletion<string>();
    rr_obj.async_get_data(t.handler,rr_timeout);
    return t.Task;
    }
    public static Task async_set_data(this async_obj4 rr_obj, string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurVoidTaskCompletion t=new RobotRaconteurVoidTaskCompletion();
    rr_obj.async_set_data(value,t.handler,rr_timeout);
    return t.Task;
    }
    public static Task<com.robotraconteur.testing.TestService1.sub3> async_get_o3_1(this async_obj4 rr_obj, string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService1.sub3> t=new RobotRaconteurTaskCompletion<com.robotraconteur.testing.TestService1.sub3>();
    rr_obj.async_get_o3_1(ind,t.handler,timeout);
    return t.Task;
    }
}
}
