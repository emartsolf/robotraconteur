// Copyright 2011-2018 Wason Technology, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is automatically generated. Do not edit.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RobotRaconteur
{
    /// <summary>
    /// The base class for Robot Raconteur exceptions.  These exception contain a Robot Raconteur error code
    /// </summary>
    public class RobotRaconteurException : Exception
    {
        /// <summary>
        /// Initializes an empty exception
        /// </summary>
        public RobotRaconteurException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new exception
        /// </summary>
        /// <param name="ErrorCode">The error code</param>
        /// <param name="error">The Robot Raconteur error name</param>
        /// <param name="message">The Robot Raconteur error message</param>
        public RobotRaconteurException(MessageErrorType ErrorCode, string error, string message)
            : base(message)
        {
            Error = error;
            this.ErrorCode = ErrorCode;
        }

        /// <summary>
        /// Initializes a Robot Raconteur exception that contains a C# exception
        /// </summary>
        /// <param name="message">The message</param>
        /// <param name="innerexception">The C# contained by this exception</param>
        public RobotRaconteurException(string message, Exception innerexception)
            : base(message, innerexception)
        {

        }

        /// <summary>
        /// The error code
        /// </summary>
        public MessageErrorType ErrorCode=MessageErrorType.None;
        
        /// <summary>
        /// The error name
        /// </summary>
        public string Error = "";

        /// <summary>
        /// Returns as tring representation of this exception
        /// </summary>
        /// <returns>The string representation</returns>
        public override string ToString()
        {
            return "RobotRaconteurException: " + Error + ": " + Message;
        }


    }

    @RR_ERRORS_DECL@

    /// <summary>
    /// Helper class for working with RobotRaconteurException
    /// </summary>
    public class RobotRaconteurExceptionUtil
    {
        /// <summary>
        /// Populates an entry with an exception
        /// </summary>
        /// <param name="exception">The exception to serialize</param>
        /// <param name="entry">The entry to populate</param>
        public static void ExceptionToMessageEntry(Exception exception, MessageEntry entry)
        {
			
			@RR_ERRORS_CATCH@
			
            if (exception is RobotRaconteurException)
            {
                RobotRaconteurException r=(RobotRaconteurException)exception;
                entry.Error = r.ErrorCode;
                entry.AddElement("errorname", r.Error);
                entry.AddElement("errorstring", r.Message);

            }
            else
            {
                entry.Error = MessageErrorType.RemoteError;
                entry.AddElement("errorname", exception.GetType().ToString());
                entry.AddElement("errorstring", exception.Message);


            }

        }

        /// <summary>
        /// Converts a MessageEntry containing an error to the correct exception
        /// </summary>
        /// <param name="entry">The entry containing an error</param>
        /// <returns>An populated exception</returns>
        public static Exception ErrorCodeToException(MessageErrorType error_code, string errorname, string errorstring)
        {
            switch (error_code)
            {
				case MessageErrorType.RemoteError:
                    RobotRaconteurException e1= new RobotRaconteurRemoteException(errorname,errorstring);
                    return RobotRaconteurNode.s.DownCastException(e1);
                @RR_ERRORS_CASE@
            }

            return new RobotRaconteurException(error_code,errorname,errorstring);

        }
    }
}